var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.7","fields":["title","body"],"fieldVectors":[["title/modules/AppModule.html",[0,1.204,1,2.475]],["body/modules/AppModule.html",[0,1.906,1,4.97,2,1.67,3,1.67,4,1.897,5,1.897,6,1.67,7,1.897,8,1.897,9,3.206,10,3.206,11,3.107,12,0.022,13,3.549,14,3.9,15,3.315,16,4.13,17,3.817,18,2.552,19,1.897,20,1.777,21,0.252,22,0.226,23,0.226,24,3.753,25,3.32,26,0.515,27,0.808,28,2.184,29,5.05,30,1.484,31,2.362,32,3.753,33,2.846,34,2.577,35,3.206,36,3.206,37,2.717,38,2.362,39,3.753,40,3.753,41,3.206,42,1.325,43,1.064,44,0.337,45,3.753,46,3.206,47,3.753,48,3.753,49,3.753,50,3.753,51,3.753,52,2.577,53,3.753,54,3.753,55,3.753,56,3.753,57,3.753,58,3.753,59,3.753,60,3.753,61,3.206,62,0.252,63,0.171,64,0.011,65,0.014,66,0.011]],["title/controllers/AuthController.html",[67,1.511,68,2.475]],["body/controllers/AuthController.html",[12,0.022,21,0.236,22,0.211,23,0.211,26,0.442,27,0.756,42,1.946,43,1.683,44,0.495,62,0.236,63,0.16,64,0.01,65,0.014,66,0.01,67,1.471,68,3.312,69,1.471,70,2.998,71,2.209,72,3.509,73,0.288,74,1.444,75,4.709,76,3.312,77,4.709,78,3.509,79,3.764,80,1.402,81,4.824,82,0.726,83,3.509,84,1.65,85,1.563,86,0.998,87,1.65,88,2.033,89,2.41,90,4.824,91,3.509,92,2.998,93,1.187,94,4.824,95,3.509,96,4.502,97,2.209,98,2.453,99,2.41,100,2.41,101,2.661,102,3.736,103,2.998,104,2.41,105,3.207,106,2.998,107,2.209,108,1.109,109,3.509,110,3.509,111,1.239,112,1.907,113,1.65,114,2.209,115,3.509,116,3.036,117,2.608,118,2.179,119,3.509,120,3.509,121,3.509,122,2.998,123,2.998,124,3.509,125,3.509,126,3.509,127,1.562,128,1.471,129,3.509,130,2.438,131,2.41,132,2.41,133,1.562,134,1.662,135,3.509,136,2.998,137,2.661,138,2.661,139,3.509,140,3.509]],["title/classes/AuthCredentialsDto.html",[63,0.165,79,1.95]],["body/classes/AuthCredentialsDto.html",[12,0.021,21,0.307,22,0.274,23,0.274,26,0.428,44,0.515,52,4.656,62,0.307,63,0.262,64,0.013,65,0.016,66,0.013,73,0.375,79,3.104,80,1.459,82,0.756,93,1.417,108,1.444,130,3.17,141,1.099,142,5.36,143,3.902,144,1.235,145,4.568,146,4.568,147,4.568,148,5.738,149,5.738,150,5.738,151,5.738,152,4.568,153,5.738,154,2.971,155,3.394,156,4.568,157,2.471,158,4.568,159,1.914,160,4.308,161,4.568,162,4.568,163,4.568,164,4.568,165,4.568]],["title/modules/AuthModule.html",[0,1.204,11,1.707]],["body/modules/AuthModule.html",[0,1.945,2,1.738,3,1.738,4,1.974,5,1.974,6,1.738,7,2.942,8,2.621,11,3.257,12,0.022,14,3.017,17,3.017,18,2.621,19,1.974,20,1.85,21,0.263,22,0.235,23,0.235,25,3.017,26,0.528,27,0.841,28,2.273,30,1.544,35,3.337,36,3.337,37,2.761,38,2.459,41,3.337,42,1.379,61,3.337,62,0.263,63,0.178,64,0.011,65,0.015,66,0.011,68,3.998,69,2.174,105,3.861,106,3.337,166,3.337,167,3.337,168,4.177,169,3.906,170,3.561,171,3.906,172,3.906,173,2.962,174,5.186,175,2.113,176,3.906,177,2.459,178,3.337,179,3.906,180,3.906,181,3.906,182,2.682,183,3.906,184,3.906,185,3.337,186,3.337,187,3.906,188,3.906,189,3.906]],["title/injectables/AuthService.html",[105,2.097,190,1.346]],["body/injectables/AuthService.html",[12,0.022,21,0.164,22,0.146,23,0.146,26,0.487,27,0.524,30,0.963,37,2.621,38,1.533,42,2.306,43,0.69,44,0.483,46,2.08,62,0.164,63,0.111,64,0.007,65,0.011,66,0.007,73,0.2,74,1.108,75,3.162,76,2.542,77,3.162,79,3.577,82,0.747,84,1.611,85,1.526,86,0.974,87,1.498,88,1.919,89,2.542,92,3.162,93,1.077,96,4.467,98,2.226,101,1.846,103,2.08,104,1.672,105,2.153,111,2.238,112,1.978,113,1.696,117,1.02,122,2.08,123,2.08,127,1.084,128,2.605,130,3.067,132,1.672,133,1.084,138,1.846,144,0.797,173,1.846,177,1.533,178,2.08,182,1.672,190,1.382,191,1.317,192,2.08,193,3.701,194,2.002,195,2.435,196,3.149,197,2.976,198,5.89,199,3.701,200,3.701,201,3.701,202,2.097,203,1.368,204,2.435,205,3.701,206,2.435,207,2.08,208,2.435,209,2.435,210,1.02,211,1.153,212,3.701,213,1.417,214,2.33,215,2.08,216,2.08,217,2.08,218,3.701,219,2.08,220,2.08,221,1.02,222,1.533,223,4.597,224,2.08,225,2.435,226,2.657,227,1.236,228,2.435,229,2.435,230,2.435,231,2.08,232,2.435,233,0.843,234,2.435,235,2.153,236,1.877,237,2.435,238,2.435,239,3.162,240,3.701,241,2.435,242,2.435,243,2.435,244,4.478,245,2.435,246,2.435,247,2.435,248,1.417,249,2.435,250,2.435,251,2.435,252,1.417,253,2.08,254,2.435,255,2.435,256,2.435,257,2.435,258,2.435,259,2.435,260,2.435,261,1.417,262,2.435,263,2.08,264,2.435,265,2.435,266,2.08,267,2.435,268,2.435,269,2.435,270,2.435,271,1.672,272,2.435,273,2.435,274,2.435,275,2.435,276,2.435,277,2.435,278,2.435,279,3.701,280,2.435,281,2.08,282,2.435]],["title/controllers/CategoriesController.html",[67,1.511,283,2.475]],["body/controllers/CategoriesController.html",[12,0.021,21,0.182,22,0.163,23,0.163,26,0.492,27,0.583,43,1.596,44,0.505,62,0.182,63,0.123,64,0.008,65,0.011,66,0.008,67,1.134,69,1.134,71,1.703,73,0.222,74,1.199,80,1.432,82,0.742,84,1.686,85,1.596,86,1.019,87,1.686,88,2.058,97,3.003,98,1.783,99,1.858,100,2.751,102,3.711,107,1.703,108,0.855,111,0.955,112,1.07,113,1.686,114,1.703,116,3.003,117,2.471,118,1.886,175,1.464,203,1.679,227,1.969,233,1.671,235,2.331,261,1.574,283,2.751,284,2.312,285,2.776,286,3.618,287,3.618,288,3.618,289,4.076,290,3.618,291,2.052,292,3.43,293,2.052,294,2.706,295,2.052,296,3.038,297,2.706,298,2.052,299,3.068,300,2.706,301,2.331,302,2.312,303,3.038,304,2.706,305,2.312,306,3.645,307,2.052,308,2.706,309,1.858,310,1.858,311,3.999,312,1.858,313,2.312,314,1.858,315,1.858,316,1.858,317,2.411,318,2.312,319,1.367,320,3.038,321,1.574,322,1.574,323,1.584,324,2.052,325,1.858,326,0.955,327,3.43,328,2.052,329,1.858,330,1.367,331,2.751,332,2.706,333,2.706,334,1.858,335,1.858,336,2.706,337,2.312,338,3.038,339,2.052,340,1.858,341,1.858,342,2.706,343,3.618,344,2.706,345,2.751,346,2.052,347,2.312,348,2.706,349,2.052,350,2.706,351,2.706]],["title/modules/CategoriesModule.html",[0,1.204,13,1.95]],["body/modules/CategoriesModule.html",[0,2.034,2,1.907,3,1.907,4,2.165,5,2.165,6,1.907,7,3.077,8,3.077,11,2.609,12,0.021,13,3.833,15,3.439,18,2.784,19,2.165,20,2.029,21,0.288,22,0.257,23,0.257,25,3.205,26,0.516,27,0.922,28,2.493,30,1.694,31,2.697,34,2.942,62,0.288,63,0.196,64,0.012,65,0.016,66,0.012,69,2.309,170,3.783,283,4.181,317,3.654,318,3.66,352,3.66,353,4.284,354,3.66,355,3.66,356,4.284,357,4.284,358,2.697,359,3.66,360,4.284]],["title/injectables/CategoriesService.html",[190,1.346,317,1.822]],["body/injectables/CategoriesService.html",[12,0.022,21,0.127,22,0.114,23,0.114,26,0.44,27,0.408,30,0.748,42,2.26,43,1.63,44,0.5,62,0.127,63,0.086,64,0.012,65,0.009,66,0.005,73,0.155,74,0.91,82,0.758,84,1.668,85,1.58,86,1.009,87,1.605,88,2,98,2.27,111,2.128,112,1.888,113,1.527,127,1.941,128,2.651,131,2.087,133,1.941,134,2.415,144,0.654,190,1.135,191,1.024,194,1.644,202,0.793,203,1.7,210,0.793,211,0.896,213,1.101,222,1.191,226,2.137,227,2.051,233,1.675,236,1.828,248,1.101,281,1.617,285,1.101,286,2.305,287,2.305,288,2.305,289,2.597,290,2.305,291,2.305,292,2.779,295,2.305,298,2.305,299,2.537,301,1.101,302,2.597,305,2.597,306,3.345,317,1.536,319,0.956,320,2.305,321,1.101,322,1.101,323,1.506,324,1.435,326,0.668,330,0.956,358,3.21,359,1.617,361,1.617,362,3.04,363,3.04,364,1.893,365,2.538,366,3.04,367,3.04,368,3.714,369,1.893,370,3.04,371,1.893,372,1.893,373,1.893,374,1.893,375,1.893,376,1.893,377,1.024,378,1.435,379,1.893,380,1.893,381,1.893,382,1.617,383,2.305,384,2.305,385,2.305,386,2.305,387,3.254,388,2.087,389,1.539,390,2.359,391,2.305,392,2.889,393,2.305,394,2.305,395,2.305,396,2.305,397,1.893,398,1.893,399,1.893,400,1.893,401,1.893,402,2.995,403,2.087,404,1.893,405,3.04,406,1.893,407,1.435,408,1.3,409,3.307,410,1.893,411,1.893,412,1.024,413,3.809,414,1.893,415,3.04,416,1.893,417,1.893,418,3.04,419,1.893,420,1.893,421,1.893,422,1.893,423,1.893,424,2.597,425,1.893,426,1.893,427,0.707,428,1.435,429,3.04,430,1.435,431,1.893,432,2.889,433,1.925,434,1.893,435,1.617,436,1.893,437,1.024,438,1.893,439,1.893,440,1.893,441,1.617,442,3.809,443,1.893,444,1.893,445,1.893,446,1.893]],["title/classes/Category.html",[63,0.165,323,1.425]],["body/classes/Category.html",[12,0.022,21,0.179,22,0.16,23,0.16,26,0.436,44,0.614,62,0.179,63,0.18,64,0.008,65,0.011,66,0.008,73,0.218,80,1.74,82,0.902,93,1.342,117,2.454,141,0.639,144,0.851,202,1.978,203,1.648,210,2.454,221,1.113,227,1.576,233,1.516,252,2.299,323,2.517,326,0.938,368,2.97,387,4.031,389,1.972,427,1.762,433,2.384,447,2.269,448,1.759,449,2.97,450,4.718,451,2.97,452,1.865,453,2.97,454,2.97,455,1.978,456,2.553,457,4.718,458,2.97,459,2.656,460,3.625,461,2.656,462,2.97,463,2.656,464,2.487,465,2.996,466,3.817,467,2.656,468,2.713,469,2.656,470,2.713,471,2.014,472,2.656,473,2.713,474,2.996,475,2.656,476,2.97,477,2.656,478,2.996,479,2.656,480,2.656,481,2.996,482,3.289,483,2.656,484,2.646,485,2.269,486,2.656,487,3.589,488,3.589,489,2.656,490,2.656,491,2.014,492,2.656,493,2.138,494,2.97,495,2.656,496,3.686,497,2.299,498,2.713,499,3.578,500,4.031,501,2.97,502,1.824,503,2.014,504,2.014,505,4.164,506,1.113,507,2.269,508,2.656,509,2.656,510,2.656,511,2.656,512,2.656,513,2.656]],["title/classes/CategoryRepository.html",[63,0.165,358,2.269]],["body/classes/CategoryRepository.html",[12,0.022,21,0.173,22,0.155,23,0.155,26,0.46,27,0.556,42,2.336,43,1.315,44,0.462,62,0.173,63,0.118,64,0.007,65,0.011,66,0.007,73,0.212,74,1.158,82,0.727,84,1.542,85,1.461,86,0.933,87,1.542,88,1.953,98,2.293,111,1.637,113,1.926,127,2.293,128,2.159,133,2.293,134,2.44,137,2.933,141,0.621,144,0.833,196,2.92,202,2.159,203,1.403,210,1.081,211,1.222,213,1.501,221,1.081,226,2.313,227,2.006,233,1.611,235,2.25,236,2.589,248,1.501,261,1.501,285,2.25,286,2.933,287,2.933,288,2.933,290,2.933,291,2.933,292,3.371,295,2.933,298,2.933,299,2.997,301,2.25,306,3.594,319,1.304,320,2.933,321,1.501,322,1.501,323,2.498,324,1.957,326,0.911,330,1.304,340,1.772,341,1.772,347,2.204,358,2.434,368,2.434,377,1.396,382,2.204,390,2.092,402,2.656,403,1.772,412,1.396,424,2.204,437,2.787,448,1.721,452,1.02,455,1.081,514,1.957,515,3.867,516,2.58,517,2.58,518,2.58,519,2.58,520,3.867,521,2.58,522,1.772,523,3.789,524,2.997,525,1.624,526,2.58,527,2.656,528,3.304,529,2.204,530,3.304,531,1.957,532,2.58,533,2.204,534,3.185,535,2.58,536,2.58,537,1.772,538,2.58,539,2.933,540,2.204,541,2.58,542,2.204,543,2.204,544,1.957]],["title/modules/ConfigModule.html",[0,1.204,14,2.097]],["body/modules/ConfigModule.html",[0,2.145,2,2.141,3,2.141,4,2.43,5,2.43,6,2.141,7,2.994,8,3.245,12,0.021,14,4.005,18,2.994,19,2.43,20,2.278,21,0.323,22,0.289,23,0.289,26,0.442,27,1.036,37,3.192,62,0.323,63,0.22,64,0.014,65,0.017,66,0.014,113,1.44,545,4.109,546,4.109,547,4.81,548,5.925,549,4.81,550,4.81,551,4.81,552,4.81,553,4.81]],["title/classes/ConfigService.html",[37,1.604,63,0.165]],["body/classes/ConfigService.html",[12,0.022,21,0.176,22,0.157,23,0.157,26,0.386,37,1.737,43,1.83,44,0.498,62,0.262,63,0.119,64,0.007,65,0.011,66,0.007,73,0.214,74,1.168,82,0.863,84,1.552,85,1.469,86,0.938,87,1.742,93,1.335,111,2.367,112,1.847,113,0.782,127,1.162,133,1.162,134,1.237,138,3.543,141,0.629,144,0.84,194,1.413,210,1.635,211,1.237,226,2.325,236,1.095,271,2.68,408,2.68,441,3.334,460,1.519,554,1.98,555,5.911,556,5.513,557,3.902,558,5.183,559,3.902,560,3.902,561,4.672,562,4.672,563,4.672,564,4.672,565,4.672,566,3.902,567,3.902,568,3.902,569,3.902,570,2.611,571,2.611,572,3.902,573,2.611,574,2.611,575,3.902,576,2.611,577,3.902,578,3.902,579,3.902,580,3.902,581,3.334,582,3.902,583,3.902,584,2.611,585,2.611,586,2.611,587,2.611,588,2.611,589,2.611,590,2.611,591,2.611,592,2.611,593,2.611,594,3.334,595,2.611,596,3.334,597,3.902,598,3.902,599,2.231,600,2.231,601,2.611,602,2.611,603,2.611,604,2.611,605,3.902,606,2.611,607,3.902,608,2.611,609,2.611,610,2.611,611,2.611,612,2.611,613,2.611,614,2.611,615,2.611,616,2.611,617,2.611,618,2.611,619,2.611,620,2.611,621,2.611,622,5.547,623,2.611,624,2.611,625,2.611,626,2.611,627,2.611,628,2.611,629,2.611,630,2.611,631,2.611,632,5.547,633,2.611,634,2.611,635,2.611,636,2.611,637,3.93,638,2.611,639,2.611,640,2.611,641,2.611,642,5.183,643,2.611,644,5.183,645,2.611,646,2.611,647,3.902,648,2.611,649,2.611,650,2.611,651,2.611,652,3.902,653,2.611,654,2.611,655,2.611,656,2.611,657,2.611]],["title/classes/CreateCategoryDto.html",[63,0.165,292,2.097]],["body/classes/CreateCategoryDto.html",[12,0.021,21,0.269,22,0.24,23,0.24,26,0.467,44,0.599,62,0.269,63,0.269,64,0.011,65,0.015,66,0.011,73,0.328,80,1.591,82,0.825,86,1.209,93,1.438,108,1.264,118,1.58,141,0.962,144,1.134,154,2.494,155,3.186,157,2.162,159,1.675,160,3.616,203,1.698,292,3.063,368,3.707,427,2.199,433,3.163,452,2.474,455,2.468,506,1.675,658,5.557,659,3.031,660,3.414,661,3.996,662,3.314,663,3.314,664,3.996,665,3.996,666,3.031,667,3.996,668,2.964,669,3.707,670,2.964,671,2.325,672,2.516,673,2.325,674,2.744,675,2.744,676,2.162]],["title/classes/CreateMediaDto.html",[63,0.165,677,2.269]],["body/classes/CreateMediaDto.html",[12,0.021,21,0.281,22,0.251,23,0.251,26,0.449,44,0.618,62,0.281,63,0.247,64,0.012,65,0.016,66,0.012,73,0.343,80,1.619,82,0.839,86,1.153,93,1.456,108,1.322,141,1.006,144,1.168,154,3.016,155,3.445,157,2.262,159,1.752,160,4.133,389,1.476,452,2.379,453,2.631,455,2.522,666,3.17,668,2.85,670,2.85,671,2.432,673,2.432,677,3.413,678,5.637,679,3.17,680,4.564,681,4.18,682,4.18,683,4.18,684,4.133,685,3.571,686,3.571,687,4.18,688,4.18,689,4.18,690,3.571,691,4.632,692,3.17,693,3.571,694,2.871,695,3.17,696,3.571]],["title/classes/CreateTransactionDto.html",[63,0.165,697,2.097]],["body/classes/CreateTransactionDto.html",[12,0.021,21,0.242,22,0.216,23,0.216,26,0.447,44,0.606,62,0.242,63,0.255,64,0.01,65,0.014,66,0.01,73,0.295,80,1.647,82,0.854,86,1.222,93,1.453,108,1.137,118,1.422,141,0.866,144,1.056,154,2.841,155,3.021,157,1.946,159,1.507,160,3.834,203,1.647,427,2.24,433,3.031,452,2.371,455,2.34,493,2.654,506,1.507,662,3.088,663,3.088,666,2.728,668,2.973,669,3.515,670,2.973,671,2.093,672,2.264,673,2.854,674,2.47,675,2.47,676,3.245,697,2.854,698,5.664,699,2.728,700,4.234,701,4.548,702,3.597,703,3.597,704,3.597,705,3.073,706,3.597,707,3.073,708,3.597,709,3.597,710,3.597,711,4.191,712,4.191,713,3.073,714,2.728,715,2.728,716,3.073,717,3.073]],["title/classes/GetCategoriesFilterDto.html",[63,0.165,299,2.097]],["body/classes/GetCategoriesFilterDto.html",[12,0.021,21,0.337,22,0.302,23,0.302,26,0.453,44,0.45,62,0.337,63,0.278,64,0.014,65,0.017,66,0.014,73,0.412,80,1.276,82,0.661,86,1.101,93,1.309,108,1.587,141,1.208,144,1.309,154,2.88,159,2.104,285,3.539,299,3.539,527,4.493,668,2.88,670,2.88,718,5.196,719,3.807,720,4.288,721,4.288]],["title/classes/GetTransactionsFilterDto.html",[63,0.165,722,2.097]],["body/classes/GetTransactionsFilterDto.html",[12,0.021,21,0.337,22,0.302,23,0.302,26,0.453,44,0.45,62,0.337,63,0.278,64,0.014,65,0.017,66,0.014,73,0.412,80,1.276,82,0.661,86,1.101,93,1.309,108,1.587,141,1.208,144,1.309,154,2.88,159,2.104,456,3.29,527,4.493,668,2.88,670,2.88,719,3.807,720,4.288,721,4.288,722,3.539,723,5.196]],["title/interfaces/JwtPayload.html",[214,2.269,724,2.475]],["body/interfaces/JwtPayload.html",[12,0.02,21,0.362,22,0.323,23,0.323,44,0.483,62,0.362,64,0.015,65,0.018,66,0.015,73,0.441,93,1.451,130,3.517,144,1.365,214,3.99,724,3.694,725,5.379,726,4.596,727,4.596]],["title/injectables/JwtStrategy.html",[168,2.269,190,1.346]],["body/injectables/JwtStrategy.html",[12,0.022,21,0.269,22,0.24,23,0.24,26,0.508,27,0.861,37,3.031,38,2.516,42,2.079,43,1.133,44,0.473,62,0.269,63,0.182,64,0.011,65,0.015,66,0.011,73,0.328,74,1.576,82,0.694,84,1.576,85,1.493,86,0.953,87,1.196,88,1.665,101,3.993,111,1.859,112,2.082,113,1.196,128,1.675,130,2.02,136,4.498,168,3.314,175,2.162,182,2.744,185,3.414,186,3.414,190,1.966,191,2.162,194,2.849,197,3.375,214,3.94,215,3.414,216,3.414,217,3.414,226,2.207,233,1.425,236,1.675,239,4.498,326,1.411,448,1.779,728,3.414,729,3.996,730,3.996,731,5.265,732,3.996,733,3.996,734,3.996,735,3.996,736,3.414,737,3.996,738,3.996,739,3.996,740,3.996,741,3.996,742,3.996]],["title/classes/Media.html",[63,0.165,389,1.273]],["body/classes/Media.html",[12,0.021,21,0.188,22,0.168,23,0.168,26,0.459,44,0.627,62,0.188,63,0.187,64,0.008,65,0.012,66,0.008,73,0.229,80,1.727,82,0.895,93,1.412,117,1.719,141,0.672,144,0.883,202,2.037,203,1.516,210,2.245,221,1.171,227,1.623,233,1.532,252,2.828,323,2.499,326,0.986,389,1.716,427,1.043,448,1.825,449,3.059,451,3.059,452,1.921,454,3.059,455,2.037,458,3.059,460,3.47,462,3.059,464,3.059,465,3.11,466,3.88,468,2.816,470,3.337,473,2.816,476,3.059,478,2.118,482,3.754,484,2.994,487,3.678,488,3.678,491,2.118,493,2.219,494,3.059,496,3.754,497,2.386,499,3.11,501,3.371,502,1.918,503,2.118,505,4.095,506,1.171,680,3.686,684,3.917,692,2.118,694,3.678,743,2.386,744,4.86,745,2.793,746,2.793,747,2.793,748,2.793,749,2.793,750,4.101,751,2.793,752,2.793,753,2.386,754,2.793,755,4.101,756,2.793,757,2.793,758,2.793,759,2.793,760,2.793,761,2.118,762,2.793,763,2.793,764,2.793,765,2.793,766,2.793]],["title/controllers/MediaController.html",[67,1.511,767,2.475]],["body/controllers/MediaController.html",[12,0.021,21,0.19,22,0.17,23,0.17,26,0.49,27,0.607,43,1.624,44,0.514,62,0.19,63,0.129,64,0.008,65,0.012,66,0.008,67,1.182,69,1.182,71,1.776,73,0.231,74,1.237,80,1.456,82,0.755,84,1.715,85,1.624,86,1.037,87,1.715,88,2.078,97,3.077,98,1.839,99,1.937,100,2.837,102,3.605,107,1.776,108,0.892,111,0.996,112,1.115,113,1.715,114,1.776,116,2.6,117,2.255,118,1.633,175,1.526,203,1.694,227,1.999,233,1.671,235,2.403,261,1.641,293,2.139,296,3.133,303,3.133,307,2.139,309,1.937,310,1.937,311,4.08,312,1.937,314,1.937,315,1.937,316,1.937,319,1.425,325,1.937,326,0.996,327,3.332,328,2.139,329,1.937,330,1.425,331,2.837,334,1.937,335,1.937,338,3.133,339,2.139,343,3.707,345,2.837,346,2.139,349,2.139,365,2.315,389,1.899,677,3.767,767,2.837,768,2.41,769,4.176,770,3.707,771,3.529,772,4.176,773,4.176,774,2.41,775,2.821,776,2.139,777,2.821,778,2.41,779,2.821,780,2.41,781,2.821,782,2.41,783,3.991,784,2.821,785,2.41,786,3.529,787,2.139,788,2.821,789,2.821,790,2.821,791,2.821,792,2.821,793,2.821,794,2.821,795,2.821,796,2.821,797,2.821]],["title/modules/MediaModule.html",[0,1.204,15,1.822]],["body/modules/MediaModule.html",[0,2.07,2,1.98,3,1.98,4,2.249,5,2.249,6,1.98,7,3.132,8,3.132,11,2.673,12,0.021,15,3.529,18,2.852,19,2.249,20,2.107,21,0.299,22,0.267,23,0.267,25,2.589,26,0.512,27,0.958,28,2.589,30,1.759,31,2.801,62,0.299,63,0.203,64,0.013,65,0.016,66,0.013,69,2.366,170,3.876,365,3.443,767,4.257,785,3.802,798,3.802,799,3.802,800,3.802,801,4.45,802,4.45,803,2.801,804,3.802,805,4.45]],["title/classes/MediaRepository.html",[63,0.165,803,2.269]],["body/classes/MediaRepository.html",[12,0.021,21,0.278,22,0.248,23,0.248,26,0.49,27,0.889,42,2.112,44,0.371,62,0.278,63,0.189,64,0.012,65,0.015,66,0.012,73,0.339,74,1.611,82,0.544,84,1.237,85,1.171,86,0.748,87,1.237,88,1.701,113,1.791,127,1.838,128,1.731,133,1.838,134,1.956,141,0.994,196,3.767,202,1.731,203,1.671,213,2.403,221,1.731,226,1.731,227,2.251,233,1.563,236,2.508,248,2.403,326,1.458,377,2.235,389,1.458,412,2.235,437,2.235,448,2.395,522,2.836,523,3.695,524,3.13,525,2.6,534,2.836,539,4.08,540,3.529,542,3.529,543,3.529,544,3.132,770,4.08,776,4.08,787,3.132,803,3.387,806,3.132,807,4.13,808,4.13,809,3.529,810,3.529]],["title/injectables/MediaService.html",[190,1.346,365,1.707]],["body/injectables/MediaService.html",[12,0.022,21,0.201,22,0.18,23,0.18,26,0.48,27,0.644,30,1.183,42,2.156,43,1.732,44,0.548,62,0.201,63,0.137,64,0.016,65,0.012,66,0.009,73,0.245,74,1.291,82,0.805,84,1.829,85,1.732,86,1.106,87,1.755,88,2.107,111,1.056,112,1.183,113,0.896,128,2.119,190,1.61,191,1.619,194,2.333,202,1.807,203,1.715,213,1.741,222,1.883,226,2.318,227,2.04,233,1.666,236,1.254,248,1.741,319,1.512,326,1.056,330,1.512,365,2.042,389,1.953,412,1.619,437,2.333,531,2.269,677,3.845,769,3.683,770,3.27,771,3.683,772,3.683,773,3.683,774,3.683,776,3.27,778,3.683,780,3.683,782,3.683,783,4.056,786,3.683,787,2.269,803,3.845,804,2.556,810,2.556,811,2.556,812,2.992,813,2.992,814,2.992,815,2.992,816,2.992,817,2.992,818,2.992,819,2.992,820,2.992,821,2.992,822,2.992,823,2.992,824,2.992,825,2.992,826,2.992,827,2.992,828,2.992,829,2.992]],["title/classes/Transaction.html",[63,0.165,484,1.707]],["body/classes/Transaction.html",[12,0.022,21,0.19,22,0.17,23,0.17,26,0.446,44,0.616,62,0.19,63,0.189,64,0.008,65,0.012,66,0.008,73,0.231,80,1.745,82,0.904,93,1.415,117,2.657,118,1.115,141,0.679,144,0.889,202,2.049,203,1.672,221,1.182,227,1.632,233,1.444,252,2.403,323,2.506,326,0.996,389,2.022,433,2.47,448,1.839,449,3.077,451,3.077,452,1.932,453,3.077,454,3.077,455,2.049,458,3.077,460,2.403,462,3.077,464,2.6,465,3.133,466,4.138,468,2.837,470,1.937,471,2.139,473,2.837,474,3.707,476,3.077,478,3.133,481,3.133,482,3.767,484,1.956,487,2.837,488,2.837,491,2.139,493,2.911,494,3.077,496,3.891,497,2.403,498,2.837,499,3.707,501,2.6,502,1.937,504,2.139,505,3.933,506,1.182,676,2.644,700,3.707,701,3.707,714,2.139,715,2.139,761,2.139,830,2.41,831,2.821,832,2.821,833,2.821,834,2.821,835,2.821,836,2.821,837,2.821,838,2.821,839,2.821,840,2.821,841,2.821,842,2.821,843,2.821,844,2.821,845,2.821,846,2.821,847,2.821,848,2.821,849,2.821]],["title/classes/TransactionRepository.html",[63,0.165,850,2.269]],["body/classes/TransactionRepository.html",[12,0.022,21,0.186,22,0.166,23,0.166,26,0.458,27,0.596,42,2.272,43,1.37,44,0.434,62,0.186,63,0.126,64,0.008,65,0.012,66,0.008,73,0.227,74,1.219,82,0.702,84,1.447,85,1.37,86,0.875,87,1.447,88,1.685,98,2.373,111,1.706,113,1.927,127,2.151,128,2.026,133,2.151,134,2.289,137,3.088,141,0.666,144,0.877,196,3.042,202,2.026,210,1.159,211,1.31,221,1.159,226,2.491,227,1.614,233,1.58,235,2.369,236,2.575,261,1.61,301,2.369,319,1.398,321,1.61,322,1.61,323,1.094,326,0.977,330,1.398,340,1.9,341,1.9,377,1.497,390,2.203,402,2.797,403,1.9,437,2.615,448,1.812,452,1.094,455,1.159,456,2.203,484,2.986,497,2.369,522,1.9,523,3.661,524,2.812,525,1.741,527,2.797,528,3.479,529,2.363,530,3.479,531,2.098,533,2.363,534,3.661,537,1.9,676,2.203,697,3.458,722,3.102,809,3.479,850,2.563,851,2.098,852,3.088,853,3.088,854,3.088,855,4.072,856,2.766,857,3.088,858,2.766,859,3.088,860,2.766,861,4.072,862,3.668,863,2.766,864,2.098,865,3.088,866,3.319,867,2.098,868,2.766,869,2.766,870,2.363,871,4.833,872,3.479,873,4.072,874,4.072,875,2.363,876,2.766,877,2.766]],["title/controllers/TransactionsController.html",[67,1.511,878,2.475]],["body/controllers/TransactionsController.html",[12,0.021,21,0.182,22,0.163,23,0.163,26,0.492,27,0.583,43,1.596,44,0.505,62,0.182,63,0.123,64,0.008,65,0.011,66,0.008,67,1.134,69,1.134,71,1.703,73,0.222,74,1.199,80,1.432,82,0.742,84,1.686,85,1.596,86,1.019,87,1.686,88,2.058,97,3.003,98,1.783,99,1.858,100,2.751,102,3.711,107,1.703,108,0.855,111,0.955,112,1.07,113,1.686,114,1.703,116,3.003,117,2.471,118,1.886,175,1.464,203,1.679,227,1.969,233,1.671,235,2.331,261,1.574,293,2.052,296,3.038,301,2.331,303,3.038,307,2.052,309,1.858,310,1.858,311,3.999,312,1.858,313,2.312,314,1.858,315,1.858,316,1.858,319,1.367,321,1.574,322,1.574,325,1.858,326,0.955,327,3.43,328,2.052,329,1.858,330,1.367,331,2.751,334,1.858,335,1.858,337,2.312,338,3.038,339,2.052,340,1.858,341,1.858,343,3.618,345,2.751,346,2.052,349,2.052,456,2.581,484,1.897,697,3.43,722,3.068,852,3.618,853,3.618,854,3.618,857,2.052,859,2.052,862,3.645,864,2.052,865,3.038,870,2.312,878,2.751,879,2.312,880,4.076,881,4.076,882,2.706,883,2.312,884,2.706,885,2.312,886,2.706,887,2.706,888,2.312,889,2.706,890,2.776,891,2.312,892,2.706,893,2.706,894,2.706,895,2.706,896,2.706,897,2.706,898,2.706,899,2.706]],["title/modules/TransactionsModule.html",[0,1.204,16,2.269]],["body/modules/TransactionsModule.html",[0,2.02,2,1.879,3,1.879,4,2.133,5,2.133,6,1.879,7,3.055,8,2.133,11,3.211,12,0.021,13,3.668,15,3.426,16,4.543,18,2.757,19,2.133,20,1.999,21,0.284,22,0.254,23,0.254,25,3.175,26,0.521,27,0.909,28,2.456,30,1.669,31,2.657,33,3.201,34,2.899,62,0.284,63,0.193,64,0.012,65,0.016,66,0.012,69,2.287,850,2.657,878,4.152,890,3.944,891,3.606,900,3.606,901,4.221,902,3.606,903,4.221,904,4.221,905,3.606,906,4.221]],["title/injectables/TransactionsService.html",[190,1.346,890,2.097]],["body/injectables/TransactionsService.html",[12,0.022,21,0.143,22,0.127,23,0.127,26,0.464,27,0.457,30,0.838,42,2.233,43,1.432,44,0.481,62,0.143,63,0.097,64,0.013,65,0.01,66,0.006,73,0.174,74,0.996,82,0.738,84,1.604,85,1.519,86,0.97,87,1.512,88,1.93,98,2.385,111,1.892,112,2.118,113,1.604,127,2.069,128,2.608,131,2.284,133,2.069,134,2.538,144,0.716,190,1.242,191,1.147,194,1.8,202,1.394,203,1.582,210,0.889,211,1.004,213,1.234,222,1.335,226,2.246,227,2.078,233,1.653,236,1.948,248,1.936,301,1.234,317,2.831,319,1.072,321,1.234,322,1.234,323,1.315,326,0.749,330,1.072,365,2.654,377,1.147,378,1.608,383,2.523,384,2.523,385,2.523,386,2.523,388,2.284,389,1.641,390,2.515,391,2.523,392,2.523,393,2.523,394,2.523,395,2.523,396,2.523,402,3.192,403,2.284,407,1.608,408,1.456,409,3.525,412,1.8,427,0.792,428,1.608,430,1.608,432,3.113,433,2.074,435,1.812,437,1.8,456,1.147,484,1.944,539,1.608,544,1.608,676,2.515,697,2.938,722,2.705,850,3.373,852,2.523,853,2.523,854,2.523,857,2.523,859,2.523,862,3.375,864,1.608,865,2.523,875,2.842,880,2.842,881,2.842,883,2.842,885,2.842,888,2.842,890,1.936,905,1.812,907,1.812,908,2.121,909,3.327,910,2.121,911,2.121,912,2.121,913,2.121,914,2.121,915,1.812,916,2.121,917,2.121,918,2.121,919,3.327,920,2.121,921,2.121,922,2.121,923,2.121,924,2.121,925,2.121,926,3.327,927,2.121,928,2.121,929,2.121,930,4.105,931,2.121,932,2.121,933,2.121,934,2.121,935,2.121,936,2.121,937,3.327,938,2.121]],["title/classes/UpdateCategoryDto.html",[63,0.165,306,2.097]],["body/classes/UpdateCategoryDto.html",[12,0.021,21,0.267,22,0.239,23,0.239,26,0.466,44,0.599,62,0.267,63,0.268,64,0.011,65,0.015,66,0.011,73,0.326,80,1.589,82,0.823,86,1.25,93,1.436,108,1.258,118,1.573,141,0.957,144,1.13,154,2.486,155,3.179,157,2.152,159,1.667,203,1.696,306,3.054,368,3.933,427,2.194,433,3.157,452,2.47,455,2.462,506,1.667,659,3.017,660,3.399,662,3.304,663,3.304,668,3.076,669,3.698,670,3.076,671,2.315,672,2.504,673,2.315,674,2.732,939,5.548,940,3.978,941,3.978,942,3.978,943,3.017,944,3.978,945,3.978]],["title/classes/UpdateMediaDto.html",[63,0.165,783,2.269]],["body/classes/UpdateMediaDto.html",[12,0.021,21,0.271,22,0.242,23,0.242,26,0.468,44,0.612,62,0.271,63,0.27,64,0.012,65,0.015,66,0.012,73,0.33,80,1.596,82,0.827,86,1.253,93,1.441,108,1.272,118,1.591,141,0.969,144,1.139,154,2.972,155,3.395,157,2.177,159,1.687,389,1.421,427,1.503,452,2.481,453,2.533,455,2.476,506,1.687,668,3.087,670,3.087,671,2.342,672,2.533,673,2.342,679,3.052,680,4.481,684,4.057,685,3.438,686,3.438,690,3.438,691,4.519,692,3.052,693,3.438,694,2.764,695,3.052,696,3.438,783,3.33,943,3.052,946,5.569,947,4.024,948,4.024,949,4.024,950,4.024,951,4.024,952,4.024]],["title/classes/UpdateTransactionDto.html",[63,0.165,862,2.097]],["body/classes/UpdateTransactionDto.html",[12,0.021,21,0.239,22,0.214,23,0.214,26,0.445,44,0.604,62,0.239,63,0.253,64,0.01,65,0.014,66,0.01,73,0.292,80,1.642,82,0.851,86,1.273,93,1.45,108,1.125,118,1.407,141,0.857,144,1.049,154,2.828,155,3.005,157,1.926,159,1.492,203,1.642,427,2.23,433,3.018,452,2.361,455,2.328,493,2.636,506,1.492,662,3.066,663,3.066,668,3.131,669,3.496,670,3.131,671,2.071,672,2.241,673,2.834,674,2.444,675,2.444,676,3.231,699,2.699,700,4.212,701,4.529,705,3.041,707,3.041,711,4.162,712,4.162,713,3.041,714,2.699,715,2.699,716,3.041,717,3.041,862,2.834,943,2.699,953,5.649,954,3.56,955,3.56,956,3.56,957,3.56,958,3.56,959,3.56,960,3.56]],["title/classes/UpdateUserDto.html",[63,0.165,961,2.097]],["body/classes/UpdateUserDto.html",[12,0.021,21,0.302,22,0.27,23,0.27,26,0.464,44,0.587,62,0.302,63,0.284,64,0.013,65,0.016,66,0.013,73,0.369,80,1.445,82,0.749,86,1.185,93,1.484,108,1.422,118,1.778,141,1.082,144,1.223,159,1.884,427,2.121,506,1.884,662,3.576,663,3.576,668,2.95,669,3.921,670,2.95,675,3.901,676,3.074,961,3.306,962,5.321,963,3.841,964,4.277,965,4.277,966,4.496,967,4.496]],["title/classes/User.html",[63,0.165,233,0.821]],["body/classes/User.html",[12,0.021,21,0.159,22,0.142,23,0.142,26,0.449,43,0.672,44,0.619,52,3.388,62,0.159,63,0.166,64,0.007,65,0.01,66,0.007,73,0.195,74,1.086,80,1.732,82,0.903,84,0.71,85,0.672,86,0.429,87,0.71,88,1.147,93,1.444,117,2.523,130,2.226,132,3.025,141,0.571,144,0.781,203,1.53,210,2.684,221,0.994,227,1.471,233,0.826,252,2.871,285,2.563,323,2.439,389,2.293,427,1.842,448,1.614,449,2.773,451,2.773,454,2.773,456,2.383,458,2.773,460,3.502,462,2.773,464,2.773,466,3.963,468,2.491,470,2.491,471,2.751,473,2.491,474,2.751,476,2.773,482,3.53,484,2.518,485,3.764,493,1.962,494,2.773,496,3.884,497,2.11,498,3.025,500,4.216,501,2.773,502,1.628,503,1.798,504,1.798,505,4.133,506,0.994,507,2.026,637,2.751,694,3.388,753,2.026,761,1.798,964,3.025,965,3.025,968,2.026,969,4.405,970,4.405,971,4.405,972,4.405,973,4.405,974,2.751,975,2.371,976,2.371,977,4.543,978,2.371,979,2.371,980,2.371,981,4.934,982,2.371,983,2.371,984,3.627,985,2.371,986,2.371,987,2.371,988,2.371,989,2.371,990,3.627,991,2.371,992,2.371,993,2.371,994,2.371,995,2.371,996,2.371,997,2.371,998,3.627,999,2.371,1000,2.371,1001,2.026,1002,1.798,1003,2.371,1004,2.371,1005,2.371,1006,2.371,1007,2.371,1008,2.371,1009,2.371,1010,2.371,1011,2.371]],["title/classes/UserRepository.html",[63,0.165,1012,2.269]],["body/classes/UserRepository.html",[12,0.022,21,0.199,22,0.178,23,0.178,26,0.454,27,0.638,42,2.311,43,1.656,44,0.494,52,3.78,62,0.199,63,0.135,64,0.008,65,0.012,66,0.008,73,0.243,74,1.281,76,2.939,79,3.642,82,0.725,84,1.648,85,1.561,86,0.997,87,1.648,88,2.031,89,2.939,93,1.31,104,2.033,111,1.774,113,1.648,127,1.905,128,2.551,130,2.782,132,2.033,133,1.905,134,2.027,141,0.713,196,3.163,221,1.241,226,2.693,233,1.533,236,2.307,377,1.602,390,1.602,427,1.106,448,1.905,522,2.033,523,3.451,524,2.49,525,1.864,534,2.939,537,2.033,556,4.293,637,3.811,866,2.939,867,2.246,872,2.53,961,3.541,964,2.033,965,2.033,974,3.245,1001,2.53,1002,2.246,1012,2.694,1013,2.246,1014,4.279,1015,3.245,1016,4.279,1017,6.086,1018,2.961,1019,5.505,1020,2.961,1021,3.245,1022,2.961,1023,4.279,1024,2.961,1025,2.246,1026,2.53,1027,2.961,1028,2.246,1029,2.246,1030,2.961,1031,2.961,1032,2.961,1033,2.961,1034,2.961,1035,2.961,1036,2.961,1037,2.961,1038,2.961,1039,2.961,1040,2.53,1041,2.961,1042,2.961]],["title/controllers/UsersController.html",[67,1.511,1043,2.475]],["body/controllers/UsersController.html",[12,0.021,21,0.245,22,0.219,23,0.219,26,0.496,27,0.784,42,1.984,43,1.593,44,0.504,62,0.245,63,0.166,64,0.01,65,0.014,66,0.01,67,1.527,69,1.527,71,2.293,73,0.299,74,1.481,80,1.429,82,0.741,84,1.683,85,1.593,86,1.018,87,1.683,88,1.906,97,3.115,102,3.538,107,2.293,108,1.152,112,1.44,114,2.293,116,2.293,117,2.074,118,1.44,175,1.97,197,2.84,233,1.668,309,2.501,310,2.501,312,2.501,314,2.501,315,2.501,316,2.501,325,2.501,327,2.879,329,2.501,331,3.398,334,2.501,335,2.501,345,2.501,961,3.783,1015,4.262,1021,2.762,1025,2.762,1028,2.762,1029,2.762,1043,3.398,1044,3.112,1045,3.642,1046,4.948,1047,4.948,1048,3.642,1049,4.948,1050,3.642,1051,3.642,1052,4.948,1053,3.642,1054,3.642,1055,3.642,1056,3.112,1057,3.642,1058,3.642,1059,3.642,1060,3.642,1061,3.642,1062,3.642,1063,3.642]],["title/modules/UsersModule.html",[0,1.204,17,2.097]],["body/modules/UsersModule.html",[0,2.01,2,1.861,3,1.861,4,2.112,5,2.112,6,1.861,7,3.041,8,3.041,11,2.568,12,0.022,13,2.934,15,3.417,17,4.103,18,2.74,19,2.112,20,1.98,21,0.281,22,0.251,23,0.251,25,3.155,26,0.52,27,0.9,28,2.432,30,1.653,31,2.631,33,3.17,34,2.871,62,0.281,63,0.191,64,0.012,65,0.016,66,0.012,69,2.273,170,4.133,197,3.642,1012,2.631,1043,4.133,1056,3.571,1064,3.571,1065,4.18,1066,3.571,1067,3.571,1068,4.18,1069,4.18,1070,3.571,1071,4.18]],["title/injectables/UsersService.html",[190,1.346,197,1.822]],["body/injectables/UsersService.html",[12,0.022,21,0.175,22,0.156,23,0.156,26,0.481,27,0.561,30,1.029,37,2.681,38,1.639,42,2.052,43,1.571,44,0.522,62,0.175,63,0.119,64,0.007,65,0.011,66,0.007,73,0.214,74,1.166,76,2.673,79,3.351,82,0.794,84,1.74,85,1.648,86,1.052,87,1.658,88,2.039,89,2.673,93,1.004,98,2.587,104,1.788,111,2.127,112,2.382,113,1.396,127,1.733,128,2.322,130,1.967,131,1.788,133,1.733,134,2.209,144,0.838,190,1.454,191,1.409,194,2.106,197,1.967,203,1.409,207,2.224,210,1.091,211,1.233,222,1.639,226,1.632,227,1.557,231,2.224,233,1.541,236,1.091,317,3.045,323,1.029,365,2.853,377,1.409,378,1.974,383,1.974,384,1.974,385,1.974,386,1.974,388,1.788,389,1.374,390,2.106,391,1.974,392,1.974,393,1.974,394,1.974,395,1.974,396,1.974,407,1.974,408,1.788,409,3.924,412,1.409,427,0.972,428,1.974,430,1.974,432,1.974,537,1.788,915,2.224,961,3.223,964,2.673,965,2.673,974,2.953,1012,3.659,1015,2.953,1021,2.953,1025,1.974,1026,2.224,1028,1.974,1029,1.974,1040,3.326,1070,2.224,1072,2.224,1073,3.893,1074,3.893,1075,2.604,1076,3.893,1077,3.893,1078,2.604,1079,3.893,1080,2.604,1081,2.604,1082,2.604,1083,3.893,1084,2.604,1085,2.604,1086,2.604,1087,2.604,1088,2.604,1089,2.604,1090,2.604,1091,2.604,1092,4.663,1093,2.604,1094,2.604,1095,2.604,1096,2.604,1097,2.604,1098,2.604,1099,2.604,1100,2.604]],["title/classes/VerificationTokenEntity.html",[63,0.165,177,2.269]],["body/classes/VerificationTokenEntity.html",[12,0.021,21,0.258,22,0.231,23,0.231,26,0.431,44,0.593,62,0.258,63,0.175,64,0.011,65,0.015,66,0.011,73,0.315,80,1.68,82,0.87,85,1.09,93,1.422,96,4.381,117,2.421,141,0.925,144,1.105,177,3.231,202,2.692,203,1.567,221,1.612,233,1.56,252,2.237,253,4.385,326,1.357,437,2.08,448,2.284,449,3.636,451,3.636,454,3.636,458,3.636,460,2.237,462,3.636,464,2.42,466,3.231,476,3.636,482,3.231,487,3.524,488,3.524,493,2.777,494,3.636,496,3.231,497,2.986,498,3.524,501,3.231,1101,3.285,1102,3.845,1103,3.845,1104,3.845,1105,3.845,1106,5.132,1107,5.132,1108,3.845,1109,3.845,1110,5.777,1111,3.845,1112,3.845]],["title/coverage.html",[1113,3.726]],["body/coverage.html",[6,1.372,12,0.021,23,0.185,37,1.372,44,0.277,63,0.327,64,0.009,65,0.013,66,0.009,67,2.486,68,2.117,70,2.634,79,1.668,105,1.794,113,0.923,142,2.634,143,2.634,168,1.94,177,1.94,190,2.304,192,2.634,197,1.558,214,1.94,233,0.702,283,2.117,284,2.634,285,1.794,292,1.794,299,1.794,306,1.794,317,1.558,323,1.219,327,1.794,358,1.94,361,2.634,365,1.46,389,1.088,412,4.002,447,2.634,456,1.668,484,1.46,514,3.341,524,3.263,554,2.338,658,2.634,659,3.341,677,1.94,678,2.634,679,3.341,697,1.794,698,2.634,699,3.341,718,2.634,719,3.341,722,1.794,723,2.634,724,2.117,726,2.634,727,2.634,728,2.634,743,2.634,767,2.117,768,2.634,783,1.94,803,1.94,806,3.341,811,2.634,830,2.634,850,1.94,851,3.898,862,1.794,866,3.025,878,2.117,879,2.634,890,1.794,907,2.634,939,2.634,946,2.634,953,2.634,961,1.794,962,2.634,963,2.634,968,2.634,1012,1.94,1013,3.898,1043,2.117,1044,2.634,1072,2.634,1101,2.634,1113,2.338,1114,2.338,1115,3.083,1116,3.083,1117,4.405,1118,5.932,1119,5.14,1120,5.608,1121,5.608,1122,3.083,1123,3.763,1124,3.083,1125,6.351,1126,6.495,1127,6.169,1128,3.083,1129,3.083,1130,2.634,1131,3.083,1132,2.634,1133,3.083,1134,3.083,1135,4.405,1136,2.634,1137,2.634,1138,2.634,1139,3.083,1140,3.083,1141,3.083]],["title/dependencies.html",[3,1.929,1142,3.013]],["body/dependencies.html",[3,1.965,12,0.022,27,0.951,30,1.746,63,0.256,64,0.013,65,0.016,66,0.013,93,0.951,108,1.396,159,1.851,173,3.349,175,2.389,182,3.032,203,1.123,219,3.772,220,3.772,221,1.851,223,3.772,224,3.772,506,1.851,594,3.772,596,3.772,600,3.772,736,4.798,1002,3.349,1143,4.416,1144,6.176,1145,4.416,1146,4.416,1147,4.416,1148,4.416,1149,5.277,1150,4.416,1151,4.416,1152,4.416,1153,4.416,1154,4.416,1155,4.416,1156,4.416,1157,4.416,1158,4.416,1159,4.416,1160,4.416,1161,4.416,1162,4.416,1163,4.416,1164,4.416,1165,4.416,1166,4.416,1167,4.416,1168,4.416,1169,4.416,1170,4.416,1171,4.416,1172,4.416,1173,4.416,1174,4.416,1175,4.416,1176,4.416,1177,4.416,1178,4.416,1179,4.416,1180,4.416,1181,4.416]],["title/miscellaneous/enumerations.html",[1182,1.523,1183,3.703]],["body/miscellaneous/enumerations.html",[12,0.021,64,0.015,65,0.018,66,0.015,73,0.435,211,3.279,453,3.954,684,4.313,695,4.763,977,5.366,1182,2.677,1183,4.525,1184,5.297,1185,5.297,1186,6.281,1187,5.297,1188,6.281,1189,6.281,1190,5.297]],["title/miscellaneous/functions.html",[1182,1.523,1191,3.703]],["body/miscellaneous/functions.html",[6,3.063,12,0.019,64,0.016,65,0.019,66,0.016,73,0.464,1130,4.837,1182,2.861,1191,4.837,1192,5.662]],["title/index.html",[73,0.247,1193,2.574,1194,2.574]],["body/index.html",[12,0.021,22,0.267,64,0.013,65,0.016,66,0.013,266,5.873,452,1.759,1113,3.375,1114,4.28,1195,5.644,1196,5.644,1197,5.644,1198,6.199,1199,4.45,1200,4.45,1201,5.644,1202,4.45,1203,6.874,1204,4.45,1205,4.45,1206,6.727,1207,4.45,1208,4.45,1209,5.644,1210,4.45,1211,4.45,1212,4.45,1213,4.45,1214,6.199,1215,5.644,1216,4.45,1217,4.45,1218,4.45,1219,4.45,1220,4.45,1221,4.45,1222,4.45,1223,4.45,1224,4.45,1225,4.45,1226,4.45,1227,4.45,1228,3.802,1229,4.822,1230,5.644,1231,4.45,1232,4.45,1233,4.45,1234,4.45,1235,4.45,1236,4.45,1237,4.45,1238,4.45,1239,4.45,1240,3.375]],["title/license.html",[1193,2.574,1194,2.574,1240,2.285]],["body/license.html",[12,0.016,20,2.102,64,0.013,65,0.016,66,0.013,263,3.792,388,3.048,390,2.401,581,4.814,1114,3.366,1149,3.792,1229,3.792,1240,3.366,1241,6.191,1242,4.438,1243,4.438,1244,4.438,1245,5.635,1246,4.438,1247,4.438,1248,4.438,1249,4.438,1250,4.438,1251,4.438,1252,5.635,1253,7.13,1254,4.438,1255,4.438,1256,4.438,1257,6.191,1258,4.438,1259,4.438,1260,4.438,1261,5.635,1262,4.438,1263,4.438,1264,4.438,1265,4.438,1266,4.438,1267,4.438,1268,5.635,1269,4.438,1270,4.438,1271,4.438,1272,4.438,1273,4.438,1274,4.438,1275,5.635,1276,5.635,1277,4.438,1278,4.438,1279,4.438,1280,4.438,1281,4.438,1282,4.438,1283,4.438,1284,4.438,1285,4.438,1286,4.438,1287,4.438,1288,4.438,1289,4.438,1290,4.438,1291,4.438,1292,4.438,1293,4.438,1294,4.438,1295,4.438,1296,4.438,1297,4.438,1298,4.438,1299,4.438,1300,4.438,1301,4.438,1302,4.438,1303,4.438,1304,4.438]],["title/modules.html",[2,2.187]],["body/modules.html",[1,3.561,2,2.308,11,2.456,12,0.018,13,2.805,14,3.017,15,2.62,16,3.264,17,3.017,64,0.015,65,0.018,66,0.015,1228,6.161,1305,7.212,1306,7.212,1307,7.212]],["title/overview.html",[1308,4.198]],["body/overview.html",[0,1.27,1,4.935,2,1.692,3,1.692,4,1.922,5,1.922,6,1.692,7,1.922,8,1.922,9,3.249,10,3.249,11,3.237,12,0.021,13,3.746,14,3.57,15,3.498,16,4.441,17,3.977,18,2.574,19,1.922,20,1.801,37,2.731,64,0.011,65,0.015,66,0.011,69,1.594,105,3.342,141,0.915,166,3.249,167,3.249,168,3.616,191,2.057,197,3.399,317,3.399,352,3.249,354,3.249,355,3.249,365,3.185,481,2.884,545,3.249,546,3.249,724,2.611,798,3.249,799,3.249,800,3.249,890,3.342,900,3.249,902,3.249,1064,3.249,1066,3.249,1067,3.249,1123,3.249,1132,3.249,1138,3.249,1308,3.249,1309,3.803]],["title/miscellaneous/typealiases.html",[1182,1.523,1310,4.334]],["body/miscellaneous/typealiases.html",[12,0.019,44,0.506,64,0.016,65,0.019,66,0.016,73,0.463,554,4.28,555,5.569,599,4.821,1182,2.852,1311,5.643,1312,5.643]],["title/miscellaneous/variables.html",[271,2.976,1182,1.523]],["body/miscellaneous/variables.html",[12,0.021,43,1.285,44,0.62,64,0.013,65,0.016,66,0.013,73,0.372,93,1.487,210,2.938,211,3.32,233,1.032,271,3.112,327,3.322,514,3.437,524,4.126,525,4.131,806,3.437,851,3.437,866,4.506,867,4.33,1013,3.437,1136,3.872,1137,4.878,1182,2.29,1313,4.532,1314,5.709,1315,4.532,1316,4.532,1317,5.709,1318,4.532,1319,4.532,1320,4.532]]],"invertedIndex":[["",{"_index":12,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"classes/AuthCredentialsDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"classes/Category.html":{},"classes/CategoryRepository.html":{},"modules/ConfigModule.html":{},"classes/ConfigService.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateMediaDto.html":{},"classes/CreateTransactionDto.html":{},"classes/GetCategoriesFilterDto.html":{},"classes/GetTransactionsFilterDto.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/Media.html":{},"controllers/MediaController.html":{},"modules/MediaModule.html":{},"classes/MediaRepository.html":{},"injectables/MediaService.html":{},"classes/Transaction.html":{},"classes/TransactionRepository.html":{},"controllers/TransactionsController.html":{},"modules/TransactionsModule.html":{},"injectables/TransactionsService.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateMediaDto.html":{},"classes/UpdateTransactionDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/VerificationTokenEntity.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":412,"title":{},"body":{"injectables/CategoriesService.html":{},"classes/CategoryRepository.html":{},"classes/MediaRepository.html":{},"injectables/MediaService.html":{},"injectables/TransactionsService.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["0.1.12",{"_index":1172,"title":{},"body":{"dependencies.html":{}}}],["0.10.2",{"_index":1154,"title":{},"body":{"dependencies.html":{}}}],["0.2.20",{"_index":1180,"title":{},"body":{"dependencies.html":{}}}],["0.2.3",{"_index":1153,"title":{},"body":{"dependencies.html":{}}}],["0.22.0",{"_index":1165,"title":{},"body":{"dependencies.html":{}}}],["0.4.0",{"_index":1166,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":1126,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":1122,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":1120,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":1119,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":1117,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":1127,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":1121,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":1118,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":1135,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":1309,"title":{},"body":{"overview.html":{}}}],["1.7.4",{"_index":1156,"title":{},"body":{"dependencies.html":{}}}],["1/14",{"_index":1133,"title":{},"body":{"coverage.html":{}}}],["1/15",{"_index":1134,"title":{},"body":{"coverage.html":{}}}],["1/16",{"_index":1124,"title":{},"body":{"coverage.html":{}}}],["1/19",{"_index":1139,"title":{},"body":{"coverage.html":{}}}],["1/7",{"_index":1129,"title":{},"body":{"coverage.html":{}}}],["14",{"_index":1128,"title":{},"body":{"coverage.html":{}}}],["16.1.7",{"_index":1143,"title":{},"body":{"dependencies.html":{}}}],["2.4.3",{"_index":1152,"title":{},"body":{"dependencies.html":{}}}],["2.6.2",{"_index":1174,"title":{},"body":{"dependencies.html":{}}}],["20",{"_index":481,"title":{},"body":{"classes/Category.html":{},"classes/Transaction.html":{},"overview.html":{}}}],["2048",{"_index":755,"title":{},"body":{"classes/Media.html":{}}}],["23503",{"_index":525,"title":{},"body":{"classes/CategoryRepository.html":{},"classes/MediaRepository.html":{},"classes/TransactionRepository.html":{},"classes/UserRepository.html":{},"miscellaneous/variables.html":{}}}],["23505",{"_index":867,"title":{},"body":{"classes/TransactionRepository.html":{},"classes/UserRepository.html":{},"miscellaneous/variables.html":{}}}],["25",{"_index":750,"title":{},"body":{"classes/Media.html":{}}}],["250",{"_index":465,"title":{},"body":{"classes/Category.html":{},"classes/Media.html":{},"classes/Transaction.html":{}}}],["255",{"_index":981,"title":{},"body":{"classes/User.html":{}}}],["3.0.1",{"_index":1158,"title":{},"body":{"dependencies.html":{}}}],["3.1.0",{"_index":1150,"title":{},"body":{"dependencies.html":{}}}],["3.2.4",{"_index":1157,"title":{},"body":{"dependencies.html":{}}}],["3.21.2",{"_index":1164,"title":{},"body":{"dependencies.html":{}}}],["3.3.3",{"_index":1181,"title":{},"body":{"dependencies.html":{}}}],["32",{"_index":253,"title":{},"body":{"injectables/AuthService.html":{},"classes/VerificationTokenEntity.html":{}}}],["4.0.0",{"_index":1167,"title":{},"body":{"dependencies.html":{}}}],["4.1.2",{"_index":1179,"title":{},"body":{"dependencies.html":{}}}],["5",{"_index":1138,"title":{},"body":{"coverage.html":{},"overview.html":{}}}],["5.0.0",{"_index":1162,"title":{},"body":{"dependencies.html":{}}}],["50",{"_index":984,"title":{},"body":{"classes/User.html":{}}}],["6",{"_index":1123,"title":{},"body":{"coverage.html":{},"overview.html":{}}}],["6.1.0",{"_index":1147,"title":{},"body":{"dependencies.html":{}}}],["6.1.1",{"_index":1146,"title":{},"body":{"dependencies.html":{}}}],["6.10.1",{"_index":1144,"title":{},"body":{"dependencies.html":{}}}],["6.2.0",{"_index":1151,"title":{},"body":{"dependencies.html":{}}}],["6.5.3",{"_index":1176,"title":{},"body":{"dependencies.html":{}}}],["60",{"_index":990,"title":{},"body":{"classes/User.html":{}}}],["7",{"_index":1132,"title":{},"body":{"coverage.html":{},"overview.html":{}}}],["7.14.0",{"_index":1169,"title":{},"body":{"dependencies.html":{}}}],["8.2.0",{"_index":1159,"title":{},"body":{"dependencies.html":{}}}],["__dirname",{"_index":57,"title":{},"body":{"modules/AppModule.html":{}}}],["_checkforcyclic",{"_index":362,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["_checkforcyclic(id",{"_index":367,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["_getcategorybyid",{"_index":363,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["_getcategorybyid(id",{"_index":370,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["_hashpassword",{"_index":1014,"title":{},"body":{"classes/UserRepository.html":{}}}],["_hashpassword(password",{"_index":1016,"title":{},"body":{"classes/UserRepository.html":{}}}],["above",{"_index":1274,"title":{},"body":{"license.html":{}}}],["accessors",{"_index":560,"title":{},"body":{"classes/ConfigService.html":{}}}],["accesstoken",{"_index":240,"title":{},"body":{"injectables/AuthService.html":{}}}],["account",{"_index":267,"title":{},"body":{"injectables/AuthService.html":{}}}],["action",{"_index":1298,"title":{},"body":{"license.html":{}}}],["aliases",{"_index":1311,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["already",{"_index":872,"title":{},"body":{"classes/TransactionRepository.html":{},"classes/UserRepository.html":{}}}],["amount",{"_index":700,"title":{},"body":{"classes/CreateTransactionDto.html":{},"classes/Transaction.html":{},"classes/UpdateTransactionDto.html":{}}}],["and/or",{"_index":388,"title":{},"body":{"injectables/CategoriesService.html":{},"injectables/TransactionsService.html":{},"injectables/UsersService.html":{},"license.html":{}}}],["another",{"_index":874,"title":{},"body":{"classes/TransactionRepository.html":{}}}],["api",{"_index":1226,"title":{},"body":{"index.html":{}}}],["apibearerauth",{"_index":331,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/MediaController.html":{},"controllers/TransactionsController.html":{},"controllers/UsersController.html":{}}}],["apikey",{"_index":256,"title":{},"body":{"injectables/AuthService.html":{}}}],["apimodelproperty",{"_index":160,"title":{},"body":{"classes/AuthCredentialsDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateMediaDto.html":{},"classes/CreateTransactionDto.html":{}}}],["apimodelproperty()@isnotempty()@isstring()@isurl()@maxlength(2048",{"_index":688,"title":{},"body":{"classes/CreateMediaDto.html":{}}}],["apimodelproperty()@isnotempty()@isstring()@maxlength(25",{"_index":666,"title":{},"body":{"classes/CreateCategoryDto.html":{},"classes/CreateMediaDto.html":{},"classes/CreateTransactionDto.html":{}}}],["apimodelproperty()@isnotempty()@isstring()@minlength(3)@maxlength(320)@isemail",{"_index":145,"title":{},"body":{"classes/AuthCredentialsDto.html":{}}}],["apimodelproperty()@isnotempty()@isstring()@minlength(8)@maxlength(20)@matches(/((?=.*\\d)|(?=.*\\w+))(?![.\\n])(?=.*[a",{"_index":147,"title":{},"body":{"classes/AuthCredentialsDto.html":{}}}],["apimodelproperty()@transform(undefined)@isnotempty()@isnumber()@notequals(0",{"_index":702,"title":{},"body":{"classes/CreateTransactionDto.html":{}}}],["apimodelpropertyoptional",{"_index":670,"title":{},"body":{"classes/CreateCategoryDto.html":{},"classes/CreateMediaDto.html":{},"classes/CreateTransactionDto.html":{},"classes/GetCategoriesFilterDto.html":{},"classes/GetTransactionsFilterDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateMediaDto.html":{},"classes/UpdateTransactionDto.html":{},"classes/UpdateUserDto.html":{}}}],["apimodelpropertyoptional()@isoptional()@isnotempty",{"_index":720,"title":{},"body":{"classes/GetCategoriesFilterDto.html":{},"classes/GetTransactionsFilterDto.html":{}}}],["apimodelpropertyoptional()@isoptional()@isnotempty()@isstring()@isurl()@maxlength(2048",{"_index":951,"title":{},"body":{"classes/UpdateMediaDto.html":{}}}],["apimodelpropertyoptional()@isoptional()@isnotempty()@isstring()@maxlength(25",{"_index":943,"title":{},"body":{"classes/UpdateCategoryDto.html":{},"classes/UpdateMediaDto.html":{},"classes/UpdateTransactionDto.html":{}}}],["apimodelpropertyoptional()@isoptional()@isnotempty()@isstring()@maxlength(250",{"_index":681,"title":{},"body":{"classes/CreateMediaDto.html":{}}}],["apimodelpropertyoptional()@isoptional()@isnotempty()@isstring()@maxlength(250)@transform(undefined",{"_index":947,"title":{},"body":{"classes/UpdateMediaDto.html":{}}}],["apimodelpropertyoptional()@transform(undefined)@isoptional()@isdatestring()@maxlength(250",{"_index":705,"title":{},"body":{"classes/CreateTransactionDto.html":{},"classes/UpdateTransactionDto.html":{}}}],["apimodelpropertyoptional()@transform(undefined)@isoptional()@isnotempty()@isnumber()@notequals(0",{"_index":954,"title":{},"body":{"classes/UpdateTransactionDto.html":{}}}],["apimodelpropertyoptional()@transform(undefined)@isoptional()@isnotempty()@isstring()@maxlength(250",{"_index":707,"title":{},"body":{"classes/CreateTransactionDto.html":{},"classes/UpdateTransactionDto.html":{}}}],["apimodelpropertyoptional()@transform(undefined)@isoptional()@isstring()@maxlength(250",{"_index":660,"title":{},"body":{"classes/CreateCategoryDto.html":{},"classes/UpdateCategoryDto.html":{}}}],["apimodelpropertyoptional({enum",{"_index":685,"title":{},"body":{"classes/CreateMediaDto.html":{},"classes/UpdateMediaDto.html":{}}}],["apimodelpropertyoptional({type",{"_index":662,"title":{},"body":{"classes/CreateCategoryDto.html":{},"classes/CreateTransactionDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateTransactionDto.html":{},"classes/UpdateUserDto.html":{}}}],["apiusetags",{"_index":107,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CategoriesController.html":{},"controllers/MediaController.html":{},"controllers/TransactionsController.html":{},"controllers/UsersController.html":{}}}],["apiusetags('auth",{"_index":109,"title":{},"body":{"controllers/AuthController.html":{}}}],["apiusetags('categories",{"_index":332,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["apiusetags('media",{"_index":788,"title":{},"body":{"controllers/MediaController.html":{}}}],["apiusetags('transactions",{"_index":892,"title":{},"body":{"controllers/TransactionsController.html":{}}}],["apiusetags('users",{"_index":1057,"title":{},"body":{"controllers/UsersController.html":{}}}],["app",{"_index":1201,"title":{},"body":{"index.html":{}}}],["applied",{"_index":582,"title":{},"body":{"classes/ConfigService.html":{}}}],["appmodule",{"_index":1,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["arising",{"_index":1302,"title":{},"body":{"license.html":{}}}],["associated",{"_index":1254,"title":{},"body":{"license.html":{}}}],["async",{"_index":42,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CategoriesService.html":{},"classes/CategoryRepository.html":{},"injectables/JwtStrategy.html":{},"classes/MediaRepository.html":{},"injectables/MediaService.html":{},"classes/TransactionRepository.html":{},"injectables/TransactionsService.html":{},"classes/UserRepository.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["auth",{"_index":72,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth.controller",{"_index":171,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.service",{"_index":106,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["auth/auth.module",{"_index":31,"title":{},"body":{"modules/AppModule.html":{},"modules/CategoriesModule.html":{},"modules/MediaModule.html":{},"modules/TransactionsModule.html":{},"modules/UsersModule.html":{}}}],["auth/dto/auth",{"_index":1026,"title":{},"body":{"classes/UserRepository.html":{},"injectables/UsersService.html":{}}}],["authcontroller",{"_index":68,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authcredentialsdto",{"_index":79,"title":{"classes/AuthCredentialsDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/AuthCredentialsDto.html":{},"injectables/AuthService.html":{},"classes/UserRepository.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["authcrendentialsdto",{"_index":207,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["authguard",{"_index":325,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/MediaController.html":{},"controllers/TransactionsController.html":{},"controllers/UsersController.html":{}}}],["authmodule",{"_index":11,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoriesModule.html":{},"modules/MediaModule.html":{},"modules/TransactionsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":1235,"title":{},"body":{"index.html":{}}}],["authors",{"_index":1291,"title":{},"body":{"license.html":{}}}],["authservice",{"_index":105,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"coverage.html":{},"overview.html":{}}}],["available",{"_index":1217,"title":{},"body":{"index.html":{}}}],["await",{"_index":128,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CategoriesService.html":{},"classes/CategoryRepository.html":{},"injectables/JwtStrategy.html":{},"classes/MediaRepository.html":{},"injectables/MediaService.html":{},"classes/TransactionRepository.html":{},"injectables/TransactionsService.html":{},"classes/UserRepository.html":{},"injectables/UsersService.html":{}}}],["backend",{"_index":1195,"title":{},"body":{"index.html":{}}}],["badrequestexception",{"_index":377,"title":{},"body":{"injectables/CategoriesService.html":{},"classes/CategoryRepository.html":{},"classes/MediaRepository.html":{},"classes/TransactionRepository.html":{},"injectables/TransactionsService.html":{},"classes/UserRepository.html":{},"injectables/UsersService.html":{}}}],["badrequestexception('circular",{"_index":438,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["badrequestexception('invalid",{"_index":403,"title":{},"body":{"injectables/CategoriesService.html":{},"classes/CategoryRepository.html":{},"classes/TransactionRepository.html":{},"injectables/TransactionsService.html":{}}}],["badrequestexception(`category",{"_index":541,"title":{},"body":{"classes/CategoryRepository.html":{}}}],["badrequestexception(`invalid",{"_index":537,"title":{},"body":{"classes/CategoryRepository.html":{},"classes/TransactionRepository.html":{},"classes/UserRepository.html":{},"injectables/UsersService.html":{}}}],["badrequestexception(`media",{"_index":809,"title":{},"body":{"classes/MediaRepository.html":{},"classes/TransactionRepository.html":{}}}],["baseentity",{"_index":449,"title":{},"body":{"classes/Category.html":{},"classes/Media.html":{},"classes/Transaction.html":{},"classes/User.html":{},"classes/VerificationTokenEntity.html":{}}}],["bcrypt",{"_index":1001,"title":{},"body":{"classes/User.html":{},"classes/UserRepository.html":{}}}],["bcrypt.compare(password",{"_index":1010,"title":{},"body":{"classes/User.html":{}}}],["bcrypt.gensalt",{"_index":1032,"title":{},"body":{"classes/UserRepository.html":{}}}],["bcrypt.hash(password",{"_index":1031,"title":{},"body":{"classes/UserRepository.html":{}}}],["bcryptjs",{"_index":1002,"title":{},"body":{"classes/User.html":{},"classes/UserRepository.html":{},"dependencies.html":{}}}],["becauseuserrepository.updateuser",{"_index":1095,"title":{},"body":{"injectables/UsersService.html":{}}}],["belongs",{"_index":391,"title":{},"body":{"injectables/CategoriesService.html":{},"injectables/TransactionsService.html":{},"injectables/UsersService.html":{}}}],["body",{"_index":97,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CategoriesController.html":{},"controllers/MediaController.html":{},"controllers/TransactionsController.html":{},"controllers/UsersController.html":{}}}],["body(new",{"_index":120,"title":{},"body":{"controllers/AuthController.html":{}}}],["boolean",{"_index":637,"title":{},"body":{"classes/ConfigService.html":{},"classes/User.html":{},"classes/UserRepository.html":{}}}],["boolean(this.envconfig.cors_enabled",{"_index":638,"title":{},"body":{"classes/ConfigService.html":{}}}],["boolean(this.envconfig.db_synchronize",{"_index":641,"title":{},"body":{"classes/ConfigService.html":{}}}],["boolean(this.envconfig.email_verification_enabled",{"_index":640,"title":{},"body":{"classes/ConfigService.html":{}}}],["boolean(this.envconfig.rate_limit_enabled",{"_index":639,"title":{},"body":{"classes/ConfigService.html":{}}}],["bootstrap",{"_index":6,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoriesModule.html":{},"modules/ConfigModule.html":{},"modules/MediaModule.html":{},"modules/TransactionsModule.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":1307,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1305,"title":{},"body":{"modules.html":{}}}],["c",{"_index":1242,"title":{},"body":{"license.html":{}}}],["call",{"_index":396,"title":{},"body":{"injectables/CategoriesService.html":{},"injectables/TransactionsService.html":{},"injectables/UsersService.html":{}}}],["calls",{"_index":384,"title":{},"body":{"injectables/CategoriesService.html":{},"injectables/TransactionsService.html":{},"injectables/UsersService.html":{}}}],["cascade",{"_index":488,"title":{},"body":{"classes/Category.html":{},"classes/Media.html":{},"classes/Transaction.html":{},"classes/VerificationTokenEntity.html":{}}}],["catch",{"_index":133,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CategoriesService.html":{},"classes/CategoryRepository.html":{},"classes/ConfigService.html":{},"classes/MediaRepository.html":{},"classes/TransactionRepository.html":{},"injectables/TransactionsService.html":{},"classes/UserRepository.html":{},"injectables/UsersService.html":{}}}],["categories",{"_index":285,"title":{},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"classes/CategoryRepository.html":{},"classes/GetCategoriesFilterDto.html":{},"classes/User.html":{},"coverage.html":{}}}],["categories.controller",{"_index":357,"title":{},"body":{"modules/CategoriesModule.html":{}}}],["categories.service",{"_index":318,"title":{},"body":{"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{}}}],["categories/categories.module",{"_index":33,"title":{},"body":{"modules/AppModule.html":{},"modules/TransactionsModule.html":{},"modules/UsersModule.html":{}}}],["categories/categories.service",{"_index":915,"title":{},"body":{"injectables/TransactionsService.html":{},"injectables/UsersService.html":{}}}],["categories/category.entity",{"_index":761,"title":{},"body":{"classes/Media.html":{},"classes/Transaction.html":{},"classes/User.html":{}}}],["categoriescontroller",{"_index":283,"title":{"controllers/CategoriesController.html":{}},"body":{"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{},"coverage.html":{}}}],["categoriesmodule",{"_index":13,"title":{"modules/CategoriesModule.html":{}},"body":{"modules/AppModule.html":{},"modules/CategoriesModule.html":{},"modules/TransactionsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["categoriesservice",{"_index":317,"title":{"injectables/CategoriesService.html":{}},"body":{"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"injectables/TransactionsService.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["category",{"_index":323,"title":{"classes/Category.html":{}},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"classes/Category.html":{},"classes/CategoryRepository.html":{},"classes/Media.html":{},"classes/Transaction.html":{},"classes/TransactionRepository.html":{},"injectables/TransactionsService.html":{},"classes/User.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["category.childrencategories",{"_index":511,"title":{},"body":{"classes/Category.html":{}}}],["category.dto",{"_index":320,"title":{},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"classes/CategoryRepository.html":{}}}],["category.dto.ts",{"_index":659,"title":{},"body":{"classes/CreateCategoryDto.html":{},"classes/UpdateCategoryDto.html":{},"coverage.html":{}}}],["category.dto.ts:12",{"_index":667,"title":{},"body":{"classes/CreateCategoryDto.html":{}}}],["category.dto.ts:13",{"_index":944,"title":{},"body":{"classes/UpdateCategoryDto.html":{}}}],["category.dto.ts:19",{"_index":661,"title":{},"body":{"classes/CreateCategoryDto.html":{}}}],["category.dto.ts:20",{"_index":940,"title":{},"body":{"classes/UpdateCategoryDto.html":{}}}],["category.dto.ts:25",{"_index":664,"title":{},"body":{"classes/CreateCategoryDto.html":{}}}],["category.dto.ts:26",{"_index":941,"title":{},"body":{"classes/UpdateCategoryDto.html":{}}}],["category.dto.ts:31",{"_index":665,"title":{},"body":{"classes/CreateCategoryDto.html":{}}}],["category.dto.ts:32",{"_index":942,"title":{},"body":{"classes/UpdateCategoryDto.html":{}}}],["category.entity",{"_index":324,"title":{},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"classes/CategoryRepository.html":{}}}],["category.id",{"_index":538,"title":{},"body":{"classes/CategoryRepository.html":{}}}],["category.image",{"_index":766,"title":{},"body":{"classes/Media.html":{}}}],["category.imageid",{"_index":410,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["category.repository",{"_index":359,"title":{},"body":{"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{}}}],["category.save",{"_index":532,"title":{},"body":{"classes/CategoryRepository.html":{}}}],["category.transactions",{"_index":848,"title":{},"body":{"classes/Transaction.html":{}}}],["category.user",{"_index":1009,"title":{},"body":{"classes/User.html":{}}}],["category.userfordefaultcategory",{"_index":1006,"title":{},"body":{"classes/User.html":{}}}],["categoryid",{"_index":676,"title":{},"body":{"classes/CreateCategoryDto.html":{},"classes/CreateTransactionDto.html":{},"classes/Transaction.html":{},"classes/TransactionRepository.html":{},"injectables/TransactionsService.html":{},"classes/UpdateTransactionDto.html":{},"classes/UpdateUserDto.html":{}}}],["categoryrepository",{"_index":358,"title":{"classes/CategoryRepository.html":{}},"body":{"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"classes/CategoryRepository.html":{},"coverage.html":{}}}],["categoryrepository.updatecategory",{"_index":406,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["caught",{"_index":440,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["charge",{"_index":1249,"title":{},"body":{"license.html":{}}}],["check",{"_index":420,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["childrencategories",{"_index":450,"title":{},"body":{"classes/Category.html":{}}}],["claim",{"_index":1294,"title":{},"body":{"license.html":{}}}],["class",{"_index":63,"title":{"classes/AuthCredentialsDto.html":{},"classes/Category.html":{},"classes/CategoryRepository.html":{},"classes/ConfigService.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateMediaDto.html":{},"classes/CreateTransactionDto.html":{},"classes/GetCategoriesFilterDto.html":{},"classes/GetTransactionsFilterDto.html":{},"classes/Media.html":{},"classes/MediaRepository.html":{},"classes/Transaction.html":{},"classes/TransactionRepository.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateMediaDto.html":{},"classes/UpdateTransactionDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"classes/VerificationTokenEntity.html":{}},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"classes/AuthCredentialsDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"classes/Category.html":{},"classes/CategoryRepository.html":{},"modules/ConfigModule.html":{},"classes/ConfigService.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateMediaDto.html":{},"classes/CreateTransactionDto.html":{},"classes/GetCategoriesFilterDto.html":{},"classes/GetTransactionsFilterDto.html":{},"injectables/JwtStrategy.html":{},"classes/Media.html":{},"controllers/MediaController.html":{},"modules/MediaModule.html":{},"classes/MediaRepository.html":{},"injectables/MediaService.html":{},"classes/Transaction.html":{},"classes/TransactionRepository.html":{},"controllers/TransactionsController.html":{},"modules/TransactionsModule.html":{},"injectables/TransactionsService.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateMediaDto.html":{},"classes/UpdateTransactionDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/VerificationTokenEntity.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":141,"title":{},"body":{"classes/AuthCredentialsDto.html":{},"classes/Category.html":{},"classes/CategoryRepository.html":{},"classes/ConfigService.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateMediaDto.html":{},"classes/CreateTransactionDto.html":{},"classes/GetCategoriesFilterDto.html":{},"classes/GetTransactionsFilterDto.html":{},"classes/Media.html":{},"classes/MediaRepository.html":{},"classes/Transaction.html":{},"classes/TransactionRepository.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateMediaDto.html":{},"classes/UpdateTransactionDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"classes/VerificationTokenEntity.html":{},"overview.html":{}}}],["classserializerinterceptor",{"_index":309,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/MediaController.html":{},"controllers/TransactionsController.html":{},"controllers/UsersController.html":{}}}],["cluster_appmodule",{"_index":9,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":10,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":166,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":167,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_categoriesmodule",{"_index":352,"title":{},"body":{"modules/CategoriesModule.html":{},"overview.html":{}}}],["cluster_categoriesmodule_exports",{"_index":354,"title":{},"body":{"modules/CategoriesModule.html":{},"overview.html":{}}}],["cluster_categoriesmodule_imports",{"_index":353,"title":{},"body":{"modules/CategoriesModule.html":{}}}],["cluster_categoriesmodule_providers",{"_index":355,"title":{},"body":{"modules/CategoriesModule.html":{},"overview.html":{}}}],["cluster_configmodule",{"_index":545,"title":{},"body":{"modules/ConfigModule.html":{},"overview.html":{}}}],["cluster_configmodule_exports",{"_index":546,"title":{},"body":{"modules/ConfigModule.html":{},"overview.html":{}}}],["cluster_mediamodule",{"_index":798,"title":{},"body":{"modules/MediaModule.html":{},"overview.html":{}}}],["cluster_mediamodule_exports",{"_index":799,"title":{},"body":{"modules/MediaModule.html":{},"overview.html":{}}}],["cluster_mediamodule_providers",{"_index":800,"title":{},"body":{"modules/MediaModule.html":{},"overview.html":{}}}],["cluster_transactionsmodule",{"_index":900,"title":{},"body":{"modules/TransactionsModule.html":{},"overview.html":{}}}],["cluster_transactionsmodule_imports",{"_index":901,"title":{},"body":{"modules/TransactionsModule.html":{}}}],["cluster_transactionsmodule_providers",{"_index":902,"title":{},"body":{"modules/TransactionsModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":1064,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":1066,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_imports",{"_index":1065,"title":{},"body":{"modules/UsersModule.html":{}}}],["cluster_usersmodule_providers",{"_index":1067,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["collections",{"_index":1225,"title":{},"body":{"index.html":{}}}],["column",{"_index":496,"title":{},"body":{"classes/Category.html":{},"classes/Media.html":{},"classes/Transaction.html":{},"classes/User.html":{},"classes/VerificationTokenEntity.html":{}}}],["column('decimal",{"_index":846,"title":{},"body":{"classes/Transaction.html":{}}}],["column({length",{"_index":464,"title":{},"body":{"classes/Category.html":{},"classes/Media.html":{},"classes/Transaction.html":{},"classes/User.html":{},"classes/VerificationTokenEntity.html":{}}}],["column({nullable",{"_index":474,"title":{},"body":{"classes/Category.html":{},"classes/Transaction.html":{},"classes/User.html":{}}}],["column({type",{"_index":753,"title":{},"body":{"classes/Media.html":{},"classes/User.html":{}}}],["compodoc",{"_index":1221,"title":{},"body":{"index.html":{}}}],["compression",{"_index":1155,"title":{},"body":{"dependencies.html":{}}}],["conditions",{"_index":1273,"title":{},"body":{"license.html":{}}}],["config",{"_index":600,"title":{},"body":{"classes/ConfigService.html":{},"dependencies.html":{}}}],["config.service",{"_index":549,"title":{},"body":{"modules/ConfigModule.html":{}}}],["config/config.module",{"_index":36,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["config/config.service",{"_index":38,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"injectables/UsersService.html":{}}}],["configmodule",{"_index":14,"title":{"modules/ConfigModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/ConfigModule.html":{},"modules.html":{},"overview.html":{}}}],["configservice",{"_index":37,"title":{"classes/ConfigService.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/ConfigModule.html":{},"classes/ConfigService.html":{},"injectables/JwtStrategy.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["configservice(`${process.env.node_env",{"_index":552,"title":{},"body":{"modules/ConfigModule.html":{}}}],["configservice.get('db_database_name",{"_index":55,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('db_host",{"_index":47,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('db_password",{"_index":53,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('db_port",{"_index":49,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('db_type",{"_index":45,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('db_username",{"_index":51,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.get('jwt_expires_in",{"_index":189,"title":{},"body":{"modules/AuthModule.html":{}}}],["configservice.get('jwt_secret",{"_index":186,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["configservice.isdbsynchronized",{"_index":60,"title":{},"body":{"modules/AppModule.html":{}}}],["configservice.mergevariables(filepath",{"_index":601,"title":{},"body":{"classes/ConfigService.html":{}}}],["configservice.readenvvars",{"_index":645,"title":{},"body":{"classes/ConfigService.html":{}}}],["configservice.validateinput(config",{"_index":603,"title":{},"body":{"classes/ConfigService.html":{}}}],["conflictexception",{"_index":1027,"title":{},"body":{"classes/UserRepository.html":{}}}],["conflictexception('email",{"_index":1036,"title":{},"body":{"classes/UserRepository.html":{}}}],["connection",{"_index":1303,"title":{},"body":{"license.html":{}}}],["const",{"_index":226,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CategoriesService.html":{},"classes/CategoryRepository.html":{},"classes/ConfigService.html":{},"injectables/JwtStrategy.html":{},"classes/MediaRepository.html":{},"injectables/MediaService.html":{},"classes/TransactionRepository.html":{},"injectables/TransactionsService.html":{},"classes/UserRepository.html":{},"injectables/UsersService.html":{}}}],["constructor",{"_index":194,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CategoriesService.html":{},"classes/ConfigService.html":{},"injectables/JwtStrategy.html":{},"injectables/MediaService.html":{},"injectables/TransactionsService.html":{},"injectables/UsersService.html":{}}}],["constructor(categoryrepository",{"_index":364,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["constructor(filepath",{"_index":566,"title":{},"body":{"classes/ConfigService.html":{}}}],["constructor(mediarepository",{"_index":812,"title":{},"body":{"injectables/MediaService.html":{}}}],["constructor(private",{"_index":114,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CategoriesController.html":{},"controllers/MediaController.html":{},"controllers/TransactionsController.html":{},"controllers/UsersController.html":{}}}],["constructor(transactionrepository",{"_index":908,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["constructor(userrepository",{"_index":1075,"title":{},"body":{"injectables/UsersService.html":{}}}],["constructor(usersservice",{"_index":729,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["constructor(verificationtokenrepository",{"_index":195,"title":{},"body":{"injectables/AuthService.html":{}}}],["contract",{"_index":1299,"title":{},"body":{"license.html":{}}}],["controller",{"_index":67,"title":{"controllers/AuthController.html":{},"controllers/CategoriesController.html":{},"controllers/MediaController.html":{},"controllers/TransactionsController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AuthController.html":{},"controllers/CategoriesController.html":{},"controllers/MediaController.html":{},"controllers/TransactionsController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":110,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('categories",{"_index":333,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["controller('media",{"_index":789,"title":{},"body":{"controllers/MediaController.html":{}}}],["controller('transactions",{"_index":893,"title":{},"body":{"controllers/TransactionsController.html":{}}}],["controller('users",{"_index":1058,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllers",{"_index":69,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{},"controllers/MediaController.html":{},"modules/MediaModule.html":{},"controllers/TransactionsController.html":{},"modules/TransactionsModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["copies",{"_index":1268,"title":{},"body":{"license.html":{}}}],["copy",{"_index":1252,"title":{},"body":{"license.html":{}}}],["copyright",{"_index":1241,"title":{},"body":{"license.html":{}}}],["cors_enabled",{"_index":604,"title":{},"body":{"classes/ConfigService.html":{}}}],["coverage",{"_index":1113,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":533,"title":{},"body":{"classes/CategoryRepository.html":{},"classes/TransactionRepository.html":{}}}],["createcategory",{"_index":286,"title":{},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"classes/CategoryRepository.html":{}}}],["createcategory(createcategorydto",{"_index":291,"title":{},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"classes/CategoryRepository.html":{}}}],["createcategorydto",{"_index":292,"title":{"classes/CreateCategoryDto.html":{}},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"classes/CategoryRepository.html":{},"classes/CreateCategoryDto.html":{},"coverage.html":{}}}],["createcategorydto.imageid",{"_index":397,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["createcategorydto.parentcategoryid",{"_index":399,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["createdatecolumn",{"_index":462,"title":{},"body":{"classes/Category.html":{},"classes/Media.html":{},"classes/Transaction.html":{},"classes/User.html":{},"classes/VerificationTokenEntity.html":{}}}],["createmedia",{"_index":769,"title":{},"body":{"controllers/MediaController.html":{},"injectables/MediaService.html":{}}}],["createmedia(createmediadto",{"_index":774,"title":{},"body":{"controllers/MediaController.html":{},"injectables/MediaService.html":{}}}],["createmediadto",{"_index":677,"title":{"classes/CreateMediaDto.html":{}},"body":{"classes/CreateMediaDto.html":{},"controllers/MediaController.html":{},"injectables/MediaService.html":{},"coverage.html":{}}}],["createparamdecorator((data",{"_index":1318,"title":{},"body":{"miscellaneous/variables.html":{}}}],["createtransaction",{"_index":852,"title":{},"body":{"classes/TransactionRepository.html":{},"controllers/TransactionsController.html":{},"injectables/TransactionsService.html":{}}}],["createtransaction(createtransactiondto",{"_index":857,"title":{},"body":{"classes/TransactionRepository.html":{},"controllers/TransactionsController.html":{},"injectables/TransactionsService.html":{}}}],["createtransactiondto",{"_index":697,"title":{"classes/CreateTransactionDto.html":{}},"body":{"classes/CreateTransactionDto.html":{},"classes/TransactionRepository.html":{},"controllers/TransactionsController.html":{},"injectables/TransactionsService.html":{},"coverage.html":{}}}],["createtransactiondto.categoryid",{"_index":922,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["createtransactiondto.imageid",{"_index":920,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["creating",{"_index":346,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/MediaController.html":{},"controllers/TransactionsController.html":{}}}],["creationdate",{"_index":451,"title":{},"body":{"classes/Category.html":{},"classes/Media.html":{},"classes/Transaction.html":{},"classes/User.html":{},"classes/VerificationTokenEntity.html":{}}}],["credentials",{"_index":123,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["credentials.dto",{"_index":104,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/UserRepository.html":{},"injectables/UsersService.html":{}}}],["credentials.dto.ts",{"_index":143,"title":{},"body":{"classes/AuthCredentialsDto.html":{},"coverage.html":{}}}],["credentials.dto.ts:12",{"_index":146,"title":{},"body":{"classes/AuthCredentialsDto.html":{}}}],["credentials.dto.ts:20",{"_index":152,"title":{},"body":{"classes/AuthCredentialsDto.html":{}}}],["crypto",{"_index":219,"title":{},"body":{"injectables/AuthService.html":{},"dependencies.html":{}}}],["cryptorandomstring",{"_index":218,"title":{},"body":{"injectables/AuthService.html":{}}}],["currency",{"_index":969,"title":{},"body":{"classes/User.html":{}}}],["currency.enum",{"_index":1003,"title":{},"body":{"classes/User.html":{}}}],["currencyenum",{"_index":977,"title":{},"body":{"classes/User.html":{},"miscellaneous/enumerations.html":{}}}],["currencyenum.euro",{"_index":1005,"title":{},"body":{"classes/User.html":{}}}],["current",{"_index":423,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["damages",{"_index":1295,"title":{},"body":{"license.html":{}}}],["data",{"_index":261,"title":{},"body":{"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"classes/CategoryRepository.html":{},"controllers/MediaController.html":{},"classes/TransactionRepository.html":{},"controllers/TransactionsController.html":{}}}],["database",{"_index":54,"title":{},"body":{"modules/AppModule.html":{}}}],["date",{"_index":701,"title":{},"body":{"classes/CreateTransactionDto.html":{},"classes/Transaction.html":{},"classes/UpdateTransactionDto.html":{}}}],["db",{"_index":395,"title":{},"body":{"injectables/CategoriesService.html":{},"injectables/TransactionsService.html":{},"injectables/UsersService.html":{}}}],["db_database_name",{"_index":626,"title":{},"body":{"classes/ConfigService.html":{}}}],["db_host",{"_index":621,"title":{},"body":{"classes/ConfigService.html":{}}}],["db_password",{"_index":624,"title":{},"body":{"classes/ConfigService.html":{}}}],["db_port",{"_index":619,"title":{},"body":{"classes/ConfigService.html":{}}}],["db_synchronize",{"_index":625,"title":{},"body":{"classes/ConfigService.html":{}}}],["db_type",{"_index":617,"title":{},"body":{"classes/ConfigService.html":{}}}],["db_username",{"_index":623,"title":{},"body":{"classes/ConfigService.html":{}}}],["deal",{"_index":1256,"title":{},"body":{"license.html":{}}}],["dealings",{"_index":1304,"title":{},"body":{"license.html":{}}}],["declarations",{"_index":5,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoriesModule.html":{},"modules/ConfigModule.html":{},"modules/MediaModule.html":{},"modules/TransactionsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["decorators",{"_index":80,"title":{},"body":{"controllers/AuthController.html":{},"classes/AuthCredentialsDto.html":{},"controllers/CategoriesController.html":{},"classes/Category.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateMediaDto.html":{},"classes/CreateTransactionDto.html":{},"classes/GetCategoriesFilterDto.html":{},"classes/GetTransactionsFilterDto.html":{},"classes/Media.html":{},"controllers/MediaController.html":{},"classes/Transaction.html":{},"controllers/TransactionsController.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateMediaDto.html":{},"classes/UpdateTransactionDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"classes/VerificationTokenEntity.html":{}}}],["default",{"_index":210,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CategoriesService.html":{},"classes/Category.html":{},"classes/CategoryRepository.html":{},"classes/ConfigService.html":{},"classes/Media.html":{},"classes/TransactionRepository.html":{},"injectables/TransactionsService.html":{},"classes/User.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["defaultcategory",{"_index":970,"title":{},"body":{"classes/User.html":{}}}],["defaultcategoryid",{"_index":964,"title":{},"body":{"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"injectables/UsersService.html":{}}}],["defaultstrategy",{"_index":181,"title":{},"body":{"modules/AuthModule.html":{}}}],["defined",{"_index":82,"title":{},"body":{"controllers/AuthController.html":{},"classes/AuthCredentialsDto.html":{},"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"classes/Category.html":{},"classes/CategoryRepository.html":{},"classes/ConfigService.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateMediaDto.html":{},"classes/CreateTransactionDto.html":{},"classes/GetCategoriesFilterDto.html":{},"classes/GetTransactionsFilterDto.html":{},"injectables/JwtStrategy.html":{},"classes/Media.html":{},"controllers/MediaController.html":{},"classes/MediaRepository.html":{},"injectables/MediaService.html":{},"classes/Transaction.html":{},"classes/TransactionRepository.html":{},"controllers/TransactionsController.html":{},"injectables/TransactionsService.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateMediaDto.html":{},"classes/UpdateTransactionDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/VerificationTokenEntity.html":{}}}],["delete",{"_index":310,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/MediaController.html":{},"controllers/TransactionsController.html":{},"controllers/UsersController.html":{}}}],["delete('/:id",{"_index":296,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/MediaController.html":{},"controllers/TransactionsController.html":{}}}],["delete('/current",{"_index":1049,"title":{},"body":{"controllers/UsersController.html":{}}}],["deletecategory",{"_index":287,"title":{},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"classes/CategoryRepository.html":{}}}],["deletecategory(id",{"_index":295,"title":{},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"classes/CategoryRepository.html":{}}}],["deletecurrent",{"_index":1046,"title":{},"body":{"controllers/UsersController.html":{}}}],["deletecurrent(@getuser",{"_index":1062,"title":{},"body":{"controllers/UsersController.html":{}}}],["deletecurrent(user",{"_index":1048,"title":{},"body":{"controllers/UsersController.html":{}}}],["deleted",{"_index":432,"title":{},"body":{"injectables/CategoriesService.html":{},"injectables/TransactionsService.html":{},"injectables/UsersService.html":{}}}],["deletemedia",{"_index":770,"title":{},"body":{"controllers/MediaController.html":{},"classes/MediaRepository.html":{},"injectables/MediaService.html":{}}}],["deletemedia(id",{"_index":776,"title":{},"body":{"controllers/MediaController.html":{},"classes/MediaRepository.html":{},"injectables/MediaService.html":{}}}],["deletetransaction",{"_index":880,"title":{},"body":{"controllers/TransactionsController.html":{},"injectables/TransactionsService.html":{}}}],["deletetransaction(id",{"_index":883,"title":{},"body":{"controllers/TransactionsController.html":{},"injectables/TransactionsService.html":{}}}],["deleteuser",{"_index":1073,"title":{},"body":{"injectables/UsersService.html":{}}}],["deleteuser(id",{"_index":1077,"title":{},"body":{"injectables/UsersService.html":{}}}],["denis",{"_index":1236,"title":{},"body":{"index.html":{}}}],["dependencies",{"_index":3,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoriesModule.html":{},"modules/ConfigModule.html":{},"modules/MediaModule.html":{},"modules/TransactionsModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":452,"title":{},"body":{"classes/Category.html":{},"classes/CategoryRepository.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateMediaDto.html":{},"classes/CreateTransactionDto.html":{},"classes/Media.html":{},"classes/Transaction.html":{},"classes/TransactionRepository.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateMediaDto.html":{},"classes/UpdateTransactionDto.html":{},"index.html":{}}}],["development",{"_index":1205,"title":{},"body":{"index.html":{}}}],["development'}.env",{"_index":553,"title":{},"body":{"modules/ConfigModule.html":{}}}],["distribute",{"_index":1265,"title":{},"body":{"license.html":{}}}],["documentation",{"_index":1114,"title":{},"body":{"coverage.html":{},"index.html":{},"license.html":{}}}],["dollar",{"_index":1189,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["domain",{"_index":258,"title":{},"body":{"injectables/AuthService.html":{}}}],["done",{"_index":385,"title":{},"body":{"injectables/CategoriesService.html":{},"injectables/TransactionsService.html":{},"injectables/UsersService.html":{}}}],["dotenv",{"_index":594,"title":{},"body":{"classes/ConfigService.html":{},"dependencies.html":{}}}],["dotenv.parse(fs.readfilesync(filepath",{"_index":643,"title":{},"body":{"classes/ConfigService.html":{}}}],["dto/auth",{"_index":103,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["dto/create",{"_index":319,"title":{},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"classes/CategoryRepository.html":{},"controllers/MediaController.html":{},"injectables/MediaService.html":{},"classes/TransactionRepository.html":{},"controllers/TransactionsController.html":{},"injectables/TransactionsService.html":{}}}],["dto/get",{"_index":321,"title":{},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"classes/CategoryRepository.html":{},"classes/TransactionRepository.html":{},"controllers/TransactionsController.html":{},"injectables/TransactionsService.html":{}}}],["dto/update",{"_index":330,"title":{},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"classes/CategoryRepository.html":{},"controllers/MediaController.html":{},"injectables/MediaService.html":{},"classes/TransactionRepository.html":{},"controllers/TransactionsController.html":{},"injectables/TransactionsService.html":{}}}],["e",{"_index":134,"title":{},"body":{"controllers/AuthController.html":{},"injectables/CategoriesService.html":{},"classes/CategoryRepository.html":{},"classes/ConfigService.html":{},"classes/MediaRepository.html":{},"classes/TransactionRepository.html":{},"injectables/TransactionsService.html":{},"classes/UserRepository.html":{},"injectables/UsersService.html":{}}}],["e.code",{"_index":534,"title":{},"body":{"classes/CategoryRepository.html":{},"classes/MediaRepository.html":{},"classes/TransactionRepository.html":{},"classes/UserRepository.html":{}}}],["e.stack",{"_index":137,"title":{},"body":{"controllers/AuthController.html":{},"classes/CategoryRepository.html":{},"classes/TransactionRepository.html":{}}}],["eager",{"_index":1106,"title":{},"body":{"classes/VerificationTokenEntity.html":{}}}],["email",{"_index":130,"title":{},"body":{"controllers/AuthController.html":{},"classes/AuthCredentialsDto.html":{},"injectables/AuthService.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"injectables/UsersService.html":{}}}],["email_confirm",{"_index":269,"title":{},"body":{"injectables/AuthService.html":{}}}],["email_verification_domain",{"_index":633,"title":{},"body":{"classes/ConfigService.html":{}}}],["email_verification_enabled",{"_index":630,"title":{},"body":{"classes/ConfigService.html":{}}}],["email_verification_from",{"_index":634,"title":{},"body":{"classes/ConfigService.html":{}}}],["email_verification_host",{"_index":635,"title":{},"body":{"classes/ConfigService.html":{}}}],["email_verification_hostname",{"_index":636,"title":{},"body":{"classes/ConfigService.html":{}}}],["ensure",{"_index":386,"title":{},"body":{"injectables/CategoriesService.html":{},"injectables/TransactionsService.html":{},"injectables/UsersService.html":{}}}],["ensures",{"_index":577,"title":{},"body":{"classes/ConfigService.html":{}}}],["entities",{"_index":56,"title":{},"body":{"modules/AppModule.html":{}}}],["entity",{"_index":497,"title":{},"body":{"classes/Category.html":{},"classes/Media.html":{},"classes/Transaction.html":{},"classes/TransactionRepository.html":{},"classes/User.html":{},"classes/VerificationTokenEntity.html":{}}}],["entity.{js,ts",{"_index":58,"title":{},"body":{"modules/AppModule.html":{}}}],["entityrepository",{"_index":522,"title":{},"body":{"classes/CategoryRepository.html":{},"classes/MediaRepository.html":{},"classes/TransactionRepository.html":{},"classes/UserRepository.html":{}}}],["entityrepository(category",{"_index":526,"title":{},"body":{"classes/CategoryRepository.html":{}}}],["entityrepository(media",{"_index":808,"title":{},"body":{"classes/MediaRepository.html":{}}}],["entityrepository(transaction",{"_index":868,"title":{},"body":{"classes/TransactionRepository.html":{}}}],["entityrepository(user",{"_index":1030,"title":{},"body":{"classes/UserRepository.html":{}}}],["enum",{"_index":694,"title":{},"body":{"classes/CreateMediaDto.html":{},"classes/Media.html":{},"classes/UpdateMediaDto.html":{},"classes/User.html":{}}}],["enumerations",{"_index":1183,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["envconfig",{"_index":555,"title":{},"body":{"classes/ConfigService.html":{},"miscellaneous/typealiases.html":{}}}],["envfilevars",{"_index":642,"title":{},"body":{"classes/ConfigService.html":{}}}],["envvars",{"_index":644,"title":{},"body":{"classes/ConfigService.html":{}}}],["envvars[key",{"_index":648,"title":{},"body":{"classes/ConfigService.html":{}}}],["envvarsschema",{"_index":649,"title":{},"body":{"classes/ConfigService.html":{}}}],["envvarsschema.validate",{"_index":653,"title":{},"body":{"classes/ConfigService.html":{}}}],["err",{"_index":279,"title":{},"body":{"injectables/AuthService.html":{}}}],["error",{"_index":138,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/ConfigService.html":{}}}],["error(`config",{"_index":654,"title":{},"body":{"classes/ConfigService.html":{}}}],["error.message",{"_index":656,"title":{},"body":{"classes/ConfigService.html":{}}}],["euro",{"_index":1188,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["event",{"_index":1290,"title":{},"body":{"license.html":{}}}],["exceptionfactory",{"_index":121,"title":{},"body":{"controllers/AuthController.html":{}}}],["exclude",{"_index":505,"title":{},"body":{"classes/Category.html":{},"classes/Media.html":{},"classes/Transaction.html":{},"classes/User.html":{}}}],["exclude()@column({default",{"_index":995,"title":{},"body":{"classes/User.html":{}}}],["exclude()@column({length",{"_index":989,"title":{},"body":{"classes/User.html":{}}}],["exclude()@column({nullable",{"_index":491,"title":{},"body":{"classes/Category.html":{},"classes/Media.html":{},"classes/Transaction.html":{}}}],["exclude()@manytoone(undefined",{"_index":478,"title":{},"body":{"classes/Category.html":{},"classes/Media.html":{},"classes/Transaction.html":{}}}],["exclude()@onetomany(undefined",{"_index":485,"title":{},"body":{"classes/Category.html":{},"classes/User.html":{}}}],["exclude()@onetoone(undefined",{"_index":470,"title":{},"body":{"classes/Category.html":{},"classes/Media.html":{},"classes/Transaction.html":{},"classes/User.html":{}}}],["exists",{"_index":1037,"title":{},"body":{"classes/UserRepository.html":{}}}],["expense",{"_index":1199,"title":{},"body":{"index.html":{}}}],["expiresin",{"_index":188,"title":{},"body":{"modules/AuthModule.html":{}}}],["export",{"_index":62,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"classes/AuthCredentialsDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"classes/Category.html":{},"classes/CategoryRepository.html":{},"modules/ConfigModule.html":{},"classes/ConfigService.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateMediaDto.html":{},"classes/CreateTransactionDto.html":{},"classes/GetCategoriesFilterDto.html":{},"classes/GetTransactionsFilterDto.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/Media.html":{},"controllers/MediaController.html":{},"modules/MediaModule.html":{},"classes/MediaRepository.html":{},"injectables/MediaService.html":{},"classes/Transaction.html":{},"classes/TransactionRepository.html":{},"controllers/TransactionsController.html":{},"modules/TransactionsModule.html":{},"injectables/TransactionsService.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateMediaDto.html":{},"classes/UpdateTransactionDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/VerificationTokenEntity.html":{}}}],["exports",{"_index":8,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoriesModule.html":{},"modules/ConfigModule.html":{},"modules/MediaModule.html":{},"modules/TransactionsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["express",{"_index":1149,"title":{},"body":{"dependencies.html":{},"license.html":{}}}],["extends",{"_index":448,"title":{},"body":{"classes/Category.html":{},"classes/CategoryRepository.html":{},"injectables/JwtStrategy.html":{},"classes/Media.html":{},"classes/MediaRepository.html":{},"classes/Transaction.html":{},"classes/TransactionRepository.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"classes/VerificationTokenEntity.html":{}}}],["extractjwt",{"_index":734,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":740,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["false",{"_index":482,"title":{},"body":{"classes/Category.html":{},"classes/Media.html":{},"classes/Transaction.html":{},"classes/User.html":{},"classes/VerificationTokenEntity.html":{}}}],["fields",{"_index":421,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["file",{"_index":23,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"classes/AuthCredentialsDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"classes/Category.html":{},"classes/CategoryRepository.html":{},"modules/ConfigModule.html":{},"classes/ConfigService.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateMediaDto.html":{},"classes/CreateTransactionDto.html":{},"classes/GetCategoriesFilterDto.html":{},"classes/GetTransactionsFilterDto.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/Media.html":{},"controllers/MediaController.html":{},"modules/MediaModule.html":{},"classes/MediaRepository.html":{},"injectables/MediaService.html":{},"classes/Transaction.html":{},"classes/TransactionRepository.html":{},"controllers/TransactionsController.html":{},"modules/TransactionsModule.html":{},"injectables/TransactionsService.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateMediaDto.html":{},"classes/UpdateTransactionDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/VerificationTokenEntity.html":{},"coverage.html":{}}}],["filepath",{"_index":568,"title":{},"body":{"classes/ConfigService.html":{}}}],["files",{"_index":1255,"title":{},"body":{"license.html":{}}}],["filter.dto",{"_index":322,"title":{},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"classes/CategoryRepository.html":{},"classes/TransactionRepository.html":{},"controllers/TransactionsController.html":{},"injectables/TransactionsService.html":{}}}],["filter.dto.ts",{"_index":719,"title":{},"body":{"classes/GetCategoriesFilterDto.html":{},"classes/GetTransactionsFilterDto.html":{},"coverage.html":{}}}],["filter.dto.ts:9",{"_index":721,"title":{},"body":{"classes/GetCategoriesFilterDto.html":{},"classes/GetTransactionsFilterDto.html":{}}}],["filterdto",{"_index":301,"title":{},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"classes/CategoryRepository.html":{},"classes/TransactionRepository.html":{},"controllers/TransactionsController.html":{},"injectables/TransactionsService.html":{}}}],["filters",{"_index":340,"title":{},"body":{"controllers/CategoriesController.html":{},"classes/CategoryRepository.html":{},"classes/TransactionRepository.html":{},"controllers/TransactionsController.html":{}}}],["findone",{"_index":1074,"title":{},"body":{"injectables/UsersService.html":{}}}],["findone(email",{"_index":1079,"title":{},"body":{"injectables/UsersService.html":{}}}],["fitness",{"_index":1286,"title":{},"body":{"license.html":{}}}],["following",{"_index":1272,"title":{},"body":{"license.html":{}}}],["forwardref",{"_index":170,"title":{},"body":{"modules/AuthModule.html":{},"modules/CategoriesModule.html":{},"modules/MediaModule.html":{},"modules/UsersModule.html":{}}}],["found",{"_index":248,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CategoriesService.html":{},"classes/CategoryRepository.html":{},"classes/MediaRepository.html":{},"injectables/MediaService.html":{},"injectables/TransactionsService.html":{}}}],["free",{"_index":1248,"title":{},"body":{"license.html":{}}}],["fs",{"_index":598,"title":{},"body":{"classes/ConfigService.html":{}}}],["fullname",{"_index":1244,"title":{},"body":{"license.html":{}}}],["function",{"_index":1131,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":1191,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["furnished",{"_index":1271,"title":{},"body":{"license.html":{}}}],["generate",{"_index":1219,"title":{},"body":{"index.html":{}}}],["get('/:id",{"_index":303,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/MediaController.html":{},"controllers/TransactionsController.html":{}}}],["get('/current",{"_index":1052,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('/email/verify/:token",{"_index":94,"title":{},"body":{"controllers/AuthController.html":{}}}],["get(key",{"_index":569,"title":{},"body":{"classes/ConfigService.html":{}}}],["getallmedia",{"_index":771,"title":{},"body":{"controllers/MediaController.html":{},"injectables/MediaService.html":{}}}],["getallmedia(@getuser",{"_index":791,"title":{},"body":{"controllers/MediaController.html":{}}}],["getallmedia(user",{"_index":778,"title":{},"body":{"controllers/MediaController.html":{},"injectables/MediaService.html":{}}}],["getcategories",{"_index":288,"title":{},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"classes/CategoryRepository.html":{}}}],["getcategories(filterdto",{"_index":298,"title":{},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"classes/CategoryRepository.html":{}}}],["getcategoriesfilterdto",{"_index":299,"title":{"classes/GetCategoriesFilterDto.html":{}},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"classes/CategoryRepository.html":{},"classes/GetCategoriesFilterDto.html":{},"coverage.html":{}}}],["getcategorybyid",{"_index":289,"title":{},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{}}}],["getcategorybyid(id",{"_index":302,"title":{},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{}}}],["getcurrent",{"_index":1047,"title":{},"body":{"controllers/UsersController.html":{}}}],["getcurrent(@getuser",{"_index":1059,"title":{},"body":{"controllers/UsersController.html":{}}}],["getcurrent(user",{"_index":1051,"title":{},"body":{"controllers/UsersController.html":{}}}],["getiscorsenabled",{"_index":586,"title":{},"body":{"classes/ConfigService.html":{}}}],["getisdbsynchronized",{"_index":592,"title":{},"body":{"classes/ConfigService.html":{}}}],["getisemailverificationenabled",{"_index":590,"title":{},"body":{"classes/ConfigService.html":{}}}],["getisratelimitenabled",{"_index":588,"title":{},"body":{"classes/ConfigService.html":{}}}],["getmediabyid",{"_index":772,"title":{},"body":{"controllers/MediaController.html":{},"injectables/MediaService.html":{}}}],["getmediabyid(id",{"_index":780,"title":{},"body":{"controllers/MediaController.html":{},"injectables/MediaService.html":{}}}],["getting",{"_index":1193,"title":{"index.html":{},"license.html":{}},"body":{}}],["gettransactionbyid",{"_index":881,"title":{},"body":{"controllers/TransactionsController.html":{},"injectables/TransactionsService.html":{}}}],["gettransactionbyid(id",{"_index":885,"title":{},"body":{"controllers/TransactionsController.html":{},"injectables/TransactionsService.html":{}}}],["gettransactions",{"_index":853,"title":{},"body":{"classes/TransactionRepository.html":{},"controllers/TransactionsController.html":{},"injectables/TransactionsService.html":{}}}],["gettransactions(filterdto",{"_index":859,"title":{},"body":{"classes/TransactionRepository.html":{},"controllers/TransactionsController.html":{},"injectables/TransactionsService.html":{}}}],["gettransactionsfilterdto",{"_index":722,"title":{"classes/GetTransactionsFilterDto.html":{}},"body":{"classes/GetTransactionsFilterDto.html":{},"classes/TransactionRepository.html":{},"controllers/TransactionsController.html":{},"injectables/TransactionsService.html":{},"coverage.html":{}}}],["getuser",{"_index":327,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/MediaController.html":{},"controllers/TransactionsController.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["getvalidation_schema",{"_index":584,"title":{},"body":{"classes/ConfigService.html":{}}}],["global",{"_index":548,"title":{},"body":{"modules/ConfigModule.html":{}}}],["granted",{"_index":1247,"title":{},"body":{"license.html":{}}}],["h:x",{"_index":270,"title":{},"body":{"injectables/AuthService.html":{}}}],["hamann",{"_index":1237,"title":{},"body":{"index.html":{}}}],["hapi/joi",{"_index":596,"title":{},"body":{"classes/ConfigService.html":{},"dependencies.html":{}}}],["helmet",{"_index":1163,"title":{},"body":{"dependencies.html":{}}}],["here",{"_index":1218,"title":{},"body":{"index.html":{}}}],["hereby",{"_index":1246,"title":{},"body":{"license.html":{}}}],["holders",{"_index":1292,"title":{},"body":{"license.html":{}}}],["host",{"_index":46,"title":{},"body":{"modules/AppModule.html":{},"injectables/AuthService.html":{}}}],["hostname",{"_index":273,"title":{},"body":{"injectables/AuthService.html":{}}}],["https').default('http",{"_index":616,"title":{},"body":{"classes/ConfigService.html":{}}}],["https://shargea.com",{"_index":1239,"title":{},"body":{"index.html":{}}}],["id",{"_index":227,"title":{},"body":{"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"classes/Category.html":{},"classes/CategoryRepository.html":{},"classes/Media.html":{},"controllers/MediaController.html":{},"classes/MediaRepository.html":{},"injectables/MediaService.html":{},"classes/Transaction.html":{},"classes/TransactionRepository.html":{},"controllers/TransactionsController.html":{},"injectables/TransactionsService.html":{},"classes/User.html":{},"injectables/UsersService.html":{}}}],["idempotent",{"_index":125,"title":{},"body":{"controllers/AuthController.html":{}}}],["identifier",{"_index":1115,"title":{},"body":{"coverage.html":{}}}],["image",{"_index":453,"title":{},"body":{"classes/Category.html":{},"classes/CreateMediaDto.html":{},"classes/Transaction.html":{},"classes/UpdateMediaDto.html":{},"miscellaneous/enumerations.html":{}}}],["imageid",{"_index":433,"title":{},"body":{"injectables/CategoriesService.html":{},"classes/Category.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateTransactionDto.html":{},"classes/Transaction.html":{},"injectables/TransactionsService.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateTransactionDto.html":{}}}],["implied",{"_index":1282,"title":{},"body":{"license.html":{}}}],["import",{"_index":26,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"classes/AuthCredentialsDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"classes/Category.html":{},"classes/CategoryRepository.html":{},"modules/ConfigModule.html":{},"classes/ConfigService.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateMediaDto.html":{},"classes/CreateTransactionDto.html":{},"classes/GetCategoriesFilterDto.html":{},"classes/GetTransactionsFilterDto.html":{},"injectables/JwtStrategy.html":{},"classes/Media.html":{},"controllers/MediaController.html":{},"modules/MediaModule.html":{},"classes/MediaRepository.html":{},"injectables/MediaService.html":{},"classes/Transaction.html":{},"classes/TransactionRepository.html":{},"controllers/TransactionsController.html":{},"modules/TransactionsModule.html":{},"injectables/TransactionsService.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateMediaDto.html":{},"classes/UpdateTransactionDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/VerificationTokenEntity.html":{}}}],["imports",{"_index":25,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoriesModule.html":{},"modules/MediaModule.html":{},"modules/TransactionsModule.html":{},"modules/UsersModule.html":{}}}],["included",{"_index":1277,"title":{},"body":{"license.html":{}}}],["including",{"_index":581,"title":{},"body":{"classes/ConfigService.html":{},"license.html":{}}}],["index",{"_index":73,"title":{"index.html":{}},"body":{"controllers/AuthController.html":{},"classes/AuthCredentialsDto.html":{},"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"classes/Category.html":{},"classes/CategoryRepository.html":{},"classes/ConfigService.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateMediaDto.html":{},"classes/CreateTransactionDto.html":{},"classes/GetCategoriesFilterDto.html":{},"classes/GetTransactionsFilterDto.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/Media.html":{},"controllers/MediaController.html":{},"classes/MediaRepository.html":{},"injectables/MediaService.html":{},"classes/Transaction.html":{},"classes/TransactionRepository.html":{},"controllers/TransactionsController.html":{},"injectables/TransactionsService.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateMediaDto.html":{},"classes/UpdateTransactionDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/VerificationTokenEntity.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":21,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"classes/AuthCredentialsDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"classes/Category.html":{},"classes/CategoryRepository.html":{},"modules/ConfigModule.html":{},"classes/ConfigService.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateMediaDto.html":{},"classes/CreateTransactionDto.html":{},"classes/GetCategoriesFilterDto.html":{},"classes/GetTransactionsFilterDto.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/Media.html":{},"controllers/MediaController.html":{},"modules/MediaModule.html":{},"classes/MediaRepository.html":{},"injectables/MediaService.html":{},"classes/Transaction.html":{},"classes/TransactionRepository.html":{},"controllers/TransactionsController.html":{},"modules/TransactionsModule.html":{},"injectables/TransactionsService.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateMediaDto.html":{},"classes/UpdateTransactionDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/VerificationTokenEntity.html":{}}}],["inject",{"_index":61,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["injectable",{"_index":190,"title":{"injectables/AuthService.html":{},"injectables/CategoriesService.html":{},"injectables/JwtStrategy.html":{},"injectables/MediaService.html":{},"injectables/TransactionsService.html":{},"injectables/UsersService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/CategoriesService.html":{},"injectables/JwtStrategy.html":{},"injectables/MediaService.html":{},"injectables/TransactionsService.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["injectables",{"_index":191,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CategoriesService.html":{},"injectables/JwtStrategy.html":{},"injectables/MediaService.html":{},"injectables/TransactionsService.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["injectrepository",{"_index":222,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CategoriesService.html":{},"injectables/MediaService.html":{},"injectables/TransactionsService.html":{},"injectables/UsersService.html":{}}}],["injectrepository(categoryrepository",{"_index":379,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["injectrepository(mediarepository",{"_index":819,"title":{},"body":{"injectables/MediaService.html":{}}}],["injectrepository(transactionrepository",{"_index":916,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["injectrepository(userrepository",{"_index":1085,"title":{},"body":{"injectables/UsersService.html":{}}}],["injectrepository(verificationtokenentity",{"_index":225,"title":{},"body":{"injectables/AuthService.html":{}}}],["installation",{"_index":1202,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":1204,"title":{},"body":{"index.html":{}}}],["integration",{"_index":1227,"title":{},"body":{"index.html":{}}}],["interface",{"_index":724,"title":{"interfaces/JwtPayload.html":{}},"body":{"interfaces/JwtPayload.html":{},"coverage.html":{},"overview.html":{}}}],["interfaces",{"_index":725,"title":{},"body":{"interfaces/JwtPayload.html":{}}}],["interfaces/jwt",{"_index":215,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["internalservererrorexception",{"_index":523,"title":{},"body":{"classes/CategoryRepository.html":{},"classes/MediaRepository.html":{},"classes/TransactionRepository.html":{},"classes/UserRepository.html":{}}}],["iscorsenabled",{"_index":562,"title":{},"body":{"classes/ConfigService.html":{}}}],["isdatestring",{"_index":711,"title":{},"body":{"classes/CreateTransactionDto.html":{},"classes/UpdateTransactionDto.html":{}}}],["isdbsynchronized",{"_index":565,"title":{},"body":{"classes/ConfigService.html":{}}}],["isemail",{"_index":153,"title":{},"body":{"classes/AuthCredentialsDto.html":{}}}],["isemailverificationenabled",{"_index":564,"title":{},"body":{"classes/ConfigService.html":{}}}],["isin",{"_index":690,"title":{},"body":{"classes/CreateMediaDto.html":{},"classes/UpdateMediaDto.html":{}}}],["isin(object.values(mediatype",{"_index":696,"title":{},"body":{"classes/CreateMediaDto.html":{},"classes/UpdateMediaDto.html":{}}}],["isnotempty",{"_index":154,"title":{},"body":{"classes/AuthCredentialsDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateMediaDto.html":{},"classes/CreateTransactionDto.html":{},"classes/GetCategoriesFilterDto.html":{},"classes/GetTransactionsFilterDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateMediaDto.html":{},"classes/UpdateTransactionDto.html":{}}}],["isnumber",{"_index":712,"title":{},"body":{"classes/CreateTransactionDto.html":{},"classes/UpdateTransactionDto.html":{}}}],["isoptional",{"_index":668,"title":{},"body":{"classes/CreateCategoryDto.html":{},"classes/CreateMediaDto.html":{},"classes/CreateTransactionDto.html":{},"classes/GetCategoriesFilterDto.html":{},"classes/GetTransactionsFilterDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateMediaDto.html":{},"classes/UpdateTransactionDto.html":{},"classes/UpdateUserDto.html":{}}}],["isratelimitenabled",{"_index":563,"title":{},"body":{"classes/ConfigService.html":{}}}],["isstring",{"_index":155,"title":{},"body":{"classes/AuthCredentialsDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateMediaDto.html":{},"classes/CreateTransactionDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateMediaDto.html":{},"classes/UpdateTransactionDto.html":{}}}],["isurl",{"_index":691,"title":{},"body":{"classes/CreateMediaDto.html":{},"classes/UpdateMediaDto.html":{}}}],["isuuid",{"_index":669,"title":{},"body":{"classes/CreateCategoryDto.html":{},"classes/CreateTransactionDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateTransactionDto.html":{},"classes/UpdateUserDto.html":{}}}],["javascript",{"_index":580,"title":{},"body":{"classes/ConfigService.html":{}}}],["joi",{"_index":595,"title":{},"body":{"classes/ConfigService.html":{}}}],["joi.boolean().optional().default(false",{"_index":605,"title":{},"body":{"classes/ConfigService.html":{}}}],["joi.boolean().optional().default(true",{"_index":607,"title":{},"body":{"classes/ConfigService.html":{}}}],["joi.number().optional().default(10000",{"_index":611,"title":{},"body":{"classes/ConfigService.html":{}}}],["joi.number().optional().default(15",{"_index":609,"title":{},"body":{"classes/ConfigService.html":{}}}],["joi.number().optional().default(3000",{"_index":613,"title":{},"body":{"classes/ConfigService.html":{}}}],["joi.number().optional().default(3600",{"_index":628,"title":{},"body":{"classes/ConfigService.html":{}}}],["joi.number().optional().default(5432",{"_index":620,"title":{},"body":{"classes/ConfigService.html":{}}}],["joi.object(configservice.validation_schema",{"_index":651,"title":{},"body":{"classes/ConfigService.html":{}}}],["joi.objectschema",{"_index":650,"title":{},"body":{"classes/ConfigService.html":{}}}],["joi.string().optional",{"_index":632,"title":{},"body":{"classes/ConfigService.html":{}}}],["joi.string().optional().default('postgres",{"_index":618,"title":{},"body":{"classes/ConfigService.html":{}}}],["joi.string().optional().valid('http",{"_index":615,"title":{},"body":{"classes/ConfigService.html":{}}}],["joi.string().required",{"_index":622,"title":{},"body":{"classes/ConfigService.html":{}}}],["joincolumn",{"_index":498,"title":{},"body":{"classes/Category.html":{},"classes/Transaction.html":{},"classes/User.html":{},"classes/VerificationTokenEntity.html":{}}}],["js",{"_index":224,"title":{},"body":{"injectables/AuthService.html":{},"dependencies.html":{}}}],["json.stringify",{"_index":272,"title":{},"body":{"injectables/AuthService.html":{}}}],["json.stringify(createcategorydto",{"_index":347,"title":{},"body":{"controllers/CategoriesController.html":{},"classes/CategoryRepository.html":{}}}],["json.stringify(createmediadto",{"_index":794,"title":{},"body":{"controllers/MediaController.html":{}}}],["json.stringify(createtransactiondto",{"_index":870,"title":{},"body":{"classes/TransactionRepository.html":{},"controllers/TransactionsController.html":{}}}],["json.stringify(filterdto",{"_index":341,"title":{},"body":{"controllers/CategoriesController.html":{},"classes/CategoryRepository.html":{},"classes/TransactionRepository.html":{},"controllers/TransactionsController.html":{}}}],["json.stringify(payload",{"_index":243,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwt",{"_index":182,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["jwt.strategy",{"_index":176,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwt_expires_in",{"_index":627,"title":{},"body":{"classes/ConfigService.html":{}}}],["jwt_secret",{"_index":629,"title":{},"body":{"classes/ConfigService.html":{}}}],["jwtfromrequest",{"_index":739,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtmodule",{"_index":172,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.registerasync",{"_index":183,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtpayload",{"_index":214,"title":{"interfaces/JwtPayload.html":{}},"body":{"injectables/AuthService.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["jwtservice",{"_index":198,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtstrategy",{"_index":168,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["key",{"_index":571,"title":{},"body":{"classes/ConfigService.html":{}}}],["kind",{"_index":1281,"title":{},"body":{"license.html":{}}}],["lastlogindate",{"_index":971,"title":{},"body":{"classes/User.html":{}}}],["lastloginip",{"_index":972,"title":{},"body":{"classes/User.html":{}}}],["legend",{"_index":4,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoriesModule.html":{},"modules/ConfigModule.html":{},"modules/MediaModule.html":{},"modules/TransactionsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["length",{"_index":252,"title":{},"body":{"injectables/AuthService.html":{},"classes/Category.html":{},"classes/Media.html":{},"classes/Transaction.html":{},"classes/User.html":{},"classes/VerificationTokenEntity.html":{}}}],["liability",{"_index":1296,"title":{},"body":{"license.html":{}}}],["liable",{"_index":1293,"title":{},"body":{"license.html":{}}}],["license",{"_index":1240,"title":{"license.html":{}},"body":{"index.html":{},"license.html":{}}}],["licensed",{"_index":1230,"title":{},"body":{"index.html":{}}}],["like(`%${search",{"_index":528,"title":{},"body":{"classes/CategoryRepository.html":{},"classes/TransactionRepository.html":{}}}],["limit",{"_index":1161,"title":{},"body":{"dependencies.html":{}}}],["limitation",{"_index":1259,"title":{},"body":{"license.html":{}}}],["limited",{"_index":1283,"title":{},"body":{"license.html":{}}}],["linked",{"_index":873,"title":{},"body":{"classes/TransactionRepository.html":{}}}],["logger",{"_index":98,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"classes/CategoryRepository.html":{},"controllers/MediaController.html":{},"classes/TransactionRepository.html":{},"controllers/TransactionsController.html":{},"injectables/TransactionsService.html":{},"injectables/UsersService.html":{}}}],["logger('authservice",{"_index":212,"title":{},"body":{"injectables/AuthService.html":{}}}],["logger('categoriescontroller",{"_index":336,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["logger('categoryrepository",{"_index":515,"title":{},"body":{"classes/CategoryRepository.html":{}}}],["logger('mediacontroller",{"_index":790,"title":{},"body":{"controllers/MediaController.html":{}}}],["logger('transactionrepository",{"_index":855,"title":{},"body":{"classes/TransactionRepository.html":{}}}],["logger('transactionscontroller",{"_index":894,"title":{},"body":{"controllers/TransactionsController.html":{}}}],["made",{"_index":1196,"title":{},"body":{"index.html":{}}}],["mailgun",{"_index":223,"title":{},"body":{"injectables/AuthService.html":{},"dependencies.html":{}}}],["mailgun.messages().send(data",{"_index":275,"title":{},"body":{"injectables/AuthService.html":{}}}],["mailgun_api_key",{"_index":631,"title":{},"body":{"classes/ConfigService.html":{}}}],["manager",{"_index":1200,"title":{},"body":{"index.html":{}}}],["manytoone",{"_index":499,"title":{},"body":{"classes/Category.html":{},"classes/Media.html":{},"classes/Transaction.html":{}}}],["matches",{"_index":156,"title":{},"body":{"classes/AuthCredentialsDto.html":{}}}],["matches(/((?=.*\\d)|(?=.*\\w+))(?![.\\n])(?=.*[a",{"_index":165,"title":{},"body":{"classes/AuthCredentialsDto.html":{}}}],["matching",{"_index":65,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"classes/AuthCredentialsDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"classes/Category.html":{},"classes/CategoryRepository.html":{},"modules/ConfigModule.html":{},"classes/ConfigService.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateMediaDto.html":{},"classes/CreateTransactionDto.html":{},"classes/GetCategoriesFilterDto.html":{},"classes/GetTransactionsFilterDto.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/Media.html":{},"controllers/MediaController.html":{},"modules/MediaModule.html":{},"classes/MediaRepository.html":{},"injectables/MediaService.html":{},"classes/Transaction.html":{},"classes/TransactionRepository.html":{},"controllers/TransactionsController.html":{},"modules/TransactionsModule.html":{},"injectables/TransactionsService.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateMediaDto.html":{},"classes/UpdateTransactionDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/VerificationTokenEntity.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["maxlength",{"_index":157,"title":{},"body":{"classes/AuthCredentialsDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateMediaDto.html":{},"classes/CreateTransactionDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateMediaDto.html":{},"classes/UpdateTransactionDto.html":{}}}],["maxlength(20",{"_index":164,"title":{},"body":{"classes/AuthCredentialsDto.html":{}}}],["maxlength(2048",{"_index":693,"title":{},"body":{"classes/CreateMediaDto.html":{},"classes/UpdateMediaDto.html":{}}}],["maxlength(25",{"_index":671,"title":{},"body":{"classes/CreateCategoryDto.html":{},"classes/CreateMediaDto.html":{},"classes/CreateTransactionDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateMediaDto.html":{},"classes/UpdateTransactionDto.html":{}}}],["maxlength(250",{"_index":673,"title":{},"body":{"classes/CreateCategoryDto.html":{},"classes/CreateMediaDto.html":{},"classes/CreateTransactionDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateMediaDto.html":{},"classes/UpdateTransactionDto.html":{}}}],["maxlength(320",{"_index":162,"title":{},"body":{"classes/AuthCredentialsDto.html":{}}}],["media",{"_index":389,"title":{"classes/Media.html":{}},"body":{"injectables/CategoriesService.html":{},"classes/Category.html":{},"classes/CreateMediaDto.html":{},"classes/Media.html":{},"controllers/MediaController.html":{},"classes/MediaRepository.html":{},"injectables/MediaService.html":{},"classes/Transaction.html":{},"injectables/TransactionsService.html":{},"classes/UpdateMediaDto.html":{},"classes/User.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["media.controller",{"_index":802,"title":{},"body":{"modules/MediaModule.html":{}}}],["media.dto",{"_index":786,"title":{},"body":{"controllers/MediaController.html":{},"injectables/MediaService.html":{}}}],["media.dto.ts",{"_index":679,"title":{},"body":{"classes/CreateMediaDto.html":{},"classes/UpdateMediaDto.html":{},"coverage.html":{}}}],["media.dto.ts:11",{"_index":683,"title":{},"body":{"classes/CreateMediaDto.html":{}}}],["media.dto.ts:13",{"_index":949,"title":{},"body":{"classes/UpdateMediaDto.html":{}}}],["media.dto.ts:18",{"_index":689,"title":{},"body":{"classes/CreateMediaDto.html":{}}}],["media.dto.ts:21",{"_index":952,"title":{},"body":{"classes/UpdateMediaDto.html":{}}}],["media.dto.ts:25",{"_index":682,"title":{},"body":{"classes/CreateMediaDto.html":{}}}],["media.dto.ts:29",{"_index":948,"title":{},"body":{"classes/UpdateMediaDto.html":{}}}],["media.dto.ts:30",{"_index":687,"title":{},"body":{"classes/CreateMediaDto.html":{}}}],["media.dto.ts:34",{"_index":950,"title":{},"body":{"classes/UpdateMediaDto.html":{}}}],["media.entity",{"_index":787,"title":{},"body":{"controllers/MediaController.html":{},"classes/MediaRepository.html":{},"injectables/MediaService.html":{}}}],["media.repository",{"_index":804,"title":{},"body":{"modules/MediaModule.html":{},"injectables/MediaService.html":{}}}],["media.service",{"_index":785,"title":{},"body":{"controllers/MediaController.html":{},"modules/MediaModule.html":{}}}],["media.transaction",{"_index":847,"title":{},"body":{"classes/Transaction.html":{}}}],["media.user",{"_index":507,"title":{},"body":{"classes/Category.html":{},"classes/User.html":{}}}],["media.userforpicture",{"_index":1007,"title":{},"body":{"classes/User.html":{}}}],["media/media.entity",{"_index":504,"title":{},"body":{"classes/Category.html":{},"classes/Transaction.html":{},"classes/User.html":{}}}],["media/media.module",{"_index":34,"title":{},"body":{"modules/AppModule.html":{},"modules/CategoriesModule.html":{},"modules/TransactionsModule.html":{},"modules/UsersModule.html":{}}}],["media/media.service",{"_index":378,"title":{},"body":{"injectables/CategoriesService.html":{},"injectables/TransactionsService.html":{},"injectables/UsersService.html":{}}}],["mediacontroller",{"_index":767,"title":{"controllers/MediaController.html":{}},"body":{"controllers/MediaController.html":{},"modules/MediaModule.html":{},"coverage.html":{}}}],["mediaid",{"_index":402,"title":{},"body":{"injectables/CategoriesService.html":{},"classes/CategoryRepository.html":{},"classes/TransactionRepository.html":{},"injectables/TransactionsService.html":{}}}],["mediamodule",{"_index":15,"title":{"modules/MediaModule.html":{}},"body":{"modules/AppModule.html":{},"modules/CategoriesModule.html":{},"modules/MediaModule.html":{},"modules/TransactionsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["mediarepository",{"_index":803,"title":{"classes/MediaRepository.html":{}},"body":{"modules/MediaModule.html":{},"classes/MediaRepository.html":{},"injectables/MediaService.html":{},"coverage.html":{}}}],["mediaservice",{"_index":365,"title":{"injectables/MediaService.html":{}},"body":{"injectables/CategoriesService.html":{},"controllers/MediaController.html":{},"modules/MediaModule.html":{},"injectables/MediaService.html":{},"injectables/TransactionsService.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["mediatype",{"_index":684,"title":{},"body":{"classes/CreateMediaDto.html":{},"classes/Media.html":{},"classes/UpdateMediaDto.html":{},"miscellaneous/enumerations.html":{}}}],["mediatype.image",{"_index":762,"title":{},"body":{"classes/Media.html":{}}}],["merchantability",{"_index":1285,"title":{},"body":{"license.html":{}}}],["merge",{"_index":1263,"title":{},"body":{"license.html":{}}}],["mergevariables",{"_index":557,"title":{},"body":{"classes/ConfigService.html":{}}}],["mergevariables(filepath",{"_index":572,"title":{},"body":{"classes/ConfigService.html":{}}}],["message",{"_index":150,"title":{},"body":{"classes/AuthCredentialsDto.html":{}}}],["metadata",{"_index":1171,"title":{},"body":{"dependencies.html":{}}}],["methods",{"_index":74,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"classes/CategoryRepository.html":{},"classes/ConfigService.html":{},"injectables/JwtStrategy.html":{},"controllers/MediaController.html":{},"classes/MediaRepository.html":{},"injectables/MediaService.html":{},"classes/TransactionRepository.html":{},"controllers/TransactionsController.html":{},"injectables/TransactionsService.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["minlength",{"_index":158,"title":{},"body":{"classes/AuthCredentialsDto.html":{}}}],["minlength(3",{"_index":161,"title":{},"body":{"classes/AuthCredentialsDto.html":{}}}],["minlength(8",{"_index":163,"title":{},"body":{"classes/AuthCredentialsDto.html":{}}}],["miscellaneous",{"_index":1182,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":1229,"title":{},"body":{"index.html":{},"license.html":{}}}],["mode",{"_index":1209,"title":{},"body":{"index.html":{}}}],["modificationdate",{"_index":454,"title":{},"body":{"classes/Category.html":{},"classes/Media.html":{},"classes/Transaction.html":{},"classes/User.html":{},"classes/VerificationTokenEntity.html":{}}}],["modifies",{"_index":407,"title":{},"body":{"injectables/CategoriesService.html":{},"injectables/TransactionsService.html":{},"injectables/UsersService.html":{}}}],["modify",{"_index":1262,"title":{},"body":{"license.html":{}}}],["module",{"_index":0,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoriesModule.html":{},"modules/ConfigModule.html":{},"modules/MediaModule.html":{},"modules/TransactionsModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoriesModule.html":{},"modules/ConfigModule.html":{},"modules/MediaModule.html":{},"modules/TransactionsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["modules",{"_index":2,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoriesModule.html":{},"modules/ConfigModule.html":{},"modules/MediaModule.html":{},"modules/TransactionsModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["name",{"_index":85,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"classes/CategoryRepository.html":{},"classes/ConfigService.html":{},"injectables/JwtStrategy.html":{},"controllers/MediaController.html":{},"classes/MediaRepository.html":{},"injectables/MediaService.html":{},"classes/TransactionRepository.html":{},"controllers/TransactionsController.html":{},"injectables/TransactionsService.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/VerificationTokenEntity.html":{}}}],["need",{"_index":419,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["needed",{"_index":578,"title":{},"body":{"classes/ConfigService.html":{}}}],["nest",{"_index":1197,"title":{},"body":{"index.html":{}}}],["nestjs",{"_index":1198,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":27,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"classes/CategoryRepository.html":{},"modules/ConfigModule.html":{},"injectables/JwtStrategy.html":{},"controllers/MediaController.html":{},"modules/MediaModule.html":{},"classes/MediaRepository.html":{},"injectables/MediaService.html":{},"classes/TransactionRepository.html":{},"controllers/TransactionsController.html":{},"modules/TransactionsModule.html":{},"injectables/TransactionsService.html":{},"classes/UserRepository.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":1145,"title":{},"body":{"dependencies.html":{}}}],["nestjs/jwt",{"_index":173,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":175,"title":{},"body":{"modules/AuthModule.html":{},"controllers/CategoriesController.html":{},"injectables/JwtStrategy.html":{},"controllers/MediaController.html":{},"controllers/TransactionsController.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":1148,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":108,"title":{},"body":{"controllers/AuthController.html":{},"classes/AuthCredentialsDto.html":{},"controllers/CategoriesController.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateMediaDto.html":{},"classes/CreateTransactionDto.html":{},"classes/GetCategoriesFilterDto.html":{},"classes/GetTransactionsFilterDto.html":{},"controllers/MediaController.html":{},"controllers/TransactionsController.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateMediaDto.html":{},"classes/UpdateTransactionDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":30,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"modules/MediaModule.html":{},"injectables/MediaService.html":{},"modules/TransactionsModule.html":{},"injectables/TransactionsService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["new",{"_index":113,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"classes/CategoryRepository.html":{},"modules/ConfigModule.html":{},"classes/ConfigService.html":{},"injectables/JwtStrategy.html":{},"controllers/MediaController.html":{},"classes/MediaRepository.html":{},"injectables/MediaService.html":{},"classes/TransactionRepository.html":{},"controllers/TransactionsController.html":{},"injectables/TransactionsService.html":{},"classes/UserRepository.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["newmedia",{"_index":822,"title":{},"body":{"injectables/MediaService.html":{}}}],["newmedia.save",{"_index":823,"title":{},"body":{"injectables/MediaService.html":{}}}],["noninfringement",{"_index":1289,"title":{},"body":{"license.html":{}}}],["notequals",{"_index":713,"title":{},"body":{"classes/CreateTransactionDto.html":{},"classes/UpdateTransactionDto.html":{}}}],["notequals(0",{"_index":716,"title":{},"body":{"classes/CreateTransactionDto.html":{},"classes/UpdateTransactionDto.html":{}}}],["notfoundexception",{"_index":213,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CategoriesService.html":{},"classes/CategoryRepository.html":{},"classes/MediaRepository.html":{},"injectables/MediaService.html":{},"injectables/TransactionsService.html":{}}}],["notfoundexception(`category",{"_index":382,"title":{},"body":{"injectables/CategoriesService.html":{},"classes/CategoryRepository.html":{}}}],["notfoundexception(`media",{"_index":810,"title":{},"body":{"classes/MediaRepository.html":{},"injectables/MediaService.html":{}}}],["notfoundexception(`token",{"_index":247,"title":{},"body":{"injectables/AuthService.html":{}}}],["notfoundexception(`transaction",{"_index":919,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["notice",{"_index":1275,"title":{},"body":{"license.html":{}}}],["npm",{"_index":1203,"title":{},"body":{"index.html":{}}}],["npx",{"_index":1220,"title":{},"body":{"index.html":{}}}],["null",{"_index":427,"title":{},"body":{"injectables/CategoriesService.html":{},"classes/Category.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateTransactionDto.html":{},"classes/Media.html":{},"injectables/TransactionsService.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateMediaDto.html":{},"classes/UpdateTransactionDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"injectables/UsersService.html":{}}}],["nullable",{"_index":466,"title":{},"body":{"classes/Category.html":{},"classes/Media.html":{},"classes/Transaction.html":{},"classes/User.html":{},"classes/VerificationTokenEntity.html":{}}}],["number",{"_index":493,"title":{},"body":{"classes/Category.html":{},"classes/CreateTransactionDto.html":{},"classes/Media.html":{},"classes/Transaction.html":{},"classes/UpdateTransactionDto.html":{},"classes/User.html":{},"classes/VerificationTokenEntity.html":{}}}],["object",{"_index":408,"title":{},"body":{"injectables/CategoriesService.html":{},"classes/ConfigService.html":{},"injectables/TransactionsService.html":{},"injectables/UsersService.html":{}}}],["object.assign(category",{"_index":535,"title":{},"body":{"classes/CategoryRepository.html":{}}}],["object.assign(media",{"_index":827,"title":{},"body":{"injectables/MediaService.html":{}}}],["object.assign(new",{"_index":531,"title":{},"body":{"classes/CategoryRepository.html":{},"injectables/MediaService.html":{},"classes/TransactionRepository.html":{}}}],["object.assign(this.create",{"_index":1033,"title":{},"body":{"classes/UserRepository.html":{}}}],["object.assign(this.verificationtokenrepository.create",{"_index":254,"title":{},"body":{"injectables/AuthService.html":{}}}],["object.assign(transaction",{"_index":876,"title":{},"body":{"classes/TransactionRepository.html":{}}}],["object.assign(user",{"_index":1041,"title":{},"body":{"classes/UserRepository.html":{}}}],["object.entries(updatecategorydto).length",{"_index":411,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["object.entries(updatemediadto).length",{"_index":825,"title":{},"body":{"injectables/MediaService.html":{}}}],["object.entries(updatetransactiondto).length",{"_index":929,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["object.entries(updateuserdto).length",{"_index":1089,"title":{},"body":{"injectables/UsersService.html":{}}}],["object.keys(configservice.validation_schema).foreach((key",{"_index":646,"title":{},"body":{"classes/ConfigService.html":{}}}],["obtaining",{"_index":1251,"title":{},"body":{"license.html":{}}}],["occur",{"_index":229,"title":{},"body":{"injectables/AuthService.html":{}}}],["occured",{"_index":139,"title":{},"body":{"controllers/AuthController.html":{}}}],["ondelete",{"_index":487,"title":{},"body":{"classes/Category.html":{},"classes/Media.html":{},"classes/Transaction.html":{},"classes/VerificationTokenEntity.html":{}}}],["one",{"_index":394,"title":{},"body":{"injectables/CategoriesService.html":{},"injectables/TransactionsService.html":{},"injectables/UsersService.html":{}}}],["onetomany",{"_index":500,"title":{},"body":{"classes/Category.html":{},"classes/User.html":{}}}],["onetomany(undefined",{"_index":459,"title":{},"body":{"classes/Category.html":{}}}],["onetoone",{"_index":501,"title":{},"body":{"classes/Category.html":{},"classes/Media.html":{},"classes/Transaction.html":{},"classes/User.html":{},"classes/VerificationTokenEntity.html":{}}}],["onetoone(undefined",{"_index":1105,"title":{},"body":{"classes/VerificationTokenEntity.html":{}}}],["open",{"_index":1231,"title":{},"body":{"index.html":{}}}],["optional",{"_index":86,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"classes/CategoryRepository.html":{},"classes/ConfigService.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateMediaDto.html":{},"classes/CreateTransactionDto.html":{},"classes/GetCategoriesFilterDto.html":{},"classes/GetTransactionsFilterDto.html":{},"injectables/JwtStrategy.html":{},"controllers/MediaController.html":{},"classes/MediaRepository.html":{},"injectables/MediaService.html":{},"classes/TransactionRepository.html":{},"controllers/TransactionsController.html":{},"injectables/TransactionsService.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateMediaDto.html":{},"classes/UpdateTransactionDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["otherwise",{"_index":1301,"title":{},"body":{"license.html":{}}}],["out",{"_index":20,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoriesModule.html":{},"modules/ConfigModule.html":{},"modules/MediaModule.html":{},"modules/TransactionsModule.html":{},"modules/UsersModule.html":{},"license.html":{},"overview.html":{}}}],["overview",{"_index":1308,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["owned",{"_index":422,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["p",{"_index":1222,"title":{},"body":{"index.html":{}}}],["package",{"_index":1142,"title":{"dependencies.html":{}},"body":{}}],["param",{"_index":99,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CategoriesController.html":{},"controllers/MediaController.html":{},"controllers/TransactionsController.html":{}}}],["param('id",{"_index":343,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/MediaController.html":{},"controllers/TransactionsController.html":{}}}],["param('token",{"_index":126,"title":{},"body":{"controllers/AuthController.html":{}}}],["parameters",{"_index":84,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"classes/CategoryRepository.html":{},"classes/ConfigService.html":{},"injectables/JwtStrategy.html":{},"controllers/MediaController.html":{},"classes/MediaRepository.html":{},"injectables/MediaService.html":{},"classes/TransactionRepository.html":{},"controllers/TransactionsController.html":{},"injectables/TransactionsService.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["parent",{"_index":442,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["parent.parentcategoryid",{"_index":446,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["parentcategory",{"_index":387,"title":{},"body":{"injectables/CategoriesService.html":{},"classes/Category.html":{}}}],["parentcategoryid",{"_index":368,"title":{},"body":{"injectables/CategoriesService.html":{},"classes/Category.html":{},"classes/CategoryRepository.html":{},"classes/CreateCategoryDto.html":{},"classes/UpdateCategoryDto.html":{}}}],["parsefloat(amount",{"_index":715,"title":{},"body":{"classes/CreateTransactionDto.html":{},"classes/Transaction.html":{},"classes/UpdateTransactionDto.html":{}}}],["parseuuidpipe",{"_index":311,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/MediaController.html":{},"controllers/TransactionsController.html":{}}}],["particular",{"_index":1287,"title":{},"body":{"license.html":{}}}],["passport",{"_index":736,"title":{},"body":{"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":174,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportmodule.register",{"_index":180,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":733,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["passportstrategy(strategy",{"_index":737,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["password",{"_index":52,"title":{},"body":{"modules/AppModule.html":{},"classes/AuthCredentialsDto.html":{},"classes/User.html":{},"classes/UserRepository.html":{}}}],["patch",{"_index":312,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/MediaController.html":{},"controllers/TransactionsController.html":{},"controllers/UsersController.html":{}}}],["patch('/:id",{"_index":349,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/MediaController.html":{},"controllers/TransactionsController.html":{}}}],["patch('/:id')@usepipes(new",{"_index":307,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/MediaController.html":{},"controllers/TransactionsController.html":{}}}],["patch('/current",{"_index":1060,"title":{},"body":{"controllers/UsersController.html":{}}}],["patch('/current')@usepipes(new",{"_index":1054,"title":{},"body":{"controllers/UsersController.html":{}}}],["payload",{"_index":239,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["payload.interface",{"_index":216,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["payload.interface.ts",{"_index":727,"title":{},"body":{"interfaces/JwtPayload.html":{},"coverage.html":{}}}],["permission",{"_index":1245,"title":{},"body":{"license.html":{}}}],["permit",{"_index":1269,"title":{},"body":{"license.html":{}}}],["person",{"_index":1250,"title":{},"body":{"license.html":{}}}],["persons",{"_index":1270,"title":{},"body":{"license.html":{}}}],["pg",{"_index":1168,"title":{},"body":{"dependencies.html":{}}}],["pg_foreign_key_constraint_violation",{"_index":524,"title":{},"body":{"classes/CategoryRepository.html":{},"classes/MediaRepository.html":{},"classes/TransactionRepository.html":{},"classes/UserRepository.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["pg_unique_constraint_violation",{"_index":866,"title":{},"body":{"classes/TransactionRepository.html":{},"classes/UserRepository.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["picture",{"_index":973,"title":{},"body":{"classes/User.html":{}}}],["pictureid",{"_index":965,"title":{},"body":{"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"injectables/UsersService.html":{}}}],["please",{"_index":264,"title":{},"body":{"injectables/AuthService.html":{}}}],["port",{"_index":48,"title":{},"body":{"modules/AppModule.html":{}}}],["portions",{"_index":1279,"title":{},"body":{"license.html":{}}}],["post",{"_index":100,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CategoriesController.html":{},"controllers/MediaController.html":{},"controllers/TransactionsController.html":{}}}],["post('/signin",{"_index":81,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('/signup",{"_index":90,"title":{},"body":{"controllers/AuthController.html":{}}}],["post()@usepipes(new",{"_index":293,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/MediaController.html":{},"controllers/TransactionsController.html":{}}}],["prefix",{"_index":71,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CategoriesController.html":{},"controllers/MediaController.html":{},"controllers/TransactionsController.html":{},"controllers/UsersController.html":{}}}],["previousimageid",{"_index":409,"title":{},"body":{"injectables/CategoriesService.html":{},"injectables/TransactionsService.html":{},"injectables/UsersService.html":{}}}],["primary",{"_index":1107,"title":{},"body":{"classes/VerificationTokenEntity.html":{}}}],["primarycolumn",{"_index":1110,"title":{},"body":{"classes/VerificationTokenEntity.html":{}}}],["primarygeneratedcolumn",{"_index":502,"title":{},"body":{"classes/Category.html":{},"classes/Media.html":{},"classes/Transaction.html":{},"classes/User.html":{}}}],["primarygeneratedcolumn('uuid",{"_index":468,"title":{},"body":{"classes/Category.html":{},"classes/Media.html":{},"classes/Transaction.html":{},"classes/User.html":{}}}],["private",{"_index":111,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"classes/CategoryRepository.html":{},"classes/ConfigService.html":{},"injectables/JwtStrategy.html":{},"controllers/MediaController.html":{},"injectables/MediaService.html":{},"classes/TransactionRepository.html":{},"controllers/TransactionsController.html":{},"injectables/TransactionsService.html":{},"classes/UserRepository.html":{},"injectables/UsersService.html":{}}}],["process.env.jwt_secret",{"_index":185,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["process.env[key",{"_index":647,"title":{},"body":{"classes/ConfigService.html":{}}}],["production",{"_index":1211,"title":{},"body":{"index.html":{}}}],["project",{"_index":1232,"title":{},"body":{"index.html":{}}}],["promise",{"_index":88,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"classes/CategoryRepository.html":{},"injectables/JwtStrategy.html":{},"controllers/MediaController.html":{},"classes/MediaRepository.html":{},"injectables/MediaService.html":{},"classes/TransactionRepository.html":{},"controllers/TransactionsController.html":{},"injectables/TransactionsService.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["properties",{"_index":144,"title":{},"body":{"classes/AuthCredentialsDto.html":{},"injectables/AuthService.html":{},"injectables/CategoriesService.html":{},"classes/Category.html":{},"classes/CategoryRepository.html":{},"classes/ConfigService.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateMediaDto.html":{},"classes/CreateTransactionDto.html":{},"classes/GetCategoriesFilterDto.html":{},"classes/GetTransactionsFilterDto.html":{},"interfaces/JwtPayload.html":{},"classes/Media.html":{},"classes/Transaction.html":{},"classes/TransactionRepository.html":{},"injectables/TransactionsService.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateMediaDto.html":{},"classes/UpdateTransactionDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"injectables/UsersService.html":{},"classes/VerificationTokenEntity.html":{}}}],["provide",{"_index":550,"title":{},"body":{"modules/ConfigModule.html":{}}}],["provided",{"_index":390,"title":{},"body":{"injectables/CategoriesService.html":{},"classes/CategoryRepository.html":{},"classes/TransactionRepository.html":{},"injectables/TransactionsService.html":{},"classes/UserRepository.html":{},"injectables/UsersService.html":{},"license.html":{}}}],["providers",{"_index":7,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoriesModule.html":{},"modules/ConfigModule.html":{},"modules/MediaModule.html":{},"modules/TransactionsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["publish",{"_index":1264,"title":{},"body":{"license.html":{}}}],["purpose",{"_index":1288,"title":{},"body":{"license.html":{}}}],["query",{"_index":313,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/TransactionsController.html":{}}}],["query(new",{"_index":337,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/TransactionsController.html":{}}}],["random",{"_index":220,"title":{},"body":{"injectables/AuthService.html":{},"dependencies.html":{}}}],["rate",{"_index":1160,"title":{},"body":{"dependencies.html":{}}}],["rate_limit_enabled",{"_index":606,"title":{},"body":{"classes/ConfigService.html":{}}}],["rate_limit_max",{"_index":610,"title":{},"body":{"classes/ConfigService.html":{}}}],["rate_limit_window_in_minute",{"_index":608,"title":{},"body":{"classes/ConfigService.html":{}}}],["readenvvars",{"_index":558,"title":{},"body":{"classes/ConfigService.html":{}}}],["readonly",{"_index":112,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"classes/ConfigService.html":{},"injectables/JwtStrategy.html":{},"controllers/MediaController.html":{},"injectables/MediaService.html":{},"controllers/TransactionsController.html":{},"injectables/TransactionsService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["record",{"_index":599,"title":{},"body":{"classes/ConfigService.html":{},"miscellaneous/typealiases.html":{}}}],["reference",{"_index":439,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["referenced",{"_index":543,"title":{},"body":{"classes/CategoryRepository.html":{},"classes/MediaRepository.html":{}}}],["reflect",{"_index":1170,"title":{},"body":{"dependencies.html":{}}}],["relations",{"_index":473,"title":{},"body":{"classes/Category.html":{},"classes/Media.html":{},"classes/Transaction.html":{},"classes/User.html":{}}}],["replace",{"_index":393,"title":{},"body":{"injectables/CategoriesService.html":{},"injectables/TransactionsService.html":{},"injectables/UsersService.html":{}}}],["repository",{"_index":196,"title":{},"body":{"injectables/AuthService.html":{},"classes/CategoryRepository.html":{},"classes/MediaRepository.html":{},"classes/TransactionRepository.html":{},"classes/UserRepository.html":{}}}],["req",{"_index":1319,"title":{},"body":{"miscellaneous/variables.html":{}}}],["req.user",{"_index":1320,"title":{},"body":{"miscellaneous/variables.html":{}}}],["res",{"_index":539,"title":{},"body":{"classes/CategoryRepository.html":{},"classes/MediaRepository.html":{},"injectables/TransactionsService.html":{}}}],["res.affected",{"_index":544,"title":{},"body":{"classes/CategoryRepository.html":{},"classes/MediaRepository.html":{},"injectables/TransactionsService.html":{}}}],["reset",{"_index":19,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoriesModule.html":{},"modules/ConfigModule.html":{},"modules/MediaModule.html":{},"modules/TransactionsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["restriction",{"_index":1258,"title":{},"body":{"license.html":{}}}],["result",{"_index":64,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"classes/AuthCredentialsDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"classes/Category.html":{},"classes/CategoryRepository.html":{},"modules/ConfigModule.html":{},"classes/ConfigService.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateMediaDto.html":{},"classes/CreateTransactionDto.html":{},"classes/GetCategoriesFilterDto.html":{},"classes/GetTransactionsFilterDto.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/Media.html":{},"controllers/MediaController.html":{},"modules/MediaModule.html":{},"classes/MediaRepository.html":{},"injectables/MediaService.html":{},"classes/Transaction.html":{},"classes/TransactionRepository.html":{},"controllers/TransactionsController.html":{},"modules/TransactionsModule.html":{},"injectables/TransactionsService.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateMediaDto.html":{},"classes/UpdateTransactionDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/VerificationTokenEntity.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["results",{"_index":66,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"classes/AuthCredentialsDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"classes/Category.html":{},"classes/CategoryRepository.html":{},"modules/ConfigModule.html":{},"classes/ConfigService.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateMediaDto.html":{},"classes/CreateTransactionDto.html":{},"classes/GetCategoriesFilterDto.html":{},"classes/GetTransactionsFilterDto.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/Media.html":{},"controllers/MediaController.html":{},"modules/MediaModule.html":{},"classes/MediaRepository.html":{},"injectables/MediaService.html":{},"classes/Transaction.html":{},"classes/TransactionRepository.html":{},"controllers/TransactionsController.html":{},"modules/TransactionsModule.html":{},"injectables/TransactionsService.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateMediaDto.html":{},"classes/UpdateTransactionDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/VerificationTokenEntity.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["retrieve",{"_index":445,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["retrieving",{"_index":339,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/MediaController.html":{},"controllers/TransactionsController.html":{}}}],["return",{"_index":43,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"classes/CategoryRepository.html":{},"classes/ConfigService.html":{},"injectables/JwtStrategy.html":{},"controllers/MediaController.html":{},"injectables/MediaService.html":{},"classes/TransactionRepository.html":{},"controllers/TransactionsController.html":{},"injectables/TransactionsService.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":87,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"classes/CategoryRepository.html":{},"classes/ConfigService.html":{},"injectables/JwtStrategy.html":{},"controllers/MediaController.html":{},"classes/MediaRepository.html":{},"injectables/MediaService.html":{},"classes/TransactionRepository.html":{},"controllers/TransactionsController.html":{},"injectables/TransactionsService.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["rights",{"_index":1260,"title":{},"body":{"license.html":{}}}],["rimraf",{"_index":1173,"title":{},"body":{"dependencies.html":{}}}],["run",{"_index":1206,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":1175,"title":{},"body":{"dependencies.html":{}}}],["salt",{"_index":1017,"title":{},"body":{"classes/UserRepository.html":{}}}],["savetokenandsendemailverification",{"_index":193,"title":{},"body":{"injectables/AuthService.html":{}}}],["savetokenandsendemailverification(authcredentialsdto",{"_index":201,"title":{},"body":{"injectables/AuthService.html":{}}}],["schemamap",{"_index":597,"title":{},"body":{"classes/ConfigService.html":{}}}],["search",{"_index":527,"title":{},"body":{"classes/CategoryRepository.html":{},"classes/GetCategoriesFilterDto.html":{},"classes/GetTransactionsFilterDto.html":{},"classes/TransactionRepository.html":{}}}],["secret",{"_index":184,"title":{},"body":{"modules/AuthModule.html":{}}}],["secretorkey",{"_index":741,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["sell",{"_index":1267,"title":{},"body":{"license.html":{}}}],["send",{"_index":282,"title":{},"body":{"injectables/AuthService.html":{}}}],["sending",{"_index":230,"title":{},"body":{"injectables/AuthService.html":{}}}],["sent",{"_index":277,"title":{},"body":{"injectables/AuthService.html":{}}}],["server_port",{"_index":612,"title":{},"body":{"classes/ConfigService.html":{}}}],["service",{"_index":512,"title":{},"body":{"classes/Category.html":{}}}],["service.parentcategory",{"_index":513,"title":{},"body":{"classes/Category.html":{}}}],["set",{"_index":441,"title":{},"body":{"injectables/CategoriesService.html":{},"classes/ConfigService.html":{}}}],["shall",{"_index":1276,"title":{},"body":{"license.html":{}}}],["shargea",{"_index":266,"title":{},"body":{"injectables/AuthService.html":{},"index.html":{}}}],["signin",{"_index":75,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["signin(authcredentialsdto",{"_index":78,"title":{},"body":{"controllers/AuthController.html":{}}}],["signin(authcrendentialsdto",{"_index":205,"title":{},"body":{"injectables/AuthService.html":{}}}],["signoptions",{"_index":187,"title":{},"body":{"modules/AuthModule.html":{}}}],["signup",{"_index":76,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/UserRepository.html":{},"injectables/UsersService.html":{}}}],["signup(@body(new",{"_index":115,"title":{},"body":{"controllers/AuthController.html":{}}}],["signup(authcredentialsdto",{"_index":89,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/UserRepository.html":{},"injectables/UsersService.html":{}}}],["software",{"_index":1253,"title":{},"body":{"license.html":{}}}],["source",{"_index":22,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"classes/AuthCredentialsDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"classes/Category.html":{},"classes/CategoryRepository.html":{},"modules/ConfigModule.html":{},"classes/ConfigService.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateMediaDto.html":{},"classes/CreateTransactionDto.html":{},"classes/GetCategoriesFilterDto.html":{},"classes/GetTransactionsFilterDto.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/Media.html":{},"controllers/MediaController.html":{},"modules/MediaModule.html":{},"classes/MediaRepository.html":{},"injectables/MediaService.html":{},"classes/Transaction.html":{},"classes/TransactionRepository.html":{},"controllers/TransactionsController.html":{},"modules/TransactionsModule.html":{},"injectables/TransactionsService.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateMediaDto.html":{},"classes/UpdateTransactionDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/VerificationTokenEntity.html":{},"index.html":{}}}],["spostman",{"_index":1224,"title":{},"body":{"index.html":{}}}],["src/.../category.repository.ts",{"_index":1315,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../config.service.ts",{"_index":1312,"title":{},"body":{"miscellaneous/typealiases.html":{}}}],["src/.../currency.enum.ts",{"_index":1184,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../get",{"_index":1313,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":1192,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../media",{"_index":1185,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../media.repository.ts",{"_index":1316,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../transaction.repository.ts",{"_index":1314,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../user.repository.ts",{"_index":1317,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app.module.ts",{"_index":24,"title":{},"body":{"modules/AppModule.html":{}}}],["src/auth/auth.controller.ts",{"_index":70,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:16",{"_index":91,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:21",{"_index":83,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:34",{"_index":95,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module.ts",{"_index":169,"title":{},"body":{"modules/AuthModule.html":{}}}],["src/auth/auth.service.ts",{"_index":192,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/auth.service.ts:16",{"_index":199,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:27",{"_index":208,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:35",{"_index":206,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:48",{"_index":209,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:58",{"_index":204,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/dto/auth",{"_index":142,"title":{},"body":{"classes/AuthCredentialsDto.html":{},"coverage.html":{}}}],["src/auth/interfaces/jwt",{"_index":726,"title":{},"body":{"interfaces/JwtPayload.html":{},"coverage.html":{}}}],["src/auth/jwt.strategy.ts",{"_index":728,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/auth/jwt.strategy.ts:10",{"_index":730,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/jwt.strategy.ts:21",{"_index":732,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/verification.token.entity.ts",{"_index":1101,"title":{},"body":{"classes/VerificationTokenEntity.html":{},"coverage.html":{}}}],["src/auth/verification.token.entity.ts:10",{"_index":1109,"title":{},"body":{"classes/VerificationTokenEntity.html":{}}}],["src/auth/verification.token.entity.ts:13",{"_index":1111,"title":{},"body":{"classes/VerificationTokenEntity.html":{}}}],["src/auth/verification.token.entity.ts:16",{"_index":1104,"title":{},"body":{"classes/VerificationTokenEntity.html":{}}}],["src/auth/verification.token.entity.ts:19",{"_index":1102,"title":{},"body":{"classes/VerificationTokenEntity.html":{}}}],["src/auth/verification.token.entity.ts:22",{"_index":1103,"title":{},"body":{"classes/VerificationTokenEntity.html":{}}}],["src/auth/verification.token.entity.ts:25",{"_index":1112,"title":{},"body":{"classes/VerificationTokenEntity.html":{}}}],["src/categories/categories.controller.ts",{"_index":284,"title":{},"body":{"controllers/CategoriesController.html":{},"coverage.html":{}}}],["src/categories/categories.controller.ts:41",{"_index":300,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["src/categories/categories.controller.ts:50",{"_index":304,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["src/categories/categories.controller.ts:59",{"_index":294,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["src/categories/categories.controller.ts:69",{"_index":308,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["src/categories/categories.controller.ts:78",{"_index":297,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["src/categories/categories.module.ts",{"_index":356,"title":{},"body":{"modules/CategoriesModule.html":{}}}],["src/categories/categories.service.ts",{"_index":361,"title":{},"body":{"injectables/CategoriesService.html":{},"coverage.html":{}}}],["src/categories/categories.service.ts:105",{"_index":371,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["src/categories/categories.service.ts:109",{"_index":369,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["src/categories/categories.service.ts:14",{"_index":366,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["src/categories/categories.service.ts:23",{"_index":374,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["src/categories/categories.service.ts:27",{"_index":375,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["src/categories/categories.service.ts:36",{"_index":372,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["src/categories/categories.service.ts:53",{"_index":376,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["src/categories/categories.service.ts:93",{"_index":373,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["src/categories/category.entity.ts",{"_index":447,"title":{},"body":{"classes/Category.html":{},"coverage.html":{}}}],["src/categories/category.entity.ts:24",{"_index":469,"title":{},"body":{"classes/Category.html":{}}}],["src/categories/category.entity.ts:27",{"_index":483,"title":{},"body":{"classes/Category.html":{}}}],["src/categories/category.entity.ts:30",{"_index":467,"title":{},"body":{"classes/Category.html":{}}}],["src/categories/category.entity.ts:33",{"_index":475,"title":{},"body":{"classes/Category.html":{}}}],["src/categories/category.entity.ts:36",{"_index":480,"title":{},"body":{"classes/Category.html":{}}}],["src/categories/category.entity.ts:40",{"_index":492,"title":{},"body":{"classes/Category.html":{}}}],["src/categories/category.entity.ts:43",{"_index":463,"title":{},"body":{"classes/Category.html":{}}}],["src/categories/category.entity.ts:46",{"_index":477,"title":{},"body":{"classes/Category.html":{}}}],["src/categories/category.entity.ts:49",{"_index":495,"title":{},"body":{"classes/Category.html":{}}}],["src/categories/category.entity.ts:58",{"_index":472,"title":{},"body":{"classes/Category.html":{}}}],["src/categories/category.entity.ts:62",{"_index":490,"title":{},"body":{"classes/Category.html":{}}}],["src/categories/category.entity.ts:66",{"_index":486,"title":{},"body":{"classes/Category.html":{}}}],["src/categories/category.entity.ts:70",{"_index":489,"title":{},"body":{"classes/Category.html":{}}}],["src/categories/category.entity.ts:74",{"_index":479,"title":{},"body":{"classes/Category.html":{}}}],["src/categories/category.entity.ts:77",{"_index":461,"title":{},"body":{"classes/Category.html":{}}}],["src/categories/category.repository.ts",{"_index":514,"title":{},"body":{"classes/CategoryRepository.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/categories/category.repository.ts:14",{"_index":516,"title":{},"body":{"classes/CategoryRepository.html":{}}}],["src/categories/category.repository.ts:16",{"_index":519,"title":{},"body":{"classes/CategoryRepository.html":{}}}],["src/categories/category.repository.ts:36",{"_index":517,"title":{},"body":{"classes/CategoryRepository.html":{}}}],["src/categories/category.repository.ts:49",{"_index":521,"title":{},"body":{"classes/CategoryRepository.html":{}}}],["src/categories/category.repository.ts:61",{"_index":518,"title":{},"body":{"classes/CategoryRepository.html":{}}}],["src/categories/dto/create",{"_index":658,"title":{},"body":{"classes/CreateCategoryDto.html":{},"coverage.html":{}}}],["src/categories/dto/get",{"_index":718,"title":{},"body":{"classes/GetCategoriesFilterDto.html":{},"coverage.html":{}}}],["src/categories/dto/update",{"_index":939,"title":{},"body":{"classes/UpdateCategoryDto.html":{},"coverage.html":{}}}],["src/config/config.module.ts",{"_index":547,"title":{},"body":{"modules/ConfigModule.html":{}}}],["src/config/config.service.ts",{"_index":554,"title":{},"body":{"classes/ConfigService.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{}}}],["src/config/config.service.ts:16",{"_index":585,"title":{},"body":{"classes/ConfigService.html":{}}}],["src/config/config.service.ts:43",{"_index":587,"title":{},"body":{"classes/ConfigService.html":{}}}],["src/config/config.service.ts:47",{"_index":589,"title":{},"body":{"classes/ConfigService.html":{}}}],["src/config/config.service.ts:51",{"_index":591,"title":{},"body":{"classes/ConfigService.html":{}}}],["src/config/config.service.ts:55",{"_index":593,"title":{},"body":{"classes/ConfigService.html":{}}}],["src/config/config.service.ts:59",{"_index":573,"title":{},"body":{"classes/ConfigService.html":{}}}],["src/config/config.service.ts:71",{"_index":574,"title":{},"body":{"classes/ConfigService.html":{}}}],["src/config/config.service.ts:87",{"_index":576,"title":{},"body":{"classes/ConfigService.html":{}}}],["src/config/config.service.ts:9",{"_index":567,"title":{},"body":{"classes/ConfigService.html":{}}}],["src/config/config.service.ts:99",{"_index":570,"title":{},"body":{"classes/ConfigService.html":{}}}],["src/main.ts",{"_index":1130,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/media/dto/create",{"_index":678,"title":{},"body":{"classes/CreateMediaDto.html":{},"coverage.html":{}}}],["src/media/dto/update",{"_index":946,"title":{},"body":{"classes/UpdateMediaDto.html":{},"coverage.html":{}}}],["src/media/media",{"_index":1190,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/media/media.controller.ts",{"_index":768,"title":{},"body":{"controllers/MediaController.html":{},"coverage.html":{}}}],["src/media/media.controller.ts:39",{"_index":779,"title":{},"body":{"controllers/MediaController.html":{}}}],["src/media/media.controller.ts:45",{"_index":781,"title":{},"body":{"controllers/MediaController.html":{}}}],["src/media/media.controller.ts:54",{"_index":775,"title":{},"body":{"controllers/MediaController.html":{}}}],["src/media/media.controller.ts:64",{"_index":784,"title":{},"body":{"controllers/MediaController.html":{}}}],["src/media/media.controller.ts:73",{"_index":777,"title":{},"body":{"controllers/MediaController.html":{}}}],["src/media/media.entity.ts",{"_index":743,"title":{},"body":{"classes/Media.html":{},"coverage.html":{}}}],["src/media/media.entity.ts:13",{"_index":748,"title":{},"body":{"classes/Media.html":{}}}],["src/media/media.entity.ts:16",{"_index":751,"title":{},"body":{"classes/Media.html":{}}}],["src/media/media.entity.ts:19",{"_index":747,"title":{},"body":{"classes/Media.html":{}}}],["src/media/media.entity.ts:22",{"_index":756,"title":{},"body":{"classes/Media.html":{}}}],["src/media/media.entity.ts:29",{"_index":754,"title":{},"body":{"classes/Media.html":{}}}],["src/media/media.entity.ts:33",{"_index":759,"title":{},"body":{"classes/Media.html":{}}}],["src/media/media.entity.ts:36",{"_index":746,"title":{},"body":{"classes/Media.html":{}}}],["src/media/media.entity.ts:39",{"_index":749,"title":{},"body":{"classes/Media.html":{}}}],["src/media/media.entity.ts:42",{"_index":760,"title":{},"body":{"classes/Media.html":{}}}],["src/media/media.entity.ts:50",{"_index":757,"title":{},"body":{"classes/Media.html":{}}}],["src/media/media.entity.ts:54",{"_index":758,"title":{},"body":{"classes/Media.html":{}}}],["src/media/media.entity.ts:58",{"_index":752,"title":{},"body":{"classes/Media.html":{}}}],["src/media/media.entity.ts:62",{"_index":745,"title":{},"body":{"classes/Media.html":{}}}],["src/media/media.module.ts",{"_index":801,"title":{},"body":{"modules/MediaModule.html":{}}}],["src/media/media.repository.ts",{"_index":806,"title":{},"body":{"classes/MediaRepository.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/media/media.repository.ts:12",{"_index":807,"title":{},"body":{"classes/MediaRepository.html":{}}}],["src/media/media.service.ts",{"_index":811,"title":{},"body":{"injectables/MediaService.html":{},"coverage.html":{}}}],["src/media/media.service.ts:11",{"_index":813,"title":{},"body":{"injectables/MediaService.html":{}}}],["src/media/media.service.ts:18",{"_index":816,"title":{},"body":{"injectables/MediaService.html":{}}}],["src/media/media.service.ts:22",{"_index":817,"title":{},"body":{"injectables/MediaService.html":{}}}],["src/media/media.service.ts:31",{"_index":814,"title":{},"body":{"injectables/MediaService.html":{}}}],["src/media/media.service.ts:36",{"_index":818,"title":{},"body":{"injectables/MediaService.html":{}}}],["src/media/media.service.ts:45",{"_index":815,"title":{},"body":{"injectables/MediaService.html":{}}}],["src/transactions/dto/create",{"_index":698,"title":{},"body":{"classes/CreateTransactionDto.html":{},"coverage.html":{}}}],["src/transactions/dto/get",{"_index":723,"title":{},"body":{"classes/GetTransactionsFilterDto.html":{},"coverage.html":{}}}],["src/transactions/dto/update",{"_index":953,"title":{},"body":{"classes/UpdateTransactionDto.html":{},"coverage.html":{}}}],["src/transactions/transaction.entity.ts",{"_index":830,"title":{},"body":{"classes/Transaction.html":{},"coverage.html":{}}}],["src/transactions/transaction.entity.ts:23",{"_index":838,"title":{},"body":{"classes/Transaction.html":{}}}],["src/transactions/transaction.entity.ts:26",{"_index":842,"title":{},"body":{"classes/Transaction.html":{}}}],["src/transactions/transaction.entity.ts:29",{"_index":837,"title":{},"body":{"classes/Transaction.html":{}}}],["src/transactions/transaction.entity.ts:33",{"_index":832,"title":{},"body":{"classes/Transaction.html":{}}}],["src/transactions/transaction.entity.ts:36",{"_index":834,"title":{},"body":{"classes/Transaction.html":{}}}],["src/transactions/transaction.entity.ts:39",{"_index":836,"title":{},"body":{"classes/Transaction.html":{}}}],["src/transactions/transaction.entity.ts:42",{"_index":840,"title":{},"body":{"classes/Transaction.html":{}}}],["src/transactions/transaction.entity.ts:46",{"_index":844,"title":{},"body":{"classes/Transaction.html":{}}}],["src/transactions/transaction.entity.ts:49",{"_index":835,"title":{},"body":{"classes/Transaction.html":{}}}],["src/transactions/transaction.entity.ts:52",{"_index":841,"title":{},"body":{"classes/Transaction.html":{}}}],["src/transactions/transaction.entity.ts:55",{"_index":845,"title":{},"body":{"classes/Transaction.html":{}}}],["src/transactions/transaction.entity.ts:64",{"_index":839,"title":{},"body":{"classes/Transaction.html":{}}}],["src/transactions/transaction.entity.ts:68",{"_index":833,"title":{},"body":{"classes/Transaction.html":{}}}],["src/transactions/transaction.entity.ts:72",{"_index":843,"title":{},"body":{"classes/Transaction.html":{}}}],["src/transactions/transaction.repository.ts",{"_index":851,"title":{},"body":{"classes/TransactionRepository.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/transactions/transaction.repository.ts:14",{"_index":856,"title":{},"body":{"classes/TransactionRepository.html":{}}}],["src/transactions/transaction.repository.ts:16",{"_index":860,"title":{},"body":{"classes/TransactionRepository.html":{}}}],["src/transactions/transaction.repository.ts:36",{"_index":858,"title":{},"body":{"classes/TransactionRepository.html":{}}}],["src/transactions/transaction.repository.ts:51",{"_index":863,"title":{},"body":{"classes/TransactionRepository.html":{}}}],["src/transactions/transactions.controller.ts",{"_index":879,"title":{},"body":{"controllers/TransactionsController.html":{},"coverage.html":{}}}],["src/transactions/transactions.controller.ts:41",{"_index":887,"title":{},"body":{"controllers/TransactionsController.html":{}}}],["src/transactions/transactions.controller.ts:50",{"_index":886,"title":{},"body":{"controllers/TransactionsController.html":{}}}],["src/transactions/transactions.controller.ts:59",{"_index":882,"title":{},"body":{"controllers/TransactionsController.html":{}}}],["src/transactions/transactions.controller.ts:69",{"_index":889,"title":{},"body":{"controllers/TransactionsController.html":{}}}],["src/transactions/transactions.controller.ts:78",{"_index":884,"title":{},"body":{"controllers/TransactionsController.html":{}}}],["src/transactions/transactions.module.ts",{"_index":903,"title":{},"body":{"modules/TransactionsModule.html":{}}}],["src/transactions/transactions.service.ts",{"_index":907,"title":{},"body":{"injectables/TransactionsService.html":{},"coverage.html":{}}}],["src/transactions/transactions.service.ts:15",{"_index":909,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["src/transactions/transactions.service.ts:25",{"_index":913,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["src/transactions/transactions.service.ts:29",{"_index":912,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["src/transactions/transactions.service.ts:38",{"_index":910,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["src/transactions/transactions.service.ts:55",{"_index":914,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["src/transactions/transactions.service.ts:94",{"_index":911,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["src/user/currency.enum.ts",{"_index":1187,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/user/get",{"_index":1136,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/user/update",{"_index":962,"title":{},"body":{"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["src/user/user.entity.ts",{"_index":968,"title":{},"body":{"classes/User.html":{},"coverage.html":{}}}],["src/user/user.entity.ts:27",{"_index":983,"title":{},"body":{"classes/User.html":{}}}],["src/user/user.entity.ts:30",{"_index":982,"title":{},"body":{"classes/User.html":{}}}],["src/user/user.entity.ts:34",{"_index":991,"title":{},"body":{"classes/User.html":{}}}],["src/user/user.entity.ts:41",{"_index":978,"title":{},"body":{"classes/User.html":{}}}],["src/user/user.entity.ts:45",{"_index":996,"title":{},"body":{"classes/User.html":{}}}],["src/user/user.entity.ts:48",{"_index":980,"title":{},"body":{"classes/User.html":{}}}],["src/user/user.entity.ts:51",{"_index":993,"title":{},"body":{"classes/User.html":{}}}],["src/user/user.entity.ts:54",{"_index":985,"title":{},"body":{"classes/User.html":{}}}],["src/user/user.entity.ts:57",{"_index":986,"title":{},"body":{"classes/User.html":{}}}],["src/user/user.entity.ts:60",{"_index":976,"title":{},"body":{"classes/User.html":{}}}],["src/user/user.entity.ts:63",{"_index":988,"title":{},"body":{"classes/User.html":{}}}],["src/user/user.entity.ts:66",{"_index":997,"title":{},"body":{"classes/User.html":{}}}],["src/user/user.entity.ts:75",{"_index":979,"title":{},"body":{"classes/User.html":{}}}],["src/user/user.entity.ts:80",{"_index":992,"title":{},"body":{"classes/User.html":{}}}],["src/user/user.entity.ts:84",{"_index":987,"title":{},"body":{"classes/User.html":{}}}],["src/user/user.entity.ts:88",{"_index":994,"title":{},"body":{"classes/User.html":{}}}],["src/user/user.entity.ts:92",{"_index":975,"title":{},"body":{"classes/User.html":{}}}],["src/user/user.entity.ts:94",{"_index":999,"title":{},"body":{"classes/User.html":{}}}],["src/user/user.repository.ts",{"_index":1013,"title":{},"body":{"classes/UserRepository.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/user/user.repository.ts:14",{"_index":1018,"title":{},"body":{"classes/UserRepository.html":{}}}],["src/user/user.repository.ts:18",{"_index":1020,"title":{},"body":{"classes/UserRepository.html":{}}}],["src/user/user.repository.ts:36",{"_index":1024,"title":{},"body":{"classes/UserRepository.html":{}}}],["src/user/user.repository.ts:46",{"_index":1022,"title":{},"body":{"classes/UserRepository.html":{}}}],["src/user/users.controller.ts",{"_index":1044,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/user/users.controller.ts:31",{"_index":1053,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/user/users.controller.ts:37",{"_index":1055,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/user/users.controller.ts:45",{"_index":1050,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/user/users.module.ts",{"_index":1068,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/user/users.service.ts",{"_index":1072,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/user/users.service.ts:15",{"_index":1076,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/user/users.service.ts:26",{"_index":1080,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/user/users.service.ts:30",{"_index":1081,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/user/users.service.ts:34",{"_index":1084,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/user/users.service.ts:38",{"_index":1082,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/user/users.service.ts:75",{"_index":1078,"title":{},"body":{"injectables/UsersService.html":{}}}],["start",{"_index":1207,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":1210,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":1212,"title":{},"body":{"index.html":{}}}],["started",{"_index":1194,"title":{"index.html":{},"license.html":{}},"body":{}}],["statements",{"_index":1116,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":556,"title":{},"body":{"classes/ConfigService.html":{},"classes/UserRepository.html":{}}}],["stay",{"_index":1233,"title":{},"body":{"index.html":{}}}],["still",{"_index":542,"title":{},"body":{"classes/CategoryRepository.html":{},"classes/MediaRepository.html":{}}}],["strategy",{"_index":735,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["string",{"_index":93,"title":{},"body":{"controllers/AuthController.html":{},"classes/AuthCredentialsDto.html":{},"injectables/AuthService.html":{},"classes/Category.html":{},"classes/ConfigService.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateMediaDto.html":{},"classes/CreateTransactionDto.html":{},"classes/GetCategoriesFilterDto.html":{},"classes/GetTransactionsFilterDto.html":{},"interfaces/JwtPayload.html":{},"classes/Media.html":{},"classes/Transaction.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateMediaDto.html":{},"classes/UpdateTransactionDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"injectables/UsersService.html":{},"classes/VerificationTokenEntity.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["string})@transform(undefined)@isoptional()@isuuid",{"_index":663,"title":{},"body":{"classes/CreateCategoryDto.html":{},"classes/CreateTransactionDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateTransactionDto.html":{},"classes/UpdateUserDto.html":{}}}],["subject",{"_index":263,"title":{},"body":{"injectables/AuthService.html":{},"license.html":{}}}],["sublicense",{"_index":1266,"title":{},"body":{"license.html":{}}}],["substantial",{"_index":1278,"title":{},"body":{"license.html":{}}}],["successfully",{"_index":131,"title":{},"body":{"controllers/AuthController.html":{},"injectables/CategoriesService.html":{},"injectables/TransactionsService.html":{},"injectables/UsersService.html":{}}}],["super",{"_index":738,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["support",{"_index":1228,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":1306,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":1177,"title":{},"body":{"dependencies.html":{}}}],["swagger_scheme",{"_index":614,"title":{},"body":{"classes/ConfigService.html":{}}}],["synchronize",{"_index":59,"title":{},"body":{"modules/AppModule.html":{}}}],["table",{"_index":1141,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1140,"title":{},"body":{"coverage.html":{}}}],["template",{"_index":268,"title":{},"body":{"injectables/AuthService.html":{}}}],["test",{"_index":1215,"title":{},"body":{"index.html":{}}}],["test:covdocumentation",{"_index":1216,"title":{},"body":{"index.html":{}}}],["tests",{"_index":1214,"title":{},"body":{"index.html":{}}}],["this._checkforcyclic(id",{"_index":418,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["this._getcategorybyid(id",{"_index":381,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["this._getcategorybyid(parentcategoryid",{"_index":443,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["this.authservice.signin(authcredentialsdto",{"_index":124,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.signup(authcredentialsdto",{"_index":119,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.verifyemail(token",{"_index":129,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.categoriesservice.createcategory(createcategorydto",{"_index":348,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["this.categoriesservice.deletecategory(id",{"_index":351,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["this.categoriesservice.getcategories(filterdto",{"_index":342,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["this.categoriesservice.getcategorybyid(createtransactiondto.categoryid",{"_index":923,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["this.categoriesservice.getcategorybyid(id",{"_index":344,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["this.categoriesservice.getcategorybyid(updatetransactiondto.categoryid",{"_index":933,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["this.categoriesservice.getcategorybyid(updateuserdto.defaultcategoryid",{"_index":1091,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.categoriesservice.updatecategory(id",{"_index":350,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["this.categoryrepository.createcategory(createcategorydto",{"_index":404,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["this.categoryrepository.deletecategory(id",{"_index":434,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["this.categoryrepository.findone",{"_index":436,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["this.categoryrepository.getcategories(filterdto",{"_index":380,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["this.categoryrepository.updatecategory(category",{"_index":425,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["this.configservice.get('email_verification_domain",{"_index":259,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.configservice.get('email_verification_from",{"_index":262,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.configservice.get('email_verification_host",{"_index":260,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.configservice.get('email_verification_hostname",{"_index":274,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.configservice.get('mailgun_api_key",{"_index":257,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.configservice.isemailverificationenabled",{"_index":231,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["this.delete",{"_index":540,"title":{},"body":{"classes/CategoryRepository.html":{},"classes/MediaRepository.html":{}}}],["this.envconfig",{"_index":602,"title":{},"body":{"classes/ConfigService.html":{}}}],["this.envconfig[key",{"_index":657,"title":{},"body":{"classes/ConfigService.html":{}}}],["this.find",{"_index":529,"title":{},"body":{"classes/CategoryRepository.html":{},"classes/TransactionRepository.html":{}}}],["this.findone",{"_index":1038,"title":{},"body":{"classes/UserRepository.html":{}}}],["this.getcategorybyid(createcategorydto.parentcategoryid",{"_index":400,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["this.getcategorybyid(id",{"_index":405,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["this.getcategorybyid(updatecategorydto.parentcategoryid",{"_index":416,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["this.getmediabyid(id",{"_index":824,"title":{},"body":{"injectables/MediaService.html":{}}}],["this.gettransactionbyid(id",{"_index":926,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["this.jwtservice.sign(payload",{"_index":241,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.logger.debug(`genereated",{"_index":242,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.logger.debug(`successfully",{"_index":276,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.logger.error('error",{"_index":280,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.logger.error(`category",{"_index":429,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["this.logger.error(`could",{"_index":444,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["this.logger.error(`fail",{"_index":135,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.logger.error(`failed",{"_index":530,"title":{},"body":{"classes/CategoryRepository.html":{},"classes/TransactionRepository.html":{}}}],["this.logger.error(`transaction",{"_index":937,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["this.logger.error(`user",{"_index":1099,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.logger.verbose(`user",{"_index":338,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/MediaController.html":{},"controllers/TransactionsController.html":{}}}],["this.logger.warn(`createcategory",{"_index":401,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["this.logger.warn(`createtransaction",{"_index":924,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["this.logger.warn(`updatecategory",{"_index":417,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["this.logger.warn(`updatetransaction",{"_index":934,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["this.logger.warn(`updateuser",{"_index":1094,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.mediarepository.deletemedia(id",{"_index":829,"title":{},"body":{"injectables/MediaService.html":{}}}],["this.mediarepository.find",{"_index":820,"title":{},"body":{"injectables/MediaService.html":{}}}],["this.mediarepository.findone",{"_index":821,"title":{},"body":{"injectables/MediaService.html":{}}}],["this.mediaservice.createmedia(createmediadto",{"_index":795,"title":{},"body":{"controllers/MediaController.html":{}}}],["this.mediaservice.deletemedia(id",{"_index":797,"title":{},"body":{"controllers/MediaController.html":{}}}],["this.mediaservice.deletemedia(imageid",{"_index":435,"title":{},"body":{"injectables/CategoriesService.html":{},"injectables/TransactionsService.html":{}}}],["this.mediaservice.deletemedia(previousimageid",{"_index":428,"title":{},"body":{"injectables/CategoriesService.html":{},"injectables/TransactionsService.html":{},"injectables/UsersService.html":{}}}],["this.mediaservice.getallmedia(user",{"_index":792,"title":{},"body":{"controllers/MediaController.html":{}}}],["this.mediaservice.getmediabyid(createcategorydto.imageid",{"_index":398,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["this.mediaservice.getmediabyid(createtransactiondto.imageid",{"_index":921,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["this.mediaservice.getmediabyid(id",{"_index":793,"title":{},"body":{"controllers/MediaController.html":{}}}],["this.mediaservice.getmediabyid(updatecategorydto.imageid",{"_index":414,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["this.mediaservice.getmediabyid(updatetransactiondto.imageid",{"_index":931,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["this.mediaservice.getmediabyid(updateuserdto.pictureid",{"_index":1093,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.mediaservice.updatemedia(id",{"_index":796,"title":{},"body":{"controllers/MediaController.html":{}}}],["this.password",{"_index":1011,"title":{},"body":{"classes/User.html":{}}}],["this.savetokenandsendemailverification(authcredentialsdto",{"_index":232,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.transactionrepository.createtransaction(createtransactiondto",{"_index":925,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["this.transactionrepository.delete",{"_index":938,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["this.transactionrepository.findone",{"_index":918,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["this.transactionrepository.gettransactions(filterdto",{"_index":917,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["this.transactionrepository.updatetransaction(transaction",{"_index":935,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["this.transactionsservice.createtransaction(createtransactiondto",{"_index":897,"title":{},"body":{"controllers/TransactionsController.html":{}}}],["this.transactionsservice.deletetransaction(id",{"_index":899,"title":{},"body":{"controllers/TransactionsController.html":{}}}],["this.transactionsservice.gettransactionbyid(id",{"_index":896,"title":{},"body":{"controllers/TransactionsController.html":{}}}],["this.transactionsservice.gettransactions(filterdto",{"_index":895,"title":{},"body":{"controllers/TransactionsController.html":{}}}],["this.transactionsservice.updatetransaction(id",{"_index":898,"title":{},"body":{"controllers/TransactionsController.html":{}}}],["this.userrepository.delete",{"_index":1100,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.findone",{"_index":1086,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.signup(authcredentialsdto",{"_index":1087,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.updateuser(updateuserdto",{"_index":1097,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.validatepassword(authcrendentialsdto",{"_index":1088,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersservice.deleteuser(user.id",{"_index":1063,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findone(email",{"_index":742,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["this.usersservice.signup(authcredentialsdto",{"_index":228,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.updateuser(updateuserdto",{"_index":1061,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.validatepassword(authcrendentialsdto",{"_index":234,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.verificationtokenrepository.findone",{"_index":245,"title":{},"body":{"injectables/AuthService.html":{}}}],["those",{"_index":383,"title":{},"body":{"injectables/CategoriesService.html":{},"injectables/TransactionsService.html":{},"injectables/UsersService.html":{}}}],["throw",{"_index":236,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CategoriesService.html":{},"classes/CategoryRepository.html":{},"classes/ConfigService.html":{},"injectables/JwtStrategy.html":{},"classes/MediaRepository.html":{},"injectables/MediaService.html":{},"classes/TransactionRepository.html":{},"injectables/TransactionsService.html":{},"classes/UserRepository.html":{},"injectables/UsersService.html":{}}}],["title",{"_index":455,"title":{},"body":{"classes/Category.html":{},"classes/CategoryRepository.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateMediaDto.html":{},"classes/CreateTransactionDto.html":{},"classes/Media.html":{},"classes/Transaction.html":{},"classes/TransactionRepository.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateMediaDto.html":{},"classes/UpdateTransactionDto.html":{}}}],["todo",{"_index":392,"title":{},"body":{"injectables/CategoriesService.html":{},"injectables/TransactionsService.html":{},"injectables/UsersService.html":{}}}],["token",{"_index":96,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/VerificationTokenEntity.html":{}}}],["tort",{"_index":1300,"title":{},"body":{"license.html":{}}}],["touch",{"_index":1234,"title":{},"body":{"index.html":{}}}],["transaction",{"_index":484,"title":{"classes/Transaction.html":{}},"body":{"classes/Category.html":{},"classes/Media.html":{},"classes/Transaction.html":{},"classes/TransactionRepository.html":{},"controllers/TransactionsController.html":{},"injectables/TransactionsService.html":{},"classes/User.html":{},"coverage.html":{}}}],["transaction.category",{"_index":509,"title":{},"body":{"classes/Category.html":{}}}],["transaction.dto",{"_index":865,"title":{},"body":{"classes/TransactionRepository.html":{},"controllers/TransactionsController.html":{},"injectables/TransactionsService.html":{}}}],["transaction.dto.ts",{"_index":699,"title":{},"body":{"classes/CreateTransactionDto.html":{},"classes/UpdateTransactionDto.html":{},"coverage.html":{}}}],["transaction.dto.ts:12",{"_index":710,"title":{},"body":{"classes/CreateTransactionDto.html":{}}}],["transaction.dto.ts:13",{"_index":960,"title":{},"body":{"classes/UpdateTransactionDto.html":{}}}],["transaction.dto.ts:20",{"_index":708,"title":{},"body":{"classes/CreateTransactionDto.html":{}}}],["transaction.dto.ts:21",{"_index":958,"title":{},"body":{"classes/UpdateTransactionDto.html":{}}}],["transaction.dto.ts:27",{"_index":703,"title":{},"body":{"classes/CreateTransactionDto.html":{}}}],["transaction.dto.ts:29",{"_index":955,"title":{},"body":{"classes/UpdateTransactionDto.html":{}}}],["transaction.dto.ts:34",{"_index":706,"title":{},"body":{"classes/CreateTransactionDto.html":{}}}],["transaction.dto.ts:36",{"_index":957,"title":{},"body":{"classes/UpdateTransactionDto.html":{}}}],["transaction.dto.ts:40",{"_index":709,"title":{},"body":{"classes/CreateTransactionDto.html":{}}}],["transaction.dto.ts:42",{"_index":959,"title":{},"body":{"classes/UpdateTransactionDto.html":{}}}],["transaction.dto.ts:46",{"_index":704,"title":{},"body":{"classes/CreateTransactionDto.html":{}}}],["transaction.dto.ts:48",{"_index":956,"title":{},"body":{"classes/UpdateTransactionDto.html":{}}}],["transaction.entity",{"_index":864,"title":{},"body":{"classes/TransactionRepository.html":{},"controllers/TransactionsController.html":{},"injectables/TransactionsService.html":{}}}],["transaction.id",{"_index":871,"title":{},"body":{"classes/TransactionRepository.html":{}}}],["transaction.image",{"_index":765,"title":{},"body":{"classes/Media.html":{}}}],["transaction.imageid",{"_index":928,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["transaction.repository",{"_index":905,"title":{},"body":{"modules/TransactionsModule.html":{},"injectables/TransactionsService.html":{}}}],["transaction.save",{"_index":869,"title":{},"body":{"classes/TransactionRepository.html":{}}}],["transaction.user",{"_index":1008,"title":{},"body":{"classes/User.html":{}}}],["transactionrepository",{"_index":850,"title":{"classes/TransactionRepository.html":{}},"body":{"classes/TransactionRepository.html":{},"modules/TransactionsModule.html":{},"injectables/TransactionsService.html":{},"coverage.html":{}}}],["transactionrepository.updatetransaction",{"_index":927,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["transactions",{"_index":456,"title":{},"body":{"classes/Category.html":{},"classes/GetTransactionsFilterDto.html":{},"classes/TransactionRepository.html":{},"controllers/TransactionsController.html":{},"injectables/TransactionsService.html":{},"classes/User.html":{},"coverage.html":{}}}],["transactions.controller",{"_index":904,"title":{},"body":{"modules/TransactionsModule.html":{}}}],["transactions.service",{"_index":891,"title":{},"body":{"controllers/TransactionsController.html":{},"modules/TransactionsModule.html":{}}}],["transactions/transaction.entity",{"_index":503,"title":{},"body":{"classes/Category.html":{},"classes/Media.html":{},"classes/User.html":{}}}],["transactions/transactions.module",{"_index":32,"title":{},"body":{"modules/AppModule.html":{}}}],["transactionscontroller",{"_index":878,"title":{"controllers/TransactionsController.html":{}},"body":{"controllers/TransactionsController.html":{},"modules/TransactionsModule.html":{},"coverage.html":{}}}],["transactionsmodule",{"_index":16,"title":{"modules/TransactionsModule.html":{}},"body":{"modules/AppModule.html":{},"modules/TransactionsModule.html":{},"modules.html":{},"overview.html":{}}}],["transactionsservice",{"_index":890,"title":{"injectables/TransactionsService.html":{}},"body":{"controllers/TransactionsController.html":{},"modules/TransactionsModule.html":{},"injectables/TransactionsService.html":{},"coverage.html":{},"overview.html":{}}}],["transform",{"_index":118,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CategoriesController.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateTransactionDto.html":{},"controllers/MediaController.html":{},"classes/Transaction.html":{},"controllers/TransactionsController.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateMediaDto.html":{},"classes/UpdateTransactionDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{}}}],["transform(amount",{"_index":714,"title":{},"body":{"classes/CreateTransactionDto.html":{},"classes/Transaction.html":{},"classes/UpdateTransactionDto.html":{}}}],["transform(categoryid",{"_index":675,"title":{},"body":{"classes/CreateCategoryDto.html":{},"classes/CreateTransactionDto.html":{},"classes/UpdateTransactionDto.html":{},"classes/UpdateUserDto.html":{}}}],["transform(date",{"_index":717,"title":{},"body":{"classes/CreateTransactionDto.html":{},"classes/UpdateTransactionDto.html":{}}}],["transform(description",{"_index":672,"title":{},"body":{"classes/CreateCategoryDto.html":{},"classes/CreateTransactionDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateMediaDto.html":{},"classes/UpdateTransactionDto.html":{}}}],["transform(imageid",{"_index":674,"title":{},"body":{"classes/CreateCategoryDto.html":{},"classes/CreateTransactionDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateTransactionDto.html":{}}}],["transform(parentcategoryid",{"_index":945,"title":{},"body":{"classes/UpdateCategoryDto.html":{}}}],["transform(undefined)@column('decimal",{"_index":831,"title":{},"body":{"classes/Transaction.html":{}}}],["transformer",{"_index":506,"title":{},"body":{"classes/Category.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateTransactionDto.html":{},"classes/Media.html":{},"classes/Transaction.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateMediaDto.html":{},"classes/UpdateTransactionDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"dependencies.html":{}}}],["true",{"_index":117,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"classes/Category.html":{},"classes/Media.html":{},"controllers/MediaController.html":{},"classes/Transaction.html":{},"controllers/TransactionsController.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"classes/VerificationTokenEntity.html":{}}}],["true})@joincolumn({name",{"_index":1108,"title":{},"body":{"classes/VerificationTokenEntity.html":{}}}],["try",{"_index":127,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CategoriesService.html":{},"classes/CategoryRepository.html":{},"classes/ConfigService.html":{},"classes/MediaRepository.html":{},"classes/TransactionRepository.html":{},"injectables/TransactionsService.html":{},"classes/UserRepository.html":{},"injectables/UsersService.html":{}}}],["trying",{"_index":281,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CategoriesService.html":{}}}],["tsconfig.json",{"_index":1223,"title":{},"body":{"index.html":{}}}],["type",{"_index":44,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"classes/AuthCredentialsDto.html":{},"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"classes/Category.html":{},"classes/CategoryRepository.html":{},"classes/ConfigService.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateMediaDto.html":{},"classes/CreateTransactionDto.html":{},"classes/GetCategoriesFilterDto.html":{},"classes/GetTransactionsFilterDto.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/Media.html":{},"controllers/MediaController.html":{},"classes/MediaRepository.html":{},"injectables/MediaService.html":{},"classes/Transaction.html":{},"classes/TransactionRepository.html":{},"controllers/TransactionsController.html":{},"injectables/TransactionsService.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateMediaDto.html":{},"classes/UpdateTransactionDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/VerificationTokenEntity.html":{},"coverage.html":{},"miscellaneous/typealiases.html":{},"miscellaneous/variables.html":{}}}],["type.enum",{"_index":692,"title":{},"body":{"classes/CreateMediaDto.html":{},"classes/Media.html":{},"classes/UpdateMediaDto.html":{}}}],["type.enum.ts",{"_index":1186,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["typealiases",{"_index":1310,"title":{"miscellaneous/typealiases.html":{}},"body":{}}],["typeorm",{"_index":221,"title":{},"body":{"injectables/AuthService.html":{},"classes/Category.html":{},"classes/CategoryRepository.html":{},"classes/Media.html":{},"classes/MediaRepository.html":{},"classes/Transaction.html":{},"classes/TransactionRepository.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"classes/VerificationTokenEntity.html":{},"dependencies.html":{}}}],["typeormmodule",{"_index":28,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoriesModule.html":{},"modules/MediaModule.html":{},"modules/TransactionsModule.html":{},"modules/UsersModule.html":{}}}],["typeormmodule.forfeature([categoryrepository",{"_index":360,"title":{},"body":{"modules/CategoriesModule.html":{}}}],["typeormmodule.forfeature([mediarepository",{"_index":805,"title":{},"body":{"modules/MediaModule.html":{}}}],["typeormmodule.forfeature([transactionrepository",{"_index":906,"title":{},"body":{"modules/TransactionsModule.html":{}}}],["typeormmodule.forfeature([userrepository",{"_index":1071,"title":{},"body":{"modules/UsersModule.html":{}}}],["typeormmodule.forfeature([verificationtokenentity",{"_index":179,"title":{},"body":{"modules/AuthModule.html":{}}}],["typeormmodule.forroot(aaa",{"_index":39,"title":{},"body":{"modules/AppModule.html":{}}}],["typeormmodule.forrootasync",{"_index":40,"title":{},"body":{"modules/AppModule.html":{}}}],["typeormmoduleoptions",{"_index":29,"title":{},"body":{"modules/AppModule.html":{}}}],["ui",{"_index":1178,"title":{},"body":{"dependencies.html":{}}}],["unauthorizedexception",{"_index":101,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["unauthorizedexception('email",{"_index":238,"title":{},"body":{"injectables/AuthService.html":{}}}],["unauthorizedexception('invalid",{"_index":122,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["undefined",{"_index":460,"title":{},"body":{"classes/Category.html":{},"classes/ConfigService.html":{},"classes/Media.html":{},"classes/Transaction.html":{},"classes/User.html":{},"classes/VerificationTokenEntity.html":{}}}],["undefined)@joincolumn",{"_index":471,"title":{},"body":{"classes/Category.html":{},"classes/Transaction.html":{},"classes/User.html":{}}}],["undefined})@isoptional()@isin(undefined",{"_index":686,"title":{},"body":{"classes/CreateMediaDto.html":{},"classes/UpdateMediaDto.html":{}}}],["unique",{"_index":1000,"title":{},"body":{"classes/User.html":{}}}],["unique(['email",{"_index":1004,"title":{},"body":{"classes/User.html":{}}}],["unit",{"_index":1213,"title":{},"body":{"index.html":{}}}],["update",{"_index":1028,"title":{},"body":{"classes/UserRepository.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["updatecategory",{"_index":290,"title":{},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"classes/CategoryRepository.html":{}}}],["updatecategory(category",{"_index":520,"title":{},"body":{"classes/CategoryRepository.html":{}}}],["updatecategory(id",{"_index":305,"title":{},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{}}}],["updatecategorydto",{"_index":306,"title":{"classes/UpdateCategoryDto.html":{}},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"classes/CategoryRepository.html":{},"classes/UpdateCategoryDto.html":{},"coverage.html":{}}}],["updatecategorydto.hasownproperty('imageid",{"_index":426,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["updatecategorydto.imageid",{"_index":413,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["updatecategorydto.parentcategoryid",{"_index":415,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["updated",{"_index":430,"title":{},"body":{"injectables/CategoriesService.html":{},"injectables/TransactionsService.html":{},"injectables/UsersService.html":{}}}],["updatedatecolumn",{"_index":476,"title":{},"body":{"classes/Category.html":{},"classes/Media.html":{},"classes/Transaction.html":{},"classes/User.html":{},"classes/VerificationTokenEntity.html":{}}}],["updatedcategory",{"_index":424,"title":{},"body":{"injectables/CategoriesService.html":{},"classes/CategoryRepository.html":{}}}],["updatedcategory.save",{"_index":536,"title":{},"body":{"classes/CategoryRepository.html":{}}}],["updatedmedia",{"_index":826,"title":{},"body":{"injectables/MediaService.html":{}}}],["updatedmedia.save",{"_index":828,"title":{},"body":{"injectables/MediaService.html":{}}}],["updatedtransaction",{"_index":875,"title":{},"body":{"classes/TransactionRepository.html":{},"injectables/TransactionsService.html":{}}}],["updatedtransaction.save",{"_index":877,"title":{},"body":{"classes/TransactionRepository.html":{}}}],["updateduser",{"_index":1040,"title":{},"body":{"classes/UserRepository.html":{},"injectables/UsersService.html":{}}}],["updateduser.save",{"_index":1042,"title":{},"body":{"classes/UserRepository.html":{}}}],["updatemedia",{"_index":773,"title":{},"body":{"controllers/MediaController.html":{},"injectables/MediaService.html":{}}}],["updatemedia(id",{"_index":782,"title":{},"body":{"controllers/MediaController.html":{},"injectables/MediaService.html":{}}}],["updatemediadto",{"_index":783,"title":{"classes/UpdateMediaDto.html":{}},"body":{"controllers/MediaController.html":{},"injectables/MediaService.html":{},"classes/UpdateMediaDto.html":{},"coverage.html":{}}}],["updatetransaction",{"_index":854,"title":{},"body":{"classes/TransactionRepository.html":{},"controllers/TransactionsController.html":{},"injectables/TransactionsService.html":{}}}],["updatetransaction(id",{"_index":888,"title":{},"body":{"controllers/TransactionsController.html":{},"injectables/TransactionsService.html":{}}}],["updatetransaction(transaction",{"_index":861,"title":{},"body":{"classes/TransactionRepository.html":{}}}],["updatetransactiondto",{"_index":862,"title":{"classes/UpdateTransactionDto.html":{}},"body":{"classes/TransactionRepository.html":{},"controllers/TransactionsController.html":{},"injectables/TransactionsService.html":{},"classes/UpdateTransactionDto.html":{},"coverage.html":{}}}],["updatetransactiondto.categoryid",{"_index":932,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["updatetransactiondto.hasownproperty('imageid",{"_index":936,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["updatetransactiondto.imageid",{"_index":930,"title":{},"body":{"injectables/TransactionsService.html":{}}}],["updateuser",{"_index":1015,"title":{},"body":{"classes/UserRepository.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["updateuser(updateuserdto",{"_index":1021,"title":{},"body":{"classes/UserRepository.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["updateuserdto",{"_index":961,"title":{"classes/UpdateUserDto.html":{}},"body":{"classes/UpdateUserDto.html":{},"classes/UserRepository.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["updateuserdto.defaultcategoryid",{"_index":1090,"title":{},"body":{"injectables/UsersService.html":{}}}],["updateuserdto.hasownproperty('pictureid",{"_index":1098,"title":{},"body":{"injectables/UsersService.html":{}}}],["updateuserdto.pictureid",{"_index":1092,"title":{},"body":{"injectables/UsersService.html":{}}}],["url",{"_index":680,"title":{},"body":{"classes/CreateMediaDto.html":{},"classes/Media.html":{},"classes/UpdateMediaDto.html":{}}}],["use",{"_index":1261,"title":{},"body":{"license.html":{}}}],["usefactory",{"_index":41,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["useguards",{"_index":314,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/MediaController.html":{},"controllers/TransactionsController.html":{},"controllers/UsersController.html":{}}}],["useguards(authguard",{"_index":334,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/MediaController.html":{},"controllers/TransactionsController.html":{},"controllers/UsersController.html":{}}}],["useinterceptors",{"_index":315,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/MediaController.html":{},"controllers/TransactionsController.html":{},"controllers/UsersController.html":{}}}],["useinterceptors(classserializerinterceptor",{"_index":335,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/MediaController.html":{},"controllers/TransactionsController.html":{},"controllers/UsersController.html":{}}}],["usepipes",{"_index":316,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/MediaController.html":{},"controllers/TransactionsController.html":{},"controllers/UsersController.html":{}}}],["usepipes(new",{"_index":345,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/MediaController.html":{},"controllers/TransactionsController.html":{},"controllers/UsersController.html":{}}}],["user",{"_index":233,"title":{"classes/User.html":{}},"body":{"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"classes/Category.html":{},"classes/CategoryRepository.html":{},"injectables/JwtStrategy.html":{},"classes/Media.html":{},"controllers/MediaController.html":{},"classes/MediaRepository.html":{},"injectables/MediaService.html":{},"classes/Transaction.html":{},"classes/TransactionRepository.html":{},"controllers/TransactionsController.html":{},"injectables/TransactionsService.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/VerificationTokenEntity.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["user.categories",{"_index":510,"title":{},"body":{"classes/Category.html":{}}}],["user.decorator",{"_index":329,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/MediaController.html":{},"controllers/TransactionsController.html":{},"controllers/UsersController.html":{}}}],["user.decorator.ts",{"_index":1137,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["user.defaultcategory",{"_index":508,"title":{},"body":{"classes/Category.html":{}}}],["user.dto",{"_index":1029,"title":{},"body":{"classes/UserRepository.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["user.dto.ts",{"_index":963,"title":{},"body":{"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:11",{"_index":966,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:17",{"_index":967,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.email",{"_index":235,"title":{},"body":{"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"classes/CategoryRepository.html":{},"controllers/MediaController.html":{},"classes/TransactionRepository.html":{},"controllers/TransactionsController.html":{}}}],["user.entity",{"_index":1025,"title":{},"body":{"classes/UserRepository.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["user.id",{"_index":437,"title":{},"body":{"injectables/CategoriesService.html":{},"classes/CategoryRepository.html":{},"classes/MediaRepository.html":{},"injectables/MediaService.html":{},"classes/TransactionRepository.html":{},"injectables/TransactionsService.html":{},"classes/VerificationTokenEntity.html":{}}}],["user.media",{"_index":763,"title":{},"body":{"classes/Media.html":{}}}],["user.picture",{"_index":764,"title":{},"body":{"classes/Media.html":{}}}],["user.pictureid",{"_index":1096,"title":{},"body":{"injectables/UsersService.html":{}}}],["user.repository",{"_index":1070,"title":{},"body":{"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["user.save",{"_index":1035,"title":{},"body":{"classes/UserRepository.html":{}}}],["user.transactions",{"_index":849,"title":{},"body":{"classes/Transaction.html":{}}}],["user.validatepassword(password",{"_index":1039,"title":{},"body":{"classes/UserRepository.html":{}}}],["user.verified",{"_index":237,"title":{},"body":{"injectables/AuthService.html":{}}}],["user/get",{"_index":328,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/MediaController.html":{},"controllers/TransactionsController.html":{}}}],["user/user.entity",{"_index":326,"title":{},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"classes/Category.html":{},"classes/CategoryRepository.html":{},"injectables/JwtStrategy.html":{},"classes/Media.html":{},"controllers/MediaController.html":{},"classes/MediaRepository.html":{},"injectables/MediaService.html":{},"classes/Transaction.html":{},"classes/TransactionRepository.html":{},"controllers/TransactionsController.html":{},"injectables/TransactionsService.html":{},"classes/VerificationTokenEntity.html":{}}}],["user/users.module",{"_index":35,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["user/users.service",{"_index":217,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["userfordefaultcategory",{"_index":457,"title":{},"body":{"classes/Category.html":{}}}],["userforpicture",{"_index":744,"title":{},"body":{"classes/Media.html":{}}}],["userid",{"_index":202,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CategoriesService.html":{},"classes/Category.html":{},"classes/CategoryRepository.html":{},"classes/Media.html":{},"classes/MediaRepository.html":{},"injectables/MediaService.html":{},"classes/Transaction.html":{},"classes/TransactionRepository.html":{},"injectables/TransactionsService.html":{},"classes/VerificationTokenEntity.html":{}}}],["username",{"_index":50,"title":{},"body":{"modules/AppModule.html":{}}}],["userrepository",{"_index":1012,"title":{"classes/UserRepository.html":{}},"body":{"classes/UserRepository.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["userrepository._hashpassword(password",{"_index":1034,"title":{},"body":{"classes/UserRepository.html":{}}}],["users",{"_index":1045,"title":{},"body":{"controllers/UsersController.html":{}}}],["users.controller",{"_index":1069,"title":{},"body":{"modules/UsersModule.html":{}}}],["users.service",{"_index":1056,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["userscontroller",{"_index":1043,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["usersmodule",{"_index":17,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersservice",{"_index":197,"title":{"injectables/UsersService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["usevalue",{"_index":551,"title":{},"body":{"modules/ConfigModule.html":{}}}],["uuid",{"_index":203,"title":{},"body":{"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"classes/Category.html":{},"classes/CategoryRepository.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateTransactionDto.html":{},"classes/Media.html":{},"controllers/MediaController.html":{},"classes/MediaRepository.html":{},"injectables/MediaService.html":{},"classes/Transaction.html":{},"controllers/TransactionsController.html":{},"injectables/TransactionsService.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateTransactionDto.html":{},"classes/User.html":{},"injectables/UsersService.html":{},"classes/VerificationTokenEntity.html":{},"dependencies.html":{}}}],["validate",{"_index":136,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtStrategy.html":{}}}],["validate(payload",{"_index":731,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validated",{"_index":579,"title":{},"body":{"classes/ConfigService.html":{}}}],["validatedenvconfig",{"_index":652,"title":{},"body":{"classes/ConfigService.html":{}}}],["validateinput",{"_index":559,"title":{},"body":{"classes/ConfigService.html":{}}}],["validateinput(envconfig",{"_index":575,"title":{},"body":{"classes/ConfigService.html":{}}}],["validatepassword",{"_index":974,"title":{},"body":{"classes/User.html":{},"classes/UserRepository.html":{},"injectables/UsersService.html":{}}}],["validatepassword(authcredentialsdto",{"_index":1023,"title":{},"body":{"classes/UserRepository.html":{}}}],["validatepassword(authcrendentialsdto",{"_index":1083,"title":{},"body":{"injectables/UsersService.html":{}}}],["validatepassword(password",{"_index":998,"title":{},"body":{"classes/User.html":{}}}],["validation",{"_index":655,"title":{},"body":{"classes/ConfigService.html":{}}}],["validation_schema",{"_index":561,"title":{},"body":{"classes/ConfigService.html":{}}}],["validationpipe",{"_index":102,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CategoriesController.html":{},"controllers/MediaController.html":{},"controllers/TransactionsController.html":{},"controllers/UsersController.html":{}}}],["validator",{"_index":159,"title":{},"body":{"classes/AuthCredentialsDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateMediaDto.html":{},"classes/CreateTransactionDto.html":{},"classes/GetCategoriesFilterDto.html":{},"classes/GetTransactionsFilterDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateMediaDto.html":{},"classes/UpdateTransactionDto.html":{},"classes/UpdateUserDto.html":{},"dependencies.html":{}}}],["value",{"_index":211,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CategoriesService.html":{},"classes/CategoryRepository.html":{},"classes/ConfigService.html":{},"classes/TransactionRepository.html":{},"injectables/TransactionsService.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["values",{"_index":583,"title":{},"body":{"classes/ConfigService.html":{}}}],["variable",{"_index":1125,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":271,"title":{"miscellaneous/variables.html":{}},"body":{"injectables/AuthService.html":{},"classes/ConfigService.html":{},"miscellaneous/variables.html":{}}}],["verification",{"_index":278,"title":{},"body":{"injectables/AuthService.html":{}}}],["verification.token.entity",{"_index":178,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{}}}],["verificationenabled",{"_index":1019,"title":{},"body":{"classes/UserRepository.html":{}}}],["verificationtoken",{"_index":244,"title":{},"body":{"injectables/AuthService.html":{}}}],["verificationtoken.remove",{"_index":251,"title":{},"body":{"injectables/AuthService.html":{}}}],["verificationtoken.save",{"_index":255,"title":{},"body":{"injectables/AuthService.html":{}}}],["verificationtoken.user",{"_index":246,"title":{},"body":{"injectables/AuthService.html":{}}}],["verificationtoken.user.save",{"_index":250,"title":{},"body":{"injectables/AuthService.html":{}}}],["verificationtoken.user.verified",{"_index":249,"title":{},"body":{"injectables/AuthService.html":{}}}],["verificationtokenentity",{"_index":177,"title":{"classes/VerificationTokenEntity.html":{}},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/VerificationTokenEntity.html":{},"coverage.html":{}}}],["verificationtokenrepository",{"_index":200,"title":{},"body":{"injectables/AuthService.html":{}}}],["verified",{"_index":132,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/User.html":{},"classes/UserRepository.html":{}}}],["verify",{"_index":265,"title":{},"body":{"injectables/AuthService.html":{}}}],["verifyemail",{"_index":77,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["verifyemail(token",{"_index":92,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["verifying",{"_index":140,"title":{},"body":{"controllers/AuthController.html":{}}}],["version",{"_index":458,"title":{},"body":{"classes/Category.html":{},"classes/Media.html":{},"classes/Transaction.html":{},"classes/User.html":{},"classes/VerificationTokenEntity.html":{}}}],["versioncolumn",{"_index":494,"title":{},"body":{"classes/Category.html":{},"classes/Media.html":{},"classes/Transaction.html":{},"classes/User.html":{},"classes/VerificationTokenEntity.html":{}}}],["video",{"_index":695,"title":{},"body":{"classes/CreateMediaDto.html":{},"classes/UpdateMediaDto.html":{},"miscellaneous/enumerations.html":{}}}],["warranties",{"_index":1284,"title":{},"body":{"license.html":{}}}],["warranty",{"_index":1280,"title":{},"body":{"license.html":{}}}],["watch",{"_index":1208,"title":{},"body":{"index.html":{}}}],["weak",{"_index":151,"title":{},"body":{"classes/AuthCredentialsDto.html":{}}}],["website",{"_index":1238,"title":{},"body":{"index.html":{}}}],["whether",{"_index":1297,"title":{},"body":{"license.html":{}}}],["whitelist",{"_index":116,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CategoriesController.html":{},"controllers/MediaController.html":{},"controllers/TransactionsController.html":{},"controllers/UsersController.html":{}}}],["withh",{"_index":431,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["without",{"_index":1257,"title":{},"body":{"license.html":{}}}],["year",{"_index":1243,"title":{},"body":{"license.html":{}}}],["z",{"_index":149,"title":{},"body":{"classes/AuthCredentialsDto.html":{}}}],["z])(?=.*[a",{"_index":148,"title":{},"body":{"classes/AuthCredentialsDto.html":{}}}],["zoom",{"_index":18,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoriesModule.html":{},"modules/ConfigModule.html":{},"modules/MediaModule.html":{},"modules/TransactionsModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nCategoriesModule\n\nCategoriesModule\n\nAppModule -->\n\nCategoriesModule->AppModule\n\n\n\n\n\nConfigModule\n\nConfigModule\n\nAppModule -->\n\nConfigModule->AppModule\n\n\n\n\n\nMediaModule\n\nMediaModule\n\nAppModule -->\n\nMediaModule->AppModule\n\n\n\n\n\nTransactionsModule\n\nTransactionsModule\n\nAppModule -->\n\nTransactionsModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            CategoriesModule\n                        \n                        \n                            ConfigModule\n                        \n                        \n                            MediaModule\n                        \n                        \n                            TransactionsModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common'\nimport { TypeOrmModule, TypeOrmModuleOptions } from '@nestjs/typeorm'\nimport { AuthModule } from './auth/auth.module'\nimport { TransactionsModule } from './transactions/transactions.module'\nimport { CategoriesModule } from './categories/categories.module'\nimport { MediaModule } from './media/media.module'\nimport { UsersModule } from './user/users.module'\nimport { ConfigModule } from './config/config.module'\nimport { ConfigService } from './config/config.service'\n\n@Module({\n  imports: [\n    // TypeOrmModule.forRoot(aaa),\n    TypeOrmModule.forRootAsync({\n      imports: [ConfigModule],\n      useFactory: async (configService: ConfigService) => {\n        return {\n          type: configService.get('DB_TYPE'),\n          host: configService.get('DB_HOST'),\n          port: configService.get('DB_PORT'),\n          username: configService.get('DB_USERNAME'),\n          password: configService.get('DB_PASSWORD'),\n          database: configService.get('DB_DATABASE_NAME'),\n          entities: [__dirname + '/**/*.entity.{js,ts}'],\n          synchronize: configService.isDbSynchronized,\n        } as TypeOrmModuleOptions\n      },\n      inject: [ConfigService],\n    }),\n    ConfigModule,\n    AuthModule,\n    TransactionsModule,\n    CategoriesModule,\n    MediaModule,\n    UsersModule,\n  ],\n})\nexport class AppModule {\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                signIn\n                            \n                            \n                                signUp\n                            \n                            \n                                    Async\n                                verifyEmail\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            signIn\n                        \n                        \n                    \n                \n            \n            \n                \nsignIn(authCredentialsDto: AuthCredentialsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/signin')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    authCredentialsDto\n                                    \n                                                AuthCredentialsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            signUp\n                        \n                        \n                    \n                \n            \n            \n                \nsignUp(authCredentialsDto: AuthCredentialsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/signup')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    authCredentialsDto\n                                    \n                                                AuthCredentialsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            verifyEmail\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    verifyEmail(token: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/email/verify/:token')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    token\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Get, Logger, Param, Post, UnauthorizedException, ValidationPipe } from '@nestjs/common'\nimport { AuthCredentialsDto } from './dto/auth-credentials.dto'\nimport { AuthService } from './auth.service'\nimport { ApiUseTags } from '@nestjs/swagger'\n\n@ApiUseTags('auth')\n@Controller('auth')\nexport class AuthController {\n\n  private readonly logger = new Logger()\n\n  constructor(private readonly authService: AuthService) {\n  }\n\n  @Post('/signup')\n  signUp(@Body(new ValidationPipe({ whitelist: true, transform: true })) authCredentialsDto: AuthCredentialsDto): Promise {\n    return this.authService.signUp(authCredentialsDto)\n  }\n\n  @Post('/signin')\n  signIn(\n    @Body(new ValidationPipe(\n      {\n        whitelist: true,\n        transform: true,\n        exceptionFactory: () => new UnauthorizedException('Invalid credentials'),\n      }),\n    ) authCredentialsDto: AuthCredentialsDto): Promise {\n    return this.authService.signIn(authCredentialsDto)\n  }\n\n  @Get('/email/verify/:token')\n  // not idempotent\n  async verifyEmail(\n    @Param('token', new ValidationPipe({ transform: true })) token: string,\n  ): Promise {\n    try {\n      await this.authService.verifyEmail(token)\n      return 'Your email has been successfully verified.'\n    } catch (e) {\n      this.logger.error(`Fail to validate token: \"${token}\"`, e.stack)\n      return 'An error occured while verifying your email.'\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AuthCredentialsDto.html":{"url":"classes/AuthCredentialsDto.html","title":"class - AuthCredentialsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AuthCredentialsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/auth-credentials.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            email\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelProperty()@IsNotEmpty()@IsString()@MinLength(3)@MaxLength(320)@IsEmail()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auth/dto/auth-credentials.dto.ts:12\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            password\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelProperty()@IsNotEmpty()@IsString()@MinLength(8)@MaxLength(20)@Matches(/((?=.*\\d)|(?=.*\\W+))(?![.\\n])(?=.*[A-Z])(?=.*[a-z]).*$/, {message: 'Password too weak.'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auth/dto/auth-credentials.dto.ts:20\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, IsNotEmpty, IsString, Matches, MaxLength, MinLength } from 'class-validator'\nimport { ApiModelProperty } from '@nestjs/swagger'\n\nexport class AuthCredentialsDto {\n\n  @ApiModelProperty()\n  @IsNotEmpty()\n  @IsString()\n  @MinLength(3)\n  @MaxLength(320)\n  @IsEmail()\n  email: string\n\n  @ApiModelProperty()\n  @IsNotEmpty()\n  @IsString()\n  @MinLength(8)\n  @MaxLength(20)\n  @Matches(/((?=.*\\d)|(?=.*\\W+))(?![.\\n])(?=.*[A-Z])(?=.*[a-z]).*$/, { message: 'Password too weak.' })\n  password: string\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nAuthService\n\nAuthService\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            JwtStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { forwardRef, Module } from '@nestjs/common'\nimport { AuthController } from './auth.controller'\nimport { AuthService } from './auth.service'\nimport { JwtModule } from '@nestjs/jwt'\nimport { PassportModule } from '@nestjs/passport'\nimport { JwtStrategy } from './jwt.strategy'\nimport { UsersModule } from '../user/users.module'\nimport { VerificationTokenEntity } from './verification.token.entity'\nimport { TypeOrmModule } from '@nestjs/typeorm'\nimport { ConfigModule } from '../config/config.module'\nimport { ConfigService } from '../config/config.service'\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([VerificationTokenEntity]),\n    PassportModule.register({ defaultStrategy: 'jwt' }),\n    JwtModule.registerAsync({\n      imports: [ConfigModule],\n      useFactory: async (configService: ConfigService) => ({\n        secret: process.env.JWT_SECRET || configService.get('JWT_SECRET'),\n        signOptions: { expiresIn: configService.get('JWT_EXPIRES_IN') },\n      }),\n      inject: [ConfigService],\n    }),\n    forwardRef(() => UsersModule),\n  ],\n  controllers: [AuthController],\n  providers: [\n    AuthService,\n    JwtStrategy,\n  ],\n  exports: [\n    PassportModule,\n  ],\n})\n\nexport class AuthModule {\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Async\n                                saveTokenAndSendEmailVerification\n                            \n                            \n                                    Async\n                                signIn\n                            \n                            \n                                    Async\n                                signUp\n                            \n                            \n                                    Async\n                                verifyEmail\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(verificationTokenRepository: Repository, usersService: UsersService, jwtService: JwtService, configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.service.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        verificationTokenRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                        ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            Async\n                            saveTokenAndSendEmailVerification\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    saveTokenAndSendEmailVerification(authCredentialsDto: AuthCredentialsDto, userId: uuid)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:58\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    authCredentialsDto\n                                    \n                                                AuthCredentialsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                            uuid\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            signIn\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    signIn(authCrendentialsDto: AuthCredentialsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:35\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    authCrendentialsDto\n                                    \n                                                AuthCredentialsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            signUp\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    signUp(authCredentialsDto: AuthCredentialsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    authCredentialsDto\n                                    \n                                                AuthCredentialsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            verifyEmail\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    verifyEmail(token: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:48\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    token\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            logger\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new Logger('AuthService')\n                        \n                    \n                        \n                            \n                                    Defined in src/auth/auth.service.ts:16\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable, Logger, NotFoundException, UnauthorizedException } from '@nestjs/common'\nimport { AuthCredentialsDto } from './dto/auth-credentials.dto'\nimport { JwtService } from '@nestjs/jwt'\nimport { JwtPayload } from './interfaces/jwt-payload.interface'\nimport { UsersService } from '../user/users.service'\nimport * as cryptoRandomString from 'crypto-random-string'\nimport { VerificationTokenEntity } from './verification.token.entity'\nimport { Repository } from 'typeorm'\nimport { InjectRepository } from '@nestjs/typeorm'\nimport * as uuid from 'uuid'\nimport * as Mailgun from 'mailgun-js'\nimport { ConfigService } from '../config/config.service'\n\n@Injectable()\nexport class AuthService {\n  private logger = new Logger('AuthService')\n\n  constructor(\n    @InjectRepository(VerificationTokenEntity)\n    private readonly verificationTokenRepository: Repository,\n    private readonly usersService: UsersService,\n    private readonly jwtService: JwtService,\n    private readonly configService: ConfigService,\n  ) {\n  }\n\n  async signUp(authCredentialsDto: AuthCredentialsDto): Promise {\n    const { id } = await this.usersService.signUp(authCredentialsDto)\n    // what to do if an error occur when sending email ?\n    if (this.configService.isEmailVerificationEnabled) {\n      await this.saveTokenAndSendEmailVerification(authCredentialsDto, id)\n    }\n  }\n\n  async signIn(authCrendentialsDto: AuthCredentialsDto): Promise {\n    const user = await this.usersService.validatePassword(authCrendentialsDto)\n    if (!user || !user.email) {\n      throw new UnauthorizedException('Invalid credentials')\n    } else if (!user.verified) {\n      throw new UnauthorizedException('Email not verified')\n    }\n    const payload: JwtPayload = { email: user.email }\n    const accessToken = await this.jwtService.sign(payload)\n    this.logger.debug(`Genereated JWT token with payload ${JSON.stringify(payload)}`)\n    return { accessToken }\n  }\n\n  async verifyEmail(token: string): Promise {\n    const verificationToken = await this.verificationTokenRepository.findOne({ token })\n    if (!verificationToken || !verificationToken.user) {\n      throw new NotFoundException(`Token \"${token}\" not found.`)\n    }\n    verificationToken.user.verified = true\n    await verificationToken.user.save()\n    await verificationToken.remove()\n  }\n\n  private async saveTokenAndSendEmailVerification(authCredentialsDto: AuthCredentialsDto, userId: uuid): Promise {\n    const token = cryptoRandomString({ length: 32 })\n    const { email } = authCredentialsDto\n    const verificationToken = Object.assign(this.verificationTokenRepository.create(), { email, token, userId })\n    await verificationToken.save()\n\n    const mailgun = new Mailgun({\n      apiKey: this.configService.get('MAILGUN_API_KEY'),\n      domain: this.configService.get('EMAIL_VERIFICATION_DOMAIN'),\n      host: this.configService.get('EMAIL_VERIFICATION_HOST'),\n    })\n    const data = {\n      'from': this.configService.get('EMAIL_VERIFICATION_FROM'),\n      'to': email,\n      'subject': 'Please verify your Shargea account',\n      'template': 'email_confirm',\n      'h:X-Mailgun-Variables': JSON.stringify({ hostname: this.configService.get('EMAIL_VERIFICATION_HOSTNAME'), token }),\n    }\n\n    try {\n      await mailgun.messages().send(data)\n      this.logger.debug(`Successfully sent verification email to ${email}`)\n    } catch (err) {\n      this.logger.error('Error when trying to send email: ', err)\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/CategoriesController.html":{"url":"controllers/CategoriesController.html","title":"controller - CategoriesController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  CategoriesController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/categories/categories.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                categories\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createCategory\n                            \n                            \n                                deleteCategory\n                            \n                            \n                                getCategories\n                            \n                            \n                                getCategoryById\n                            \n                            \n                                updateCategory\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            createCategory\n                        \n                        \n                    \n                \n            \n            \n                \ncreateCategory(createCategoryDto: CreateCategoryDto, user: User)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@UsePipes(new ValidationPipe())\n                \n            \n\n            \n                \n                    Defined in src/categories/categories.controller.ts:59\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createCategoryDto\n                                    \n                                                CreateCategoryDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            deleteCategory\n                        \n                        \n                    \n                \n            \n            \n                \ndeleteCategory(id: uuid, user: User)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/:id')\n                \n            \n\n            \n                \n                    Defined in src/categories/categories.controller.ts:78\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                            uuid\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getCategories\n                        \n                        \n                    \n                \n            \n            \n                \ngetCategories(filterDto: GetCategoriesFilterDto, user: User)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/categories/categories.controller.ts:41\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    filterDto\n                                    \n                                                GetCategoriesFilterDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getCategoryById\n                        \n                        \n                    \n                \n            \n            \n                \ngetCategoryById(id: uuid, user: User)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:id')\n                \n            \n\n            \n                \n                    Defined in src/categories/categories.controller.ts:50\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                            uuid\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            updateCategory\n                        \n                        \n                    \n                \n            \n            \n                \nupdateCategory(id: uuid, updateCategoryDto: UpdateCategoryDto, user: User)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('/:id')@UsePipes(new ValidationPipe())\n                \n            \n\n            \n                \n                    Defined in src/categories/categories.controller.ts:69\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                            uuid\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateCategoryDto\n                                    \n                                                UpdateCategoryDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  ClassSerializerInterceptor,\n  Controller,\n  Delete,\n  Get,\n  Logger,\n  Param,\n  ParseUUIDPipe,\n  Patch,\n  Post,\n  Query,\n  UseGuards,\n  UseInterceptors,\n  UsePipes,\n  ValidationPipe,\n} from '@nestjs/common'\nimport { CategoriesService } from './categories.service'\nimport { CreateCategoryDto } from './dto/create-category.dto'\nimport { GetCategoriesFilterDto } from './dto/get-categories-filter.dto'\nimport { Category } from './category.entity'\nimport { AuthGuard } from '@nestjs/passport'\nimport { User } from '../user/user.entity'\nimport { GetUser } from '../user/get-user.decorator'\nimport uuid from 'uuid'\nimport { UpdateCategoryDto } from './dto/update-category.dto'\nimport { ApiBearerAuth, ApiUseTags } from '@nestjs/swagger'\n\n@ApiBearerAuth()\n@ApiUseTags('categories')\n@Controller('categories')\n@UseGuards(AuthGuard())\n@UseInterceptors(ClassSerializerInterceptor)\nexport class CategoriesController {\n  private logger = new Logger('CategoriesController')\n\n  constructor(private readonly categoriesService: CategoriesService) {\n  }\n\n  @Get()\n  getCategories(\n    @Query(new ValidationPipe({ whitelist: true, transform: true })) filterDto: GetCategoriesFilterDto,\n    @GetUser() user: User,\n  ): Promise {\n    this.logger.verbose(`User \"${user.email}\" retrieving all categories. Filters: ${JSON.stringify(filterDto)}`)\n    return this.categoriesService.getCategories(filterDto, user)\n  }\n\n  @Get('/:id')\n  getCategoryById(\n    @Param('id', new ParseUUIDPipe()) id: uuid,\n    @GetUser() user: User,\n  ): Promise {\n    return this.categoriesService.getCategoryById(id, user)\n  }\n\n  @Post()\n  @UsePipes(new ValidationPipe({ whitelist: true, transform: true }))\n  createCategory(\n    @Body() createCategoryDto: CreateCategoryDto,\n    @GetUser() user: User,\n  ): Promise {\n    this.logger.verbose(`User \"${user.email}\" creating a new category. Data: ${JSON.stringify(createCategoryDto)}`)\n    return this.categoriesService.createCategory(createCategoryDto, user)\n  }\n\n  @Patch('/:id')\n  @UsePipes(new ValidationPipe({ whitelist: true, transform: true }))\n  updateCategory(\n    @Param('id', new ParseUUIDPipe()) id: uuid,\n    @Body() updateCategoryDto: UpdateCategoryDto,\n    @GetUser() user: User,\n  ): Promise {\n    return this.categoriesService.updateCategory(id, updateCategoryDto, user)\n  }\n\n  @Delete('/:id')\n  deleteCategory(\n    @Param('id', new ParseUUIDPipe()) id: uuid,\n    @GetUser() user: User,\n  ): Promise {\n    return this.categoriesService.deleteCategory(id, user)\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CategoriesModule.html":{"url":"modules/CategoriesModule.html","title":"module - CategoriesModule","body":"\n                   \n\n\n\n\n    Modules\n    CategoriesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_CategoriesModule\n\n\n\ncluster_CategoriesModule_imports\n\n\n\ncluster_CategoriesModule_exports\n\n\n\ncluster_CategoriesModule_providers\n\n\n\n\nMediaModule\n\nMediaModule\n\n\n\nCategoriesModule\n\nCategoriesModule\n\nCategoriesModule -->\n\nMediaModule->CategoriesModule\n\n\n\n\n\nCategoriesService \n\nCategoriesService \n\nCategoriesService  -->\n\nCategoriesModule->CategoriesService \n\n\n\n\n\nCategoriesService\n\nCategoriesService\n\nCategoriesModule -->\n\nCategoriesService->CategoriesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/categories/categories.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CategoriesService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            CategoriesController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            MediaModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            CategoriesService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { forwardRef, Module } from '@nestjs/common'\nimport { CategoriesController } from './categories.controller'\nimport { CategoriesService } from './categories.service'\nimport { TypeOrmModule } from '@nestjs/typeorm'\nimport { CategoryRepository } from './category.repository'\nimport { AuthModule } from '../auth/auth.module'\nimport { MediaModule } from '../media/media.module'\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([CategoryRepository]),\n    forwardRef(() => AuthModule),\n    MediaModule,\n  ],\n  controllers: [CategoriesController],\n  providers: [CategoriesService],\n  exports: [CategoriesService],\n})\nexport class CategoriesModule {\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CategoriesService.html":{"url":"injectables/CategoriesService.html","title":"injectable - CategoriesService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  CategoriesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/categories/categories.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Async\n                                _checkForCyclic\n                            \n                            \n                                    Private\n                                _getCategoryById\n                            \n                            \n                                    Async\n                                createCategory\n                            \n                            \n                                    Async\n                                deleteCategory\n                            \n                            \n                                getCategories\n                            \n                            \n                                    Async\n                                getCategoryById\n                            \n                            \n                                    Async\n                                updateCategory\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(categoryRepository: CategoryRepository, mediaService: MediaService)\n                    \n                \n                        \n                            \n                                Defined in src/categories/categories.service.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        categoryRepository\n                                                  \n                                                        \n                                                                        CategoryRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        mediaService\n                                                  \n                                                        \n                                                                        MediaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            Async\n                            _checkForCyclic\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    _checkForCyclic(id: uuid, parentCategoryId: uuid, user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/categories/categories.service.ts:109\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                            uuid\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    parentCategoryId\n                                    \n                                            uuid\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            _getCategoryById\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    _getCategoryById(id: uuid, user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/categories/categories.service.ts:105\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                            uuid\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            createCategory\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createCategory(createCategoryDto: CreateCategoryDto, user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/categories/categories.service.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createCategoryDto\n                                    \n                                                CreateCategoryDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            deleteCategory\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteCategory(id: uuid, user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/categories/categories.service.ts:93\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                            uuid\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getCategories\n                        \n                        \n                    \n                \n            \n            \n                \ngetCategories(filterDto: GetCategoriesFilterDto, user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/categories/categories.service.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    filterDto\n                                    \n                                                GetCategoriesFilterDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getCategoryById\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getCategoryById(id: uuid, user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/categories/categories.service.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                            uuid\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            updateCategory\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateCategory(id: uuid, updateCategoryDto: UpdateCategoryDto, user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/categories/categories.service.ts:53\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                            uuid\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateCategoryDto\n                                    \n                                                UpdateCategoryDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Readonly\n                            logger\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new Logger()\n                        \n                    \n                        \n                            \n                                    Defined in src/categories/categories.service.ts:14\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import { BadRequestException, Injectable, Logger, NotFoundException } from '@nestjs/common'\nimport { CategoryRepository } from './category.repository'\nimport { InjectRepository } from '@nestjs/typeorm'\nimport { Category } from './category.entity'\nimport { CreateCategoryDto } from './dto/create-category.dto'\nimport { GetCategoriesFilterDto } from './dto/get-categories-filter.dto'\nimport { User } from '../user/user.entity'\nimport uuid from 'uuid'\nimport { UpdateCategoryDto } from './dto/update-category.dto'\nimport { MediaService } from '../media/media.service'\n\n@Injectable()\nexport class CategoriesService {\n  private readonly logger = new Logger()\n\n  constructor(\n    @InjectRepository(CategoryRepository)\n    private readonly categoryRepository: CategoryRepository,\n    private readonly mediaService: MediaService,\n  ) {\n  }\n\n  getCategories(filterDto: GetCategoriesFilterDto, user: User): Promise {\n    return this.categoryRepository.getCategories(filterDto, user)\n  }\n\n  async getCategoryById(id: uuid, user: User): Promise {\n    const result = await this._getCategoryById(id, user)\n    if (!result) {\n      throw new NotFoundException(`Category with ID \"${id}\" not found.`)\n    } else {\n      return result\n    }\n  }\n\n  async createCategory(createCategoryDto: CreateCategoryDto, user: User): Promise {\n    try {\n      // those calls are done to ensure that the parentCategory and/or media provided belongs to the user\n      // TODO: replace this to do only one db call\n      if (createCategoryDto.imageId) {\n        await this.mediaService.getMediaById(createCategoryDto.imageId, user)\n      }\n      if (createCategoryDto.parentCategoryId) {\n        await this.getCategoryById(createCategoryDto.parentCategoryId, user)\n      }\n    } catch (e) {\n      this.logger.warn(`createCategory: mediaId or parentCategoryId from other user`, e)\n      throw new BadRequestException('Invalid mediaId or parentCategoryId provided.')\n    }\n    return this.categoryRepository.createCategory(createCategoryDto, user)\n  }\n\n  async updateCategory(id: uuid, updateCategoryDto: UpdateCategoryDto, user: User): Promise {\n    const category = await this.getCategoryById(id, user)\n\n    // because categoryRepository.updateCategory modifies the object ...\n    const previousImageId = category.imageId\n\n    if (Object.entries(updateCategoryDto).length === 0) {\n      return category\n    }\n    try {\n      // those calls are done to ensure that the parentCategory and/or media provided belongs to the user\n      // TODO: replace this to do only one db call\n      if (updateCategoryDto.imageId) {\n        await this.mediaService.getMediaById(updateCategoryDto.imageId, user)\n      }\n      if (updateCategoryDto.parentCategoryId) {\n        await this.getCategoryById(updateCategoryDto.parentCategoryId, user)\n      }\n    } catch (e) {\n      this.logger.warn(`updateCategory: mediaId or parentCategoryId from other user`, e)\n      throw new BadRequestException('Invalid mediaId or parentCategoryId provided.')\n    }\n    await this._checkForCyclic(id, updateCategoryDto.parentCategoryId, user)\n    // TODO: we need to check if the updateCategoryDto fields are owned by the current user\n    const updatedCategory = await this.categoryRepository.updateCategory(category, updateCategoryDto)\n\n    if (\n      previousImageId\n      && updateCategoryDto.hasOwnProperty('imageId')\n      && (updateCategoryDto.imageId === null || updateCategoryDto.imageId !== previousImageId)\n    ) {\n      try {\n        await this.mediaService.deleteMedia(previousImageId, user)\n      } catch (e) {\n        this.logger.error(`Category successfully updated but media withh ID ${previousImageId} could not be deleted.`)\n      }\n    }\n    return updatedCategory\n  }\n\n  async deleteCategory(id: uuid, user: User): Promise {\n    const { imageId } = await this.getCategoryById(id, user)\n    await this.categoryRepository.deleteCategory(id, user)\n    if (imageId) {\n      try {\n        await this.mediaService.deleteMedia(imageId, user)\n      } catch (e) {\n        this.logger.error(`Category successfully deleted but media with ID \"${imageId}\" could not be deleted.`)\n      }\n    }\n  }\n\n  private _getCategoryById(id: uuid, user: User): Promise {\n    return this.categoryRepository.findOne({ where: { id, userId: user.id } })\n  }\n\n  private async _checkForCyclic(id: uuid, parentCategoryId: uuid, user: User): Promise {\n    if (!parentCategoryId) {\n      return\n    }\n    if (parentCategoryId === id) {\n      throw new BadRequestException('Circular reference caught when trying to set parentCategory.')\n    }\n    const parent = await this._getCategoryById(parentCategoryId, user)\n    if (!parent) {\n      this.logger.error(`Could not retrieve parent with ID \"${parentCategoryId}\".`)\n      return\n    } else {\n      return await this._checkForCyclic(id, parent.parentCategoryId, user)\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Category.html":{"url":"classes/Category.html","title":"class - Category","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Category\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/categories/category.entity.ts\n        \n\n\n            \n                Extends\n            \n            \n                    BaseEntity\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                childrenCategories\n                            \n                            \n                                creationDate\n                            \n                            \n                                description\n                            \n                            \n                                id\n                            \n                            \n                                image\n                            \n                            \n                                imageId\n                            \n                            \n                                modificationDate\n                            \n                            \n                                parentCategory\n                            \n                            \n                                parentCategoryId\n                            \n                            \n                                title\n                            \n                            \n                                transactions\n                            \n                            \n                                user\n                            \n                            \n                                userForDefaultCategory\n                            \n                            \n                                userId\n                            \n                            \n                                version\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            childrenCategories\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Category[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @OneToMany(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/categories/category.entity.ts:77\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            creationDate\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @CreateDateColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/categories/category.entity.ts:43\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            description\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({length: 250, nullable: true, default: undefined})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/categories/category.entity.ts:30\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     uuid\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn('uuid')\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/categories/category.entity.ts:24\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            image\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Media\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Exclude()@OneToOne(undefined, undefined)@JoinColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/categories/category.entity.ts:58\n                            \n                        \n\n                \n                    \n                        Relations\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            imageId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     uuid\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({nullable: true, default: undefined})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/categories/category.entity.ts:33\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            modificationDate\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @UpdateDateColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/categories/category.entity.ts:46\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            parentCategory\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Category\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Exclude()@ManyToOne(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/categories/category.entity.ts:74\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            parentCategoryId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     uuid\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({nullable: true, default: undefined})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/categories/category.entity.ts:36\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            title\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({length: 20, nullable: false})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/categories/category.entity.ts:27\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            transactions\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Transaction[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Exclude()@OneToMany(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/categories/category.entity.ts:66\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            user\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         User\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Exclude()@ManyToOne(undefined, undefined, {onDelete: 'CASCADE'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/categories/category.entity.ts:70\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            userForDefaultCategory\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         User\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Exclude()@OneToOne(undefined, undefined, {onDelete: 'CASCADE'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/categories/category.entity.ts:62\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            userId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     uuid\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Exclude()@Column({nullable: false})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/categories/category.entity.ts:40\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            version\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @VersionColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/categories/category.entity.ts:49\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  BaseEntity,\n  Column,\n  CreateDateColumn,\n  Entity,\n  JoinColumn,\n  ManyToOne,\n  OneToMany,\n  OneToOne,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n  VersionColumn,\n} from 'typeorm'\nimport { User } from '../user/user.entity'\nimport { Transaction } from '../transactions/transaction.entity'\nimport { Media } from '../media/media.entity'\nimport uuid from 'uuid'\nimport { Exclude } from 'class-transformer'\n\n@Entity()\nexport class Category extends BaseEntity {\n\n  @PrimaryGeneratedColumn('uuid')\n  id: uuid\n\n  @Column({ length: 20, nullable: false })\n  title: string\n\n  @Column({ length: 250, nullable: true, default: null })\n  description: string\n\n  @Column({ nullable: true, default: null })\n  imageId: uuid\n\n  @Column({ nullable: true, default: null })\n  parentCategoryId: uuid\n\n  @Exclude()\n  @Column({ nullable: false })\n  userId: uuid\n\n  @CreateDateColumn()\n  creationDate: string\n\n  @UpdateDateColumn()\n  modificationDate: string\n\n  @VersionColumn()\n  version: number\n\n  /**\n   * Relations\n   */\n\n  @Exclude()\n  @OneToOne(() => Media, media => media.user)\n  @JoinColumn()\n  image: Media\n\n  @Exclude()\n  @OneToOne(() => User, user => user.defaultCategory, { onDelete: 'CASCADE' })\n  userForDefaultCategory: User\n\n  @Exclude()\n  @OneToMany(() => Transaction, transaction => transaction.category)\n  transactions: Transaction[]\n\n  @Exclude()\n  @ManyToOne(() => User, user => user.categories, { onDelete: 'CASCADE' })\n  user: User\n\n  @Exclude()\n  @ManyToOne(() => Category, category => category.childrenCategories)\n  parentCategory: Category\n\n  @OneToMany(() => Category, service => service.parentCategory)\n  childrenCategories: Category[]\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CategoryRepository.html":{"url":"classes/CategoryRepository.html","title":"class - CategoryRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CategoryRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/categories/category.repository.ts\n        \n\n\n            \n                Extends\n            \n            \n                    Repository\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createCategory\n                            \n                            \n                                    Async\n                                deleteCategory\n                            \n                            \n                                    Async\n                                getCategories\n                            \n                            \n                                    Async\n                                updateCategory\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            logger\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new Logger('CategoryRepository')\n                        \n                    \n                        \n                            \n                                    Defined in src/categories/category.repository.ts:14\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            createCategory\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createCategory(createCategoryDto: CreateCategoryDto, user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/categories/category.repository.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createCategoryDto\n                                    \n                                                CreateCategoryDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            deleteCategory\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteCategory(id: uuid, user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/categories/category.repository.ts:61\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                            uuid\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getCategories\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getCategories(filterDto: GetCategoriesFilterDto, user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/categories/category.repository.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    filterDto\n                                    \n                                                GetCategoriesFilterDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            updateCategory\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateCategory(category: Category, updateCategoryDto: UpdateCategoryDto)\n                \n            \n\n\n            \n                \n                    Defined in src/categories/category.repository.ts:49\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    category\n                                    \n                                                Category\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateCategoryDto\n                                    \n                                                UpdateCategoryDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { EntityRepository, Like, Repository } from 'typeorm'\nimport { Category } from './category.entity'\nimport { CreateCategoryDto } from './dto/create-category.dto'\nimport { GetCategoriesFilterDto } from './dto/get-categories-filter.dto'\nimport { User } from '../user/user.entity'\nimport { BadRequestException, InternalServerErrorException, Logger, NotFoundException } from '@nestjs/common'\nimport { UpdateCategoryDto } from './dto/update-category.dto'\nimport uuid from 'uuid'\n\nconst PG_FOREIGN_KEY_CONSTRAINT_VIOLATION = '23503'\n\n@EntityRepository(Category)\nexport class CategoryRepository extends Repository {\n  private logger = new Logger('CategoryRepository')\n\n  async getCategories(filterDto: GetCategoriesFilterDto, user: User): Promise {\n    const { search } = filterDto\n    const where = search ? [\n      {\n        title: Like(`%${search}%`),\n        userId: user.id,\n      },\n      {\n        description: Like(`%${search}%`),\n        userId: user.id,\n      },\n    ] : { userId: user.id }\n    try {\n      return await this.find({ where })\n    } catch (e) {\n      this.logger.error(`Failed to get categories for User \"${user.email}\". Filters: ${JSON.stringify(filterDto)}`, e.stack)\n      throw new InternalServerErrorException()\n    }\n  }\n\n  async createCategory(createCategoryDto: CreateCategoryDto, user: User): Promise {\n    const category = Object.assign(new Category(), createCategoryDto, { user })\n    try {\n      return await category.save()\n    } catch (e) {\n      this.logger.error(`Failed to create category for User \"${user.email}\". Data: ${JSON.stringify(createCategoryDto)}`, e.stack)\n      if (e.code === PG_FOREIGN_KEY_CONSTRAINT_VIOLATION) {\n        throw new BadRequestException('Invalid mediaId or parentCategoryId provided.')\n      }\n      throw new InternalServerErrorException()\n    }\n  }\n\n  async updateCategory(category: Category, updateCategoryDto: UpdateCategoryDto): Promise {\n    const updatedCategory = Object.assign(category, updateCategoryDto)\n    try {\n      return await updatedCategory.save()\n    } catch (e) {\n      if (e.code === PG_FOREIGN_KEY_CONSTRAINT_VIOLATION) {\n        throw new BadRequestException(`Invalid mediaId or parentCategoryId provided for category with ID \"${category.id}\".`)\n      }\n      throw new InternalServerErrorException()\n    }\n  }\n\n  async deleteCategory(id: uuid, user: User): Promise {\n    let res\n    try {\n      res = await this.delete({ id, userId: user.id })\n    } catch (e) {\n      if (e.code === PG_FOREIGN_KEY_CONSTRAINT_VIOLATION) {\n        throw new BadRequestException(`Category with ID \"${id}\" is still referenced.`)\n      }\n      throw new InternalServerErrorException()\n    }\n    if (res.affected === 0) {\n      throw new NotFoundException(`Category with ID \"${id}\" not found.`)\n    }\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/ConfigModule.html":{"url":"modules/ConfigModule.html","title":"module - ConfigModule","body":"\n                   \n\n\n\n\n    Modules\n    ConfigModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_ConfigModule\n\n\n\ncluster_ConfigModule_exports\n\n\n\n\nConfigService \n\nConfigService \n\n\n\nConfigModule\n\nConfigModule\n\nConfigService  -->\n\nConfigModule->ConfigService \n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/config/config.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Exports\n                    \n                        \n                            ConfigService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Global, Module } from '@nestjs/common'\nimport { ConfigService } from './config.service'\n\n@Global()\n@Module({\n  providers: [\n    {\n      provide: ConfigService,\n      useValue: new ConfigService(`${process.env.NODE_ENV || 'development'}.env`),\n    },\n  ],\n  exports: [ConfigService],\n})\nexport class ConfigModule {\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/ConfigService.html":{"url":"classes/ConfigService.html","title":"class - ConfigService","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  ConfigService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/config/config.service.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                envConfig\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                get\n                            \n                            \n                                    Private\n                                    Static\n                                mergeVariables\n                            \n                            \n                                    Private\n                                    Static\n                                readEnvVars\n                            \n                            \n                                    Private\n                                    Static\n                                validateInput\n                            \n                        \n                    \n                \n\n\n\n\n\n                    \n                        \n                            Accessors\n                        \n                    \n                    \n                        \n                            \n                                \n                                    VALIDATION_SCHEMA\n                                \n                                \n                                    isCorsEnabled\n                                \n                                \n                                    isRateLimitEnabled\n                                \n                                \n                                    isEmailVerificationEnabled\n                                \n                                \n                                    isDbSynchronized\n                                \n                            \n                        \n                    \n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(filePath: string)\n                    \n                \n                        \n                            \n                                Defined in src/config/config.service.ts:9\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        filePath\n                                                  \n                                                        \n                                                                        string\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Readonly\n                            envConfig\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         EnvConfig\n\n                        \n                    \n                        \n                            \n                                    Defined in src/config/config.service.ts:9\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            get\n                        \n                        \n                    \n                \n            \n            \n                \nget(key: string)\n                \n            \n\n\n            \n                \n                    Defined in src/config/config.service.ts:99\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    key\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         string\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            Static\n                            mergeVariables\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    mergeVariables(filePath)\n                \n            \n\n\n            \n                \n                    Defined in src/config/config.service.ts:59\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Optional\n                                \n                            \n                            \n                                \n                                    filePath\n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         EnvConfig\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            Static\n                            readEnvVars\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    readEnvVars()\n                \n            \n\n\n            \n                \n                    Defined in src/config/config.service.ts:71\n                \n            \n\n\n            \n                \n\n                    \n                        Returns :         EnvConfig\n\n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            Static\n                            validateInput\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validateInput(envConfig: EnvConfig)\n                \n            \n\n\n            \n                \n                    Defined in src/config/config.service.ts:87\n                \n            \n\n\n            \n                \n                    Ensures all needed variables are set, and returns the validated JavaScript object\nincluding the applied default values.\n\n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    envConfig\n                                    \n                                                EnvConfig\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         EnvConfig\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n            \n    \n        Accessors\n    \n        \n            \n                \n                    \n                        \n                        VALIDATION_SCHEMA\n                    \n                \n\n                \n                    \n                        getVALIDATION_SCHEMA()\n                    \n                \n                            \n                                \n                                    Defined in src/config/config.service.ts:16\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        isCorsEnabled\n                    \n                \n\n                \n                    \n                        getisCorsEnabled()\n                    \n                \n                            \n                                \n                                    Defined in src/config/config.service.ts:43\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        isRateLimitEnabled\n                    \n                \n\n                \n                    \n                        getisRateLimitEnabled()\n                    \n                \n                            \n                                \n                                    Defined in src/config/config.service.ts:47\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        isEmailVerificationEnabled\n                    \n                \n\n                \n                    \n                        getisEmailVerificationEnabled()\n                    \n                \n                            \n                                \n                                    Defined in src/config/config.service.ts:51\n                                \n                            \n\n            \n        \n        \n            \n                \n                    \n                        \n                        isDbSynchronized\n                    \n                \n\n                \n                    \n                        getisDbSynchronized()\n                    \n                \n                            \n                                \n                                    Defined in src/config/config.service.ts:55\n                                \n                            \n\n            \n        \n\n    \n\n\n    \n        import * as dotenv from 'dotenv'\nimport * as Joi from '@hapi/joi'\nimport { SchemaMap } from '@hapi/joi'\nimport * as fs from 'fs'\n\nexport type EnvConfig = Record\n\nexport class ConfigService {\n  private readonly envConfig: EnvConfig\n\n  constructor(filePath: string) {\n    const config = ConfigService.mergeVariables(filePath)\n    this.envConfig = ConfigService.validateInput(config)\n  }\n\n  private static get VALIDATION_SCHEMA(): SchemaMap {\n    return {\n      CORS_ENABLED: Joi.boolean().optional().default(false),\n      RATE_LIMIT_ENABLED: Joi.boolean().optional().default(true),\n      RATE_LIMIT_WINDOW_IN_MINUTE: Joi.number().optional().default(15),\n      RATE_LIMIT_MAX: Joi.number().optional().default(10000),\n      SERVER_PORT: Joi.number().optional().default(3000),\n      SWAGGER_SCHEME: Joi.string().optional().valid('http', 'https').default('http'),\n      DB_TYPE: Joi.string().optional().default('postgres'),\n      DB_PORT: Joi.number().optional().default(5432),\n      DB_HOST: Joi.string().required(),\n      DB_USERNAME: Joi.string().required(),\n      DB_PASSWORD: Joi.string().required(),\n      DB_SYNCHRONIZE: Joi.boolean().optional().default(false),\n      DB_DATABASE_NAME: Joi.string().required(),\n      JWT_EXPIRES_IN: Joi.number().optional().default(3600),\n      JWT_SECRET: Joi.string().required(),\n      EMAIL_VERIFICATION_ENABLED: Joi.boolean().optional().default(true),\n      MAILGUN_API_KEY: Joi.string().optional(),\n      EMAIL_VERIFICATION_DOMAIN: Joi.string().optional(),\n      EMAIL_VERIFICATION_FROM: Joi.string().optional(),\n      EMAIL_VERIFICATION_HOST: Joi.string().optional(),\n      EMAIL_VERIFICATION_HOSTNAME: Joi.string().optional(),\n\n    }\n  }\n\n  get isCorsEnabled(): boolean {\n    return Boolean(this.envConfig.CORS_ENABLED)\n  }\n\n  get isRateLimitEnabled(): boolean {\n    return Boolean(this.envConfig.RATE_LIMIT_ENABLED)\n  }\n\n  get isEmailVerificationEnabled(): boolean {\n    return Boolean(this.envConfig.EMAIL_VERIFICATION_ENABLED)\n  }\n\n  get isDbSynchronized(): boolean {\n    return Boolean(this.envConfig.DB_SYNCHRONIZE)\n  }\n\n  private static mergeVariables(filePath): EnvConfig {\n    let envFileVars\n\n    try {\n      envFileVars = dotenv.parse(fs.readFileSync(filePath))\n    } catch (e) {\n      envFileVars = []\n    }\n    const envVars = ConfigService.readEnvVars()\n    return { ...envFileVars, ...envVars }\n  }\n\n  private static readEnvVars(): EnvConfig {\n    const envVars = {}\n    Object.keys(ConfigService.VALIDATION_SCHEMA).forEach((key) => {\n      if (process.env[key] === undefined) {\n        return\n      }\n      envVars[key] = process.env[key]\n    })\n\n    return envVars\n  }\n\n  /**\n   * Ensures all needed variables are set, and returns the validated JavaScript object\n   * including the applied default values.\n   */\n  private static validateInput(envConfig: EnvConfig): EnvConfig {\n    const envVarsSchema: Joi.ObjectSchema = Joi.object(ConfigService.VALIDATION_SCHEMA)\n\n    const { error, value: validatedEnvConfig } = envVarsSchema.validate(\n      envConfig,\n    )\n    if (error) {\n      throw new Error(`Config validation error: ${error.message}`)\n    }\n    return validatedEnvConfig\n  }\n\n  get(key: string): string {\n    return this.envConfig[key]\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateCategoryDto.html":{"url":"classes/CreateCategoryDto.html","title":"class - CreateCategoryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateCategoryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/categories/dto/create-category.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                description\n                            \n                            \n                                    Optional\n                                imageId\n                            \n                            \n                                    Optional\n                                parentCategoryId\n                            \n                            \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            description\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelPropertyOptional()@Transform(undefined)@IsOptional()@IsString()@MaxLength(250)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/categories/dto/create-category.dto.ts:19\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            imageId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     uuid\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelPropertyOptional({type: String})@Transform(undefined)@IsOptional()@IsUUID()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/categories/dto/create-category.dto.ts:25\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            parentCategoryId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     uuid\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelPropertyOptional({type: String})@Transform(undefined)@IsOptional()@IsUUID()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/categories/dto/create-category.dto.ts:31\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            title\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelProperty()@IsNotEmpty()@IsString()@MaxLength(25)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/categories/dto/create-category.dto.ts:12\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsOptional, IsString, IsUUID, MaxLength } from 'class-validator'\nimport uuid from 'uuid'\nimport { Transform } from 'class-transformer'\nimport { ApiModelProperty, ApiModelPropertyOptional } from '@nestjs/swagger'\n\nexport class CreateCategoryDto {\n\n  @ApiModelProperty()\n  @IsNotEmpty()\n  @IsString()\n  @MaxLength(25)\n  title: string\n\n  @ApiModelPropertyOptional()\n  @Transform(description => description || null)\n  @IsOptional()\n  @IsString()\n  @MaxLength(250)\n  description?: string\n\n  @ApiModelPropertyOptional({ type: String })\n  @Transform(imageId => imageId || null)\n  @IsOptional()\n  @IsUUID()\n  imageId?: uuid\n\n  @ApiModelPropertyOptional({ type: String })\n  @Transform(categoryId => categoryId || null)\n  @IsOptional()\n  @IsUUID()\n  parentCategoryId?: uuid\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateMediaDto.html":{"url":"classes/CreateMediaDto.html","title":"class - CreateMediaDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateMediaDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/media/dto/create-media.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                description\n                            \n                            \n                                title\n                            \n                            \n                                    Optional\n                                type\n                            \n                            \n                                url\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            description\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelPropertyOptional()@IsOptional()@IsNotEmpty()@IsString()@MaxLength(250)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/media/dto/create-media.dto.ts:25\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            title\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelProperty()@IsNotEmpty()@IsString()@MaxLength(25)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/media/dto/create-media.dto.ts:11\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            type\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         MediaType\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelPropertyOptional({enum: undefined})@IsOptional()@IsIn(undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/media/dto/create-media.dto.ts:30\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            url\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelProperty()@IsNotEmpty()@IsString()@IsUrl()@MaxLength(2048)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/media/dto/create-media.dto.ts:18\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsIn, IsNotEmpty, IsOptional, IsString, IsUrl, MaxLength } from 'class-validator'\nimport { MediaType } from '../media-type.enum'\nimport { ApiModelProperty, ApiModelPropertyOptional } from '@nestjs/swagger'\n\nexport class CreateMediaDto {\n\n  @ApiModelProperty()\n  @IsNotEmpty()\n  @IsString()\n  @MaxLength(25)\n  title: string\n\n  @ApiModelProperty()\n  @IsNotEmpty()\n  @IsString()\n  @IsUrl()\n  @MaxLength(2048)\n  url: string\n\n  @ApiModelPropertyOptional()\n  @IsOptional()\n  @IsNotEmpty()\n  @IsString()\n  @MaxLength(250)\n  description?: string\n\n  @ApiModelPropertyOptional({ enum: ['IMAGE', 'VIDEO'] })\n  @IsOptional()\n  @IsIn(Object.values(MediaType))\n  type?: MediaType\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateTransactionDto.html":{"url":"classes/CreateTransactionDto.html","title":"class - CreateTransactionDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateTransactionDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/transactions/dto/create-transaction.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                amount\n                            \n                            \n                                    Optional\n                                categoryId\n                            \n                            \n                                    Optional\n                                date\n                            \n                            \n                                    Optional\n                                description\n                            \n                            \n                                    Optional\n                                imageId\n                            \n                            \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            amount\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelProperty()@Transform(undefined)@IsNotEmpty()@IsNumber()@NotEquals(0)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/transactions/dto/create-transaction.dto.ts:27\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            categoryId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     uuid\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelPropertyOptional({type: String})@Transform(undefined)@IsOptional()@IsUUID()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/transactions/dto/create-transaction.dto.ts:46\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            date\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelPropertyOptional()@Transform(undefined)@IsOptional()@IsDateString()@MaxLength(250)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/transactions/dto/create-transaction.dto.ts:34\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            description\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelPropertyOptional()@Transform(undefined)@IsOptional()@IsNotEmpty()@IsString()@MaxLength(250)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/transactions/dto/create-transaction.dto.ts:20\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            imageId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     uuid\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelPropertyOptional({type: String})@Transform(undefined)@IsOptional()@IsUUID()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/transactions/dto/create-transaction.dto.ts:40\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            title\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelProperty()@IsNotEmpty()@IsString()@MaxLength(25)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/transactions/dto/create-transaction.dto.ts:12\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsDateString, IsNotEmpty, IsNumber, IsOptional, IsString, IsUUID, MaxLength, NotEquals } from 'class-validator'\nimport uuid from 'uuid'\nimport { Transform } from 'class-transformer'\nimport { ApiModelProperty, ApiModelPropertyOptional } from '@nestjs/swagger'\n\nexport class CreateTransactionDto {\n\n  @ApiModelProperty()\n  @IsNotEmpty()\n  @IsString()\n  @MaxLength(25)\n  title: string\n\n  @ApiModelPropertyOptional()\n  @Transform(description => description || null)\n  @IsOptional()\n  @IsNotEmpty()\n  @IsString()\n  @MaxLength(250)\n  description?: string\n\n  @ApiModelProperty()\n  @Transform(amount => parseFloat(amount))\n  @IsNotEmpty()\n  @IsNumber()\n  @NotEquals(0)\n  amount: number\n\n  @ApiModelPropertyOptional()\n  @Transform(date => date || null)\n  @IsOptional()\n  @IsDateString()\n  @MaxLength(250)\n  date?: string\n\n  @ApiModelPropertyOptional({ type: String })\n  @Transform(imageId => imageId || null)\n  @IsOptional()\n  @IsUUID()\n  imageId?: uuid\n\n  @ApiModelPropertyOptional({ type: String })\n  @Transform(categoryId => categoryId || null)\n  @IsOptional()\n  @IsUUID()\n  categoryId?: uuid\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetCategoriesFilterDto.html":{"url":"classes/GetCategoriesFilterDto.html","title":"class - GetCategoriesFilterDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetCategoriesFilterDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/categories/dto/get-categories-filter.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                search\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            search\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelPropertyOptional()@IsOptional()@IsNotEmpty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/categories/dto/get-categories-filter.dto.ts:9\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsOptional } from 'class-validator'\nimport { ApiModelPropertyOptional } from '@nestjs/swagger'\n\nexport class GetCategoriesFilterDto {\n\n  @ApiModelPropertyOptional()\n  @IsOptional()\n  @IsNotEmpty()\n  search?: string\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetTransactionsFilterDto.html":{"url":"classes/GetTransactionsFilterDto.html","title":"class - GetTransactionsFilterDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetTransactionsFilterDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/transactions/dto/get-transactions-filter.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                search\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            search\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelPropertyOptional()@IsOptional()@IsNotEmpty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/transactions/dto/get-transactions-filter.dto.ts:9\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsOptional } from 'class-validator'\nimport { ApiModelPropertyOptional } from '@nestjs/swagger'\n\nexport class GetTransactionsFilterDto {\n\n  @ApiModelPropertyOptional()\n  @IsOptional()\n  @IsNotEmpty()\n  search?: string\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/JwtPayload.html":{"url":"interfaces/JwtPayload.html","title":"interface - JwtPayload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  JwtPayload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/interfaces/jwt-payload.interface.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        email\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface JwtPayload {\n  email: string\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt.strategy.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService, configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/jwt.strategy.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                        ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            validate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(payload: JwtPayload)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/jwt.strategy.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                JwtPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { PassportStrategy } from '@nestjs/passport'\nimport { ExtractJwt, Strategy } from 'passport-jwt'\nimport { Injectable, UnauthorizedException } from '@nestjs/common'\nimport { JwtPayload } from './interfaces/jwt-payload.interface'\nimport { User } from '../user/user.entity'\nimport { UsersService } from '../user/users.service'\nimport { ConfigService } from '../config/config.service'\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  constructor(\n    private readonly usersService: UsersService,\n    private readonly configService: ConfigService,\n  ) {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      secretOrKey: process.env.JWT_SECRET || configService.get('JWT_SECRET'),\n    })\n  }\n\n  async validate(payload: JwtPayload): Promise {\n    const { email } = payload\n    const user = await this.usersService.findOne(email)\n    if (!user) {\n      throw new UnauthorizedException()\n    }\n    return user\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Media.html":{"url":"classes/Media.html","title":"class - Media","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Media\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/media/media.entity.ts\n        \n\n\n            \n                Extends\n            \n            \n                    BaseEntity\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                category\n                            \n                            \n                                creationDate\n                            \n                            \n                                description\n                            \n                            \n                                id\n                            \n                            \n                                modificationDate\n                            \n                            \n                                title\n                            \n                            \n                                transaction\n                            \n                            \n                                type\n                            \n                            \n                                url\n                            \n                            \n                                user\n                            \n                            \n                                userForPicture\n                            \n                            \n                                userId\n                            \n                            \n                                version\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            category\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Category\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Exclude()@OneToOne(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/media/media.entity.ts:62\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            creationDate\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @CreateDateColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/media/media.entity.ts:36\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            description\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({length: 250, nullable: true, default: undefined})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/media/media.entity.ts:19\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     uuid\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn('uuid')\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/media/media.entity.ts:13\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            modificationDate\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @UpdateDateColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/media/media.entity.ts:39\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            title\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({length: 25, nullable: false})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/media/media.entity.ts:16\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            transaction\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Transaction\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Exclude()@OneToOne(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/media/media.entity.ts:58\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            type\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         MediaType\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'enum', enum: MediaType, default: undefined})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/media/media.entity.ts:29\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            url\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({length: 2048, nullable: false})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/media/media.entity.ts:22\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            user\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         User\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Exclude()@ManyToOne(undefined, undefined, {onDelete: 'CASCADE'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/media/media.entity.ts:50\n                            \n                        \n\n                \n                    \n                        Relations\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            userForPicture\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         User\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Exclude()@OneToOne(undefined, undefined, {onDelete: 'CASCADE'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/media/media.entity.ts:54\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            userId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     uuid\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Exclude()@Column({nullable: false})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/media/media.entity.ts:33\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            version\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @VersionColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/media/media.entity.ts:42\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { BaseEntity, Column, CreateDateColumn, Entity, ManyToOne, OneToOne, PrimaryGeneratedColumn, UpdateDateColumn, VersionColumn } from 'typeorm'\nimport { User } from '../user/user.entity'\nimport { Transaction } from '../transactions/transaction.entity'\nimport { Category } from '../categories/category.entity'\nimport { MediaType } from './media-type.enum'\nimport uuid from 'uuid'\nimport { Exclude } from 'class-transformer'\n\n@Entity()\nexport class Media extends BaseEntity {\n\n  @PrimaryGeneratedColumn('uuid')\n  id: uuid\n\n  @Column({ length: 25, nullable: false })\n  title: string\n\n  @Column({ length: 250, nullable: true, default: null })\n  description: string\n\n  @Column({ length: 2048, nullable: false })\n  url: string\n\n  @Column({\n    type: 'enum',\n    enum: MediaType,\n    default: MediaType.IMAGE,\n  })\n  type: MediaType\n\n  @Exclude()\n  @Column({ nullable: false })\n  userId: uuid\n\n  @CreateDateColumn()\n  creationDate: string\n\n  @UpdateDateColumn()\n  modificationDate: string\n\n  @VersionColumn()\n  version: number\n\n  /**\n   * Relations\n   */\n\n  @Exclude()\n  @ManyToOne(() => User, user => user.media, { onDelete: 'CASCADE' })\n  user: User\n\n  @Exclude()\n  @OneToOne(() => User, user => user.picture, { onDelete: 'CASCADE' })\n  userForPicture: User\n\n  @Exclude()\n  @OneToOne(() => Transaction, transaction => transaction.image)\n  transaction: Transaction\n\n  @Exclude()\n  @OneToOne(() => Category, category => category.image)\n  category: Category\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/MediaController.html":{"url":"controllers/MediaController.html","title":"controller - MediaController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  MediaController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/media/media.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                media\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createMedia\n                            \n                            \n                                deleteMedia\n                            \n                            \n                                getAllMedia\n                            \n                            \n                                getMediaById\n                            \n                            \n                                updateMedia\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            createMedia\n                        \n                        \n                    \n                \n            \n            \n                \ncreateMedia(createMediaDto: CreateMediaDto, user: User)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@UsePipes(new ValidationPipe())\n                \n            \n\n            \n                \n                    Defined in src/media/media.controller.ts:54\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createMediaDto\n                                    \n                                                CreateMediaDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            deleteMedia\n                        \n                        \n                    \n                \n            \n            \n                \ndeleteMedia(id: uuid, user: User)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/:id')\n                \n            \n\n            \n                \n                    Defined in src/media/media.controller.ts:73\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                            uuid\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getAllMedia\n                        \n                        \n                    \n                \n            \n            \n                \ngetAllMedia(user: User)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/media/media.controller.ts:39\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getMediaById\n                        \n                        \n                    \n                \n            \n            \n                \ngetMediaById(id: uuid, user: User)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:id')\n                \n            \n\n            \n                \n                    Defined in src/media/media.controller.ts:45\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                            uuid\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            updateMedia\n                        \n                        \n                    \n                \n            \n            \n                \nupdateMedia(id: uuid, updateMediaDto: UpdateMediaDto, user: User)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('/:id')@UsePipes(new ValidationPipe())\n                \n            \n\n            \n                \n                    Defined in src/media/media.controller.ts:64\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                            uuid\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateMediaDto\n                                    \n                                                UpdateMediaDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  ClassSerializerInterceptor,\n  Controller,\n  Delete,\n  Get,\n  Logger,\n  Param,\n  ParseUUIDPipe,\n  Patch,\n  Post,\n  UseGuards,\n  UseInterceptors,\n  UsePipes,\n  ValidationPipe,\n} from '@nestjs/common'\nimport { MediaService } from './media.service'\nimport { CreateMediaDto } from './dto/create-media.dto'\nimport { Media } from './media.entity'\nimport { AuthGuard } from '@nestjs/passport'\nimport { User } from '../user/user.entity'\nimport { GetUser } from '../user/get-user.decorator'\nimport uuid from 'uuid'\nimport { UpdateMediaDto } from './dto/update-media.dto'\nimport { ApiBearerAuth, ApiUseTags } from '@nestjs/swagger'\n\n@ApiBearerAuth()\n@ApiUseTags('media')\n@Controller('media')\n@UseGuards(AuthGuard())\n@UseInterceptors(ClassSerializerInterceptor)\nexport class MediaController {\n  private logger = new Logger('MediaController')\n\n  constructor(private readonly mediaService: MediaService) {\n  }\n\n  @Get()\n  getAllMedia(@GetUser() user: User): Promise {\n    this.logger.verbose(`User \"${user.email}\" retrieving all media.`)\n    return this.mediaService.getAllMedia(user)\n  }\n\n  @Get('/:id')\n  getMediaById(\n    @Param('id', new ParseUUIDPipe()) id: uuid,\n    @GetUser() user: User,\n  ): Promise {\n    return this.mediaService.getMediaById(id, user)\n  }\n\n  @Post()\n  @UsePipes(new ValidationPipe({ whitelist: true, transform: true }))\n  createMedia(\n    @Body() createMediaDto: CreateMediaDto,\n    @GetUser() user: User,\n  ): Promise {\n    this.logger.verbose(`User \"${user.email}\" creating a new media. Data: ${JSON.stringify(createMediaDto)}`)\n    return this.mediaService.createMedia(createMediaDto, user)\n  }\n\n  @Patch('/:id')\n  @UsePipes(new ValidationPipe({ whitelist: true, transform: true }))\n  updateMedia(\n    @Param('id', new ParseUUIDPipe()) id: uuid,\n    @Body() updateMediaDto: UpdateMediaDto,\n    @GetUser() user: User,\n  ): Promise {\n    return this.mediaService.updateMedia(id, updateMediaDto, user)\n  }\n\n  @Delete('/:id')\n  deleteMedia(\n    @Param('id', new ParseUUIDPipe()) id: uuid,\n    @GetUser() user: User,\n  ): Promise {\n    return this.mediaService.deleteMedia(id, user)\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/MediaModule.html":{"url":"modules/MediaModule.html","title":"module - MediaModule","body":"\n                   \n\n\n\n\n    Modules\n    MediaModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_MediaModule\n\n\n\ncluster_MediaModule_exports\n\n\n\ncluster_MediaModule_providers\n\n\n\n\nMediaService \n\nMediaService \n\n\n\nMediaModule\n\nMediaModule\n\nMediaService  -->\n\nMediaModule->MediaService \n\n\n\n\n\nMediaService\n\nMediaService\n\nMediaModule -->\n\nMediaService->MediaModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/media/media.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            MediaService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            MediaController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            MediaService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { forwardRef, Module } from '@nestjs/common'\nimport { MediaController } from './media.controller'\nimport { MediaService } from './media.service'\nimport { TypeOrmModule } from '@nestjs/typeorm'\nimport { AuthModule } from '../auth/auth.module'\nimport { MediaRepository } from './media.repository'\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([MediaRepository]),\n    forwardRef(() => AuthModule),\n  ],\n  controllers: [MediaController],\n  providers: [MediaService],\n  exports: [MediaService],\n})\nexport class MediaModule {\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/MediaRepository.html":{"url":"classes/MediaRepository.html","title":"class - MediaRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  MediaRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/media/media.repository.ts\n        \n\n\n            \n                Extends\n            \n            \n                    Repository\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                deleteMedia\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            deleteMedia\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteMedia(id: uuid, user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/media/media.repository.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                            uuid\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { EntityRepository, Repository } from 'typeorm'\nimport { BadRequestException, InternalServerErrorException, NotFoundException } from '@nestjs/common'\nimport { Media } from './media.entity'\nimport { User } from '../user/user.entity'\nimport uuid from 'uuid'\n\nconst PG_FOREIGN_KEY_CONSTRAINT_VIOLATION = '23503'\n\n@EntityRepository(Media)\nexport class MediaRepository extends Repository {\n\n  async deleteMedia(id: uuid, user: User): Promise {\n    let res\n    try {\n      res = await this.delete({ id, userId: user.id })\n    } catch (e) {\n      if (e.code === PG_FOREIGN_KEY_CONSTRAINT_VIOLATION) {\n        throw new BadRequestException(`Media with ID \"${id}\" is still referenced.`)\n      }\n      throw new InternalServerErrorException()\n    }\n    if (res.affected === 0) {\n      throw new NotFoundException(`Media with ID \"${id}\" not found.`)\n    }\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MediaService.html":{"url":"injectables/MediaService.html","title":"injectable - MediaService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  MediaService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/media/media.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createMedia\n                            \n                            \n                                deleteMedia\n                            \n                            \n                                getAllMedia\n                            \n                            \n                                    Async\n                                getMediaById\n                            \n                            \n                                    Async\n                                updateMedia\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(mediaRepository: MediaRepository)\n                    \n                \n                        \n                            \n                                Defined in src/media/media.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        mediaRepository\n                                                  \n                                                        \n                                                                        MediaRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            createMedia\n                        \n                        \n                    \n                \n            \n            \n                \ncreateMedia(createMediaDto: CreateMediaDto, user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/media/media.service.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createMediaDto\n                                    \n                                                CreateMediaDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            deleteMedia\n                        \n                        \n                    \n                \n            \n            \n                \ndeleteMedia(id: uuid, user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/media/media.service.ts:45\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                            uuid\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getAllMedia\n                        \n                        \n                    \n                \n            \n            \n                \ngetAllMedia(user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/media/media.service.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getMediaById\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getMediaById(id: uuid, user)\n                \n            \n\n\n            \n                \n                    Defined in src/media/media.service.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                            uuid\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            updateMedia\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateMedia(id: uuid, updateMediaDto: UpdateMediaDto, user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/media/media.service.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                            uuid\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateMediaDto\n                                    \n                                                UpdateMediaDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common'\nimport { InjectRepository } from '@nestjs/typeorm'\nimport { Media } from './media.entity'\nimport { CreateMediaDto } from './dto/create-media.dto'\nimport { User } from '../user/user.entity'\nimport uuid from 'uuid'\nimport { MediaRepository } from './media.repository'\nimport { UpdateMediaDto } from './dto/update-media.dto'\n\n@Injectable()\nexport class MediaService {\n\n  constructor(\n    @InjectRepository(MediaRepository)\n    private readonly mediaRepository: MediaRepository) {\n  }\n\n  getAllMedia(user: User): Promise {\n    return this.mediaRepository.find({ where: { userId: user.id } })\n  }\n\n  async getMediaById(id: uuid, user): Promise {\n    const result = await this.mediaRepository.findOne({ where: { id, userId: user.id } })\n    if (!result) {\n      throw new NotFoundException(`Media with ID \"${id}\" not found.`)\n    } else {\n      return result\n    }\n  }\n\n  createMedia(createMediaDto: CreateMediaDto, user: User): Promise {\n    const newMedia = Object.assign(new Media(), createMediaDto, { user })\n    return newMedia.save()\n  }\n\n  async updateMedia(id: uuid, updateMediaDto: UpdateMediaDto, user: User): Promise {\n    const media = await this.getMediaById(id, user)\n    if (Object.entries(updateMediaDto).length === 0) {\n      return media\n    }\n    const updatedMedia = Object.assign(media, updateMediaDto)\n    return await updatedMedia.save()\n  }\n\n  deleteMedia(id: uuid, user: User): Promise {\n    return this.mediaRepository.deleteMedia(id, user)\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Transaction.html":{"url":"classes/Transaction.html","title":"class - Transaction","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Transaction\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/transactions/transaction.entity.ts\n        \n\n\n            \n                Extends\n            \n            \n                    BaseEntity\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                amount\n                            \n                            \n                                category\n                            \n                            \n                                categoryId\n                            \n                            \n                                creationDate\n                            \n                            \n                                date\n                            \n                            \n                                description\n                            \n                            \n                                id\n                            \n                            \n                                image\n                            \n                            \n                                imageId\n                            \n                            \n                                modificationDate\n                            \n                            \n                                title\n                            \n                            \n                                user\n                            \n                            \n                                userId\n                            \n                            \n                                version\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            amount\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Transform(undefined)@Column('decimal', {nullable: false})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/transactions/transaction.entity.ts:33\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            category\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Category\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Exclude()@ManyToOne(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/transactions/transaction.entity.ts:68\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            categoryId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     uuid\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({nullable: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/transactions/transaction.entity.ts:36\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            creationDate\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @CreateDateColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/transactions/transaction.entity.ts:49\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            date\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({nullable: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/transactions/transaction.entity.ts:39\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            description\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({length: 250, nullable: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/transactions/transaction.entity.ts:29\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     uuid\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn('uuid')\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/transactions/transaction.entity.ts:23\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            image\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Media\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Exclude()@OneToOne(undefined, undefined)@JoinColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/transactions/transaction.entity.ts:64\n                            \n                        \n\n                \n                    \n                        Relations\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            imageId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     uuid\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({nullable: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/transactions/transaction.entity.ts:42\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            modificationDate\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @UpdateDateColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/transactions/transaction.entity.ts:52\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            title\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({length: 20, nullable: false})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/transactions/transaction.entity.ts:26\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            user\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         User\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Exclude()@ManyToOne(undefined, undefined, {onDelete: 'CASCADE'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/transactions/transaction.entity.ts:72\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            userId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     uuid\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Exclude()@Column({nullable: false})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/transactions/transaction.entity.ts:46\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            version\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @VersionColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/transactions/transaction.entity.ts:55\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  BaseEntity,\n  Column,\n  CreateDateColumn,\n  Entity,\n  JoinColumn,\n  ManyToOne,\n  OneToOne,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n  VersionColumn,\n} from 'typeorm'\nimport { User } from '../user/user.entity'\nimport { Category } from '../categories/category.entity'\nimport { Media } from '../media/media.entity'\nimport uuid from 'uuid'\nimport { Exclude, Transform } from 'class-transformer'\n\n@Entity()\nexport class Transaction extends BaseEntity {\n\n  @PrimaryGeneratedColumn('uuid')\n  id: uuid\n\n  @Column({ length: 20, nullable: false })\n  title: string\n\n  @Column({ length: 250, nullable: true })\n  description: string\n\n  @Transform(amount => parseFloat(amount))\n  @Column('decimal', { nullable: false })\n  amount: number\n\n  @Column({ nullable: true })\n  categoryId: uuid\n\n  @Column({ nullable: true })\n  date: string\n\n  @Column({ nullable: true })\n  imageId: uuid\n\n  @Exclude()\n  @Column({ nullable: false })\n  userId: uuid\n\n  @CreateDateColumn()\n  creationDate: string\n\n  @UpdateDateColumn()\n  modificationDate: string\n\n  @VersionColumn()\n  version: number\n\n  /**\n   * Relations\n   */\n\n  @Exclude()\n  @OneToOne(() => Media, media => media.transaction)\n  @JoinColumn()\n  image: Media\n\n  @Exclude()\n  @ManyToOne(() => Category, category => category.transactions)\n  category: Category\n\n  @Exclude()\n  @ManyToOne(() => User, user => user.transactions, { onDelete: 'CASCADE' })\n  user: User\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/TransactionRepository.html":{"url":"classes/TransactionRepository.html","title":"class - TransactionRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  TransactionRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/transactions/transaction.repository.ts\n        \n\n\n            \n                Extends\n            \n            \n                    Repository\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createTransaction\n                            \n                            \n                                    Async\n                                getTransactions\n                            \n                            \n                                    Async\n                                updateTransaction\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            logger\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new Logger('TransactionRepository')\n                        \n                    \n                        \n                            \n                                    Defined in src/transactions/transaction.repository.ts:14\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            createTransaction\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createTransaction(createTransactionDto: CreateTransactionDto, user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/transactions/transaction.repository.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createTransactionDto\n                                    \n                                                CreateTransactionDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getTransactions\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getTransactions(filterDto: GetTransactionsFilterDto, user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/transactions/transaction.repository.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    filterDto\n                                    \n                                                GetTransactionsFilterDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            updateTransaction\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateTransaction(transaction: Transaction, updateTransactionDto: UpdateTransactionDto)\n                \n            \n\n\n            \n                \n                    Defined in src/transactions/transaction.repository.ts:51\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    transaction\n                                    \n                                                Transaction\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateTransactionDto\n                                    \n                                                UpdateTransactionDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { EntityRepository, Like, Repository } from 'typeorm'\nimport { Transaction } from './transaction.entity'\nimport { CreateTransactionDto } from './dto/create-transaction.dto'\nimport { GetTransactionsFilterDto } from './dto/get-transactions-filter.dto'\nimport { User } from '../user/user.entity'\nimport { BadRequestException, InternalServerErrorException, Logger } from '@nestjs/common'\nimport { UpdateTransactionDto } from './dto/update-transaction.dto'\n\nconst PG_UNIQUE_CONSTRAINT_VIOLATION = '23505'\nconst PG_FOREIGN_KEY_CONSTRAINT_VIOLATION = '23503'\n\n@EntityRepository(Transaction)\nexport class TransactionRepository extends Repository {\n  private logger = new Logger('TransactionRepository')\n\n  async getTransactions(filterDto: GetTransactionsFilterDto, user: User): Promise {\n    const { search } = filterDto\n    try {\n      const where = search ? [\n        {\n          title: Like(`%${search}%`),\n          userId: user.id,\n        },\n        {\n          description: Like(`%${search}%`),\n          userId: user.id,\n        },\n      ] : { userId: user.id }\n      return await this.find({ where })\n    } catch (e) {\n      this.logger.error(`Failed to get transactions for User \"${user.email}\". Filters: ${JSON.stringify(filterDto)}`, e.stack)\n      throw new InternalServerErrorException()\n    }\n  }\n\n  async createTransaction(createTransactionDto: CreateTransactionDto, user: User): Promise {\n    const transaction = Object.assign(new Transaction(), createTransactionDto, { user })\n    try {\n      return await transaction.save()\n    } catch (e) {\n      this.logger.error(`Failed to create transaction for User \"${user.email}\". Data: ${JSON.stringify(createTransactionDto)}`, e.stack)\n      if (e.code === PG_FOREIGN_KEY_CONSTRAINT_VIOLATION) {\n        throw new BadRequestException('Invalid mediaId or categoryId provided.')\n      } else if (e.code === PG_UNIQUE_CONSTRAINT_VIOLATION) {\n        throw new BadRequestException(`Media with ID \"${transaction.id}\" is already linked with another entity.`)\n      }\n      throw new InternalServerErrorException()\n    }\n  }\n\n  async updateTransaction(transaction: Transaction, updateTransactionDto: UpdateTransactionDto) {\n    const updatedTransaction = Object.assign(transaction, updateTransactionDto)\n    try {\n      return await updatedTransaction.save()\n    } catch (e) {\n      if (e.code === PG_FOREIGN_KEY_CONSTRAINT_VIOLATION) {\n        throw new BadRequestException(`Invalid mediaId or categoryId provided for category with ID \"${transaction.id}\".`)\n      } else if (e.code === PG_UNIQUE_CONSTRAINT_VIOLATION) {\n        throw new BadRequestException(`Media with ID \"${transaction.id}\" is already linked with another entity.`)\n      }\n      throw new InternalServerErrorException()\n    }\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/TransactionsController.html":{"url":"controllers/TransactionsController.html","title":"controller - TransactionsController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  TransactionsController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/transactions/transactions.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                transactions\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createTransaction\n                            \n                            \n                                deleteTransaction\n                            \n                            \n                                getTransactionById\n                            \n                            \n                                getTransactions\n                            \n                            \n                                updateTransaction\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            createTransaction\n                        \n                        \n                    \n                \n            \n            \n                \ncreateTransaction(createTransactionDto: CreateTransactionDto, user: User)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@UsePipes(new ValidationPipe())\n                \n            \n\n            \n                \n                    Defined in src/transactions/transactions.controller.ts:59\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createTransactionDto\n                                    \n                                                CreateTransactionDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            deleteTransaction\n                        \n                        \n                    \n                \n            \n            \n                \ndeleteTransaction(id: uuid, user: User)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/:id')\n                \n            \n\n            \n                \n                    Defined in src/transactions/transactions.controller.ts:78\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                            uuid\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getTransactionById\n                        \n                        \n                    \n                \n            \n            \n                \ngetTransactionById(id: uuid, user: User)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:id')\n                \n            \n\n            \n                \n                    Defined in src/transactions/transactions.controller.ts:50\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                            uuid\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getTransactions\n                        \n                        \n                    \n                \n            \n            \n                \ngetTransactions(filterDto: GetTransactionsFilterDto, user: User)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/transactions/transactions.controller.ts:41\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    filterDto\n                                    \n                                                GetTransactionsFilterDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            updateTransaction\n                        \n                        \n                    \n                \n            \n            \n                \nupdateTransaction(id: uuid, updateTransactionDto: UpdateTransactionDto, user: User)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('/:id')@UsePipes(new ValidationPipe())\n                \n            \n\n            \n                \n                    Defined in src/transactions/transactions.controller.ts:69\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                            uuid\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateTransactionDto\n                                    \n                                                UpdateTransactionDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  ClassSerializerInterceptor,\n  Controller,\n  Delete,\n  Get,\n  Logger,\n  Param,\n  ParseUUIDPipe,\n  Patch,\n  Post,\n  Query,\n  UseGuards,\n  UseInterceptors,\n  UsePipes,\n  ValidationPipe,\n} from '@nestjs/common'\nimport { TransactionsService } from './transactions.service'\nimport { CreateTransactionDto } from './dto/create-transaction.dto'\nimport { GetTransactionsFilterDto } from './dto/get-transactions-filter.dto'\nimport { Transaction } from './transaction.entity'\nimport { AuthGuard } from '@nestjs/passport'\nimport { User } from '../user/user.entity'\nimport { GetUser } from '../user/get-user.decorator'\nimport uuid from 'uuid'\nimport { UpdateTransactionDto } from './dto/update-transaction.dto'\nimport { ApiBearerAuth, ApiUseTags } from '@nestjs/swagger'\n\n@ApiBearerAuth()\n@ApiUseTags('transactions')\n@Controller('transactions')\n@UseGuards(AuthGuard())\n@UseInterceptors(ClassSerializerInterceptor)\nexport class TransactionsController {\n  private logger = new Logger('TransactionsController')\n\n  constructor(private readonly transactionsService: TransactionsService) {\n  }\n\n  @Get()\n  getTransactions(\n    @Query(new ValidationPipe({ whitelist: true, transform: true })) filterDto: GetTransactionsFilterDto,\n    @GetUser() user: User,\n  ): Promise {\n    this.logger.verbose(`User \"${user.email}\" retrieving all transactions. Filters: ${JSON.stringify(filterDto)}`)\n    return this.transactionsService.getTransactions(filterDto, user)\n  }\n\n  @Get('/:id')\n  getTransactionById(\n    @Param('id', new ParseUUIDPipe()) id: uuid,\n    @GetUser() user: User,\n  ): Promise {\n    return this.transactionsService.getTransactionById(id, user)\n  }\n\n  @Post()\n  @UsePipes(new ValidationPipe({ whitelist: true, transform: true }))\n  createTransaction(\n    @Body() createTransactionDto: CreateTransactionDto,\n    @GetUser() user: User,\n  ): Promise {\n    this.logger.verbose(`User \"${user.email}\" creating a new transaction. Data: ${JSON.stringify(createTransactionDto)}`)\n    return this.transactionsService.createTransaction(createTransactionDto, user)\n  }\n\n  @Patch('/:id')\n  @UsePipes(new ValidationPipe({ whitelist: true, transform: true }))\n  updateTransaction(\n    @Param('id', new ParseUUIDPipe()) id: uuid,\n    @Body() updateTransactionDto: UpdateTransactionDto,\n    @GetUser() user: User,\n  ): Promise {\n    return this.transactionsService.updateTransaction(id, updateTransactionDto, user)\n  }\n\n  @Delete('/:id')\n  deleteTransaction(\n    @Param('id', new ParseUUIDPipe()) id: uuid,\n    @GetUser() user: User,\n  ): Promise {\n    return this.transactionsService.deleteTransaction(id, user)\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/TransactionsModule.html":{"url":"modules/TransactionsModule.html","title":"module - TransactionsModule","body":"\n                   \n\n\n\n\n    Modules\n    TransactionsModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_TransactionsModule\n\n\n\ncluster_TransactionsModule_imports\n\n\n\ncluster_TransactionsModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nTransactionsModule\n\nTransactionsModule\n\nTransactionsModule -->\n\nAuthModule->TransactionsModule\n\n\n\n\n\nCategoriesModule\n\nCategoriesModule\n\nTransactionsModule -->\n\nCategoriesModule->TransactionsModule\n\n\n\n\n\nMediaModule\n\nMediaModule\n\nTransactionsModule -->\n\nMediaModule->TransactionsModule\n\n\n\n\n\nTransactionsService\n\nTransactionsService\n\nTransactionsModule -->\n\nTransactionsService->TransactionsModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/transactions/transactions.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            TransactionsService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            TransactionsController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            CategoriesModule\n                        \n                        \n                            MediaModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common'\nimport { TransactionsController } from './transactions.controller'\nimport { TransactionsService } from './transactions.service'\nimport { TypeOrmModule } from '@nestjs/typeorm'\nimport { TransactionRepository } from './transaction.repository'\nimport { AuthModule } from '../auth/auth.module'\nimport { MediaModule } from '../media/media.module'\nimport { CategoriesModule } from '../categories/categories.module'\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([TransactionRepository]),\n    AuthModule,\n    MediaModule,\n    CategoriesModule,\n  ],\n  controllers: [TransactionsController],\n  providers: [TransactionsService],\n})\nexport class TransactionsModule {\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/TransactionsService.html":{"url":"injectables/TransactionsService.html","title":"injectable - TransactionsService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  TransactionsService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/transactions/transactions.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createTransaction\n                            \n                            \n                                    Async\n                                deleteTransaction\n                            \n                            \n                                    Async\n                                getTransactionById\n                            \n                            \n                                getTransactions\n                            \n                            \n                                    Async\n                                updateTransaction\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(transactionRepository: TransactionRepository, mediaService: MediaService, categoriesService: CategoriesService)\n                    \n                \n                        \n                            \n                                Defined in src/transactions/transactions.service.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        transactionRepository\n                                                  \n                                                        \n                                                                        TransactionRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        mediaService\n                                                  \n                                                        \n                                                                        MediaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        categoriesService\n                                                  \n                                                        \n                                                                        CategoriesService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            createTransaction\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createTransaction(createTransactionDto: CreateTransactionDto, user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/transactions/transactions.service.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createTransactionDto\n                                    \n                                                CreateTransactionDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            deleteTransaction\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteTransaction(id: uuid, user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/transactions/transactions.service.ts:94\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                            uuid\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getTransactionById\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getTransactionById(id: uuid, user)\n                \n            \n\n\n            \n                \n                    Defined in src/transactions/transactions.service.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                            uuid\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getTransactions\n                        \n                        \n                    \n                \n            \n            \n                \ngetTransactions(filterDto: GetTransactionsFilterDto, user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/transactions/transactions.service.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    filterDto\n                                    \n                                                GetTransactionsFilterDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            updateTransaction\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateTransaction(id: uuid, updateTransactionDto: UpdateTransactionDto, user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/transactions/transactions.service.ts:55\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                            uuid\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateTransactionDto\n                                    \n                                                UpdateTransactionDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Readonly\n                            logger\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new Logger()\n                        \n                    \n                        \n                            \n                                    Defined in src/transactions/transactions.service.ts:15\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import { BadRequestException, Injectable, Logger, NotFoundException } from '@nestjs/common'\nimport { TransactionRepository } from './transaction.repository'\nimport { InjectRepository } from '@nestjs/typeorm'\nimport { Transaction } from './transaction.entity'\nimport { CreateTransactionDto } from './dto/create-transaction.dto'\nimport { GetTransactionsFilterDto } from './dto/get-transactions-filter.dto'\nimport { User } from '../user/user.entity'\nimport uuid from 'uuid'\nimport { UpdateTransactionDto } from './dto/update-transaction.dto'\nimport { MediaService } from '../media/media.service'\nimport { CategoriesService } from '../categories/categories.service'\n\n@Injectable()\nexport class TransactionsService {\n  private readonly logger = new Logger()\n\n  constructor(\n    @InjectRepository(TransactionRepository)\n    private readonly transactionRepository: TransactionRepository,\n    private readonly mediaService: MediaService,\n    private readonly categoriesService: CategoriesService,\n  ) {\n  }\n\n  getTransactions(filterDto: GetTransactionsFilterDto, user: User): Promise {\n    return this.transactionRepository.getTransactions(filterDto, user)\n  }\n\n  async getTransactionById(id: uuid, user): Promise {\n    const result = await this.transactionRepository.findOne({ where: { id, userId: user.id } })\n    if (!result) {\n      throw new NotFoundException(`Transaction with ID \"${id}\" not found.`)\n    } else {\n      return result\n    }\n  }\n\n  async createTransaction(createTransactionDto: CreateTransactionDto, user: User): Promise {\n    try {\n      // those calls are done to ensure that the category and/or media provided belongs to the user\n      // TODO: replace this to do only one db call\n      if (createTransactionDto.imageId) {\n        await this.mediaService.getMediaById(createTransactionDto.imageId, user)\n      }\n      if (createTransactionDto.categoryId) {\n        await this.categoriesService.getCategoryById(createTransactionDto.categoryId, user)\n      }\n    } catch (e) {\n      this.logger.warn(`createTransaction: mediaId or categoryId from other user`, e)\n      throw new BadRequestException('Invalid mediaId or categoryId provided.')\n    }\n    return this.transactionRepository.createTransaction(createTransactionDto, user)\n  }\n\n  async updateTransaction(id: uuid, updateTransactionDto: UpdateTransactionDto, user: User): Promise {\n    const transaction = await this.getTransactionById(id, user)\n\n    // because transactionRepository.updateTransaction modifies the object ...\n    const previousImageId = transaction.imageId\n\n    if (Object.entries(updateTransactionDto).length === 0) {\n      return transaction\n    }\n    try {\n      // those calls are done to ensure that the category and/or media provided belongs to the user\n      // TODO: replace this to do only one db call\n      if (updateTransactionDto.imageId) {\n        await this.mediaService.getMediaById(updateTransactionDto.imageId, user)\n      }\n      if (updateTransactionDto.categoryId) {\n        await this.categoriesService.getCategoryById(updateTransactionDto.categoryId, user)\n      }\n    } catch (e) {\n      this.logger.warn(`updateTransaction: mediaId or categoryId from other user`, e)\n      throw new BadRequestException('Invalid mediaId or categoryId provided.')\n    }\n\n    const updatedTransaction = await this.transactionRepository.updateTransaction(transaction, updateTransactionDto)\n\n    if (\n      previousImageId\n      && updateTransactionDto.hasOwnProperty('imageId')\n      && (updateTransactionDto.imageId === null || updateTransactionDto.imageId !== previousImageId)\n    ) {\n      try {\n        await this.mediaService.deleteMedia(previousImageId, user)\n      } catch (e) {\n        this.logger.error(`Transaction successfully updated but media with id ${previousImageId} could not be deleted.`)\n      }\n    }\n    return updatedTransaction\n  }\n\n  async deleteTransaction(id: uuid, user: User): Promise {\n    const { imageId } = await this.getTransactionById(id, user)\n    const res = await this.transactionRepository.delete({ id, userId: user.id })\n\n    if (res.affected === 0) {\n      throw new NotFoundException(`Transaction with ID \"${id}\" not found.`)\n    }\n    if (imageId) {\n      try {\n        await this.mediaService.deleteMedia(imageId, user)\n      } catch (e) {\n        this.logger.error(`Transaction successfully deleted but media with id ${imageId} could not be deleted.`)\n      }\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateCategoryDto.html":{"url":"classes/UpdateCategoryDto.html","title":"class - UpdateCategoryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateCategoryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/categories/dto/update-category.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                description\n                            \n                            \n                                    Optional\n                                imageId\n                            \n                            \n                                    Optional\n                                parentCategoryId\n                            \n                            \n                                    Optional\n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            description\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelPropertyOptional()@Transform(undefined)@IsOptional()@IsString()@MaxLength(250)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/categories/dto/update-category.dto.ts:20\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            imageId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     uuid\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelPropertyOptional({type: String})@Transform(undefined)@IsOptional()@IsUUID()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/categories/dto/update-category.dto.ts:26\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            parentCategoryId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     uuid\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelPropertyOptional({type: String})@Transform(undefined)@IsOptional()@IsUUID()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/categories/dto/update-category.dto.ts:32\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            title\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelPropertyOptional()@IsOptional()@IsNotEmpty()@IsString()@MaxLength(25)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/categories/dto/update-category.dto.ts:13\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsOptional, IsString, IsUUID, MaxLength } from 'class-validator'\nimport uuid from 'uuid'\nimport { Transform } from 'class-transformer'\nimport { ApiModelPropertyOptional } from '@nestjs/swagger'\n\nexport class UpdateCategoryDto {\n\n  @ApiModelPropertyOptional()\n  @IsOptional()\n  @IsNotEmpty()\n  @IsString()\n  @MaxLength(25)\n  title?: string\n\n  @ApiModelPropertyOptional()\n  @Transform(description => description || null)\n  @IsOptional()\n  @IsString()\n  @MaxLength(250)\n  description?: string\n\n  @ApiModelPropertyOptional({ type: String })\n  @Transform(imageId => imageId || null)\n  @IsOptional()\n  @IsUUID()\n  imageId?: uuid\n\n  @ApiModelPropertyOptional({ type: String })\n  @Transform(parentCategoryId => parentCategoryId || null)\n  @IsOptional()\n  @IsUUID()\n  parentCategoryId?: uuid\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateMediaDto.html":{"url":"classes/UpdateMediaDto.html","title":"class - UpdateMediaDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateMediaDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/media/dto/update-media.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                description\n                            \n                            \n                                    Optional\n                                title\n                            \n                            \n                                    Optional\n                                type\n                            \n                            \n                                    Optional\n                                url\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            description\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelPropertyOptional()@IsOptional()@IsNotEmpty()@IsString()@MaxLength(250)@Transform(undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/media/dto/update-media.dto.ts:29\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            title\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelPropertyOptional()@IsOptional()@IsNotEmpty()@IsString()@MaxLength(25)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/media/dto/update-media.dto.ts:13\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            type\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         MediaType\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelPropertyOptional({enum: undefined})@IsOptional()@IsIn(undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/media/dto/update-media.dto.ts:34\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            url\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelPropertyOptional()@IsOptional()@IsNotEmpty()@IsString()@IsUrl()@MaxLength(2048)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/media/dto/update-media.dto.ts:21\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsIn, IsNotEmpty, IsOptional, IsString, IsUrl, MaxLength } from 'class-validator'\nimport { MediaType } from '../media-type.enum'\nimport { Transform } from 'class-transformer'\nimport { ApiModelPropertyOptional } from '@nestjs/swagger'\n\nexport class UpdateMediaDto {\n\n  @ApiModelPropertyOptional()\n  @IsOptional()\n  @IsNotEmpty()\n  @IsString()\n  @MaxLength(25)\n  title?: string\n\n  @ApiModelPropertyOptional()\n  @IsOptional()\n  @IsNotEmpty()\n  @IsString()\n  @IsUrl()\n  @MaxLength(2048)\n  url?: string\n\n  @ApiModelPropertyOptional()\n  @IsOptional()\n  @IsNotEmpty()\n  @IsString()\n  @MaxLength(250)\n  @Transform(description => description || null)\n  description?: string\n\n  @ApiModelPropertyOptional({ enum: ['IMAGE', 'VIDEO'] })\n  @IsOptional()\n  @IsIn(Object.values(MediaType))\n  type?: MediaType\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateTransactionDto.html":{"url":"classes/UpdateTransactionDto.html","title":"class - UpdateTransactionDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateTransactionDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/transactions/dto/update-transaction.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                amount\n                            \n                            \n                                    Optional\n                                categoryId\n                            \n                            \n                                    Optional\n                                date\n                            \n                            \n                                    Optional\n                                description\n                            \n                            \n                                    Optional\n                                imageId\n                            \n                            \n                                    Optional\n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            amount\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelPropertyOptional()@Transform(undefined)@IsOptional()@IsNotEmpty()@IsNumber()@NotEquals(0)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/transactions/dto/update-transaction.dto.ts:29\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            categoryId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     uuid\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelPropertyOptional({type: String})@Transform(undefined)@IsOptional()@IsUUID()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/transactions/dto/update-transaction.dto.ts:48\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            date\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelPropertyOptional()@Transform(undefined)@IsOptional()@IsDateString()@MaxLength(250)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/transactions/dto/update-transaction.dto.ts:36\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            description\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelPropertyOptional()@Transform(undefined)@IsOptional()@IsNotEmpty()@IsString()@MaxLength(250)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/transactions/dto/update-transaction.dto.ts:21\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            imageId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     uuid\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelPropertyOptional({type: String})@Transform(undefined)@IsOptional()@IsUUID()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/transactions/dto/update-transaction.dto.ts:42\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            title\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelPropertyOptional()@IsOptional()@IsNotEmpty()@IsString()@MaxLength(25)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/transactions/dto/update-transaction.dto.ts:13\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsDateString, IsNotEmpty, IsNumber, IsOptional, IsString, IsUUID, MaxLength, NotEquals } from 'class-validator'\nimport uuid from 'uuid'\nimport { Transform } from 'class-transformer'\nimport { ApiModelPropertyOptional } from '@nestjs/swagger'\n\nexport class UpdateTransactionDto {\n\n  @ApiModelPropertyOptional()\n  @IsOptional()\n  @IsNotEmpty()\n  @IsString()\n  @MaxLength(25)\n  title?: string\n\n  @ApiModelPropertyOptional()\n  @Transform(description => description || null)\n  @IsOptional()\n  @IsNotEmpty()\n  @IsString()\n  @MaxLength(250)\n  description?: string\n\n  @ApiModelPropertyOptional()\n  @Transform(amount => parseFloat(amount))\n  @IsOptional()\n  @IsNotEmpty()\n  @IsNumber()\n  @NotEquals(0)\n  amount?: number\n\n  @ApiModelPropertyOptional()\n  @Transform(date => date || null)\n  @IsOptional()\n  @IsDateString()\n  @MaxLength(250)\n  date?: string\n\n  @ApiModelPropertyOptional({ type: String })\n  @Transform(imageId => imageId || null)\n  @IsOptional()\n  @IsUUID()\n  imageId?: uuid\n\n  @ApiModelPropertyOptional({ type: String })\n  @Transform(categoryId => categoryId || null)\n  @IsOptional()\n  @IsUUID()\n  categoryId?: uuid\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserDto.html":{"url":"classes/UpdateUserDto.html","title":"class - UpdateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/update-user.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                defaultCategoryId\n                            \n                            \n                                    Optional\n                                pictureId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            defaultCategoryId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelPropertyOptional({type: String})@Transform(undefined)@IsOptional()@IsUUID()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/update-user.dto.ts:11\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            pictureId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelPropertyOptional({type: String})@Transform(undefined)@IsOptional()@IsUUID()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/update-user.dto.ts:17\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsOptional, IsUUID } from 'class-validator'\nimport { Transform } from 'class-transformer'\nimport { ApiModelPropertyOptional } from '@nestjs/swagger'\n\nexport class UpdateUserDto {\n\n  @ApiModelPropertyOptional({ type: String })\n  @Transform(categoryId => categoryId || null)\n  @IsOptional()\n  @IsUUID()\n  defaultCategoryId?: string\n\n  @ApiModelPropertyOptional({ type: String })\n  @Transform(categoryId => categoryId || null)\n  @IsOptional()\n  @IsUUID()\n  pictureId?: string\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/User.html":{"url":"classes/User.html","title":"class - User","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.entity.ts\n        \n\n\n            \n                Extends\n            \n            \n                    BaseEntity\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                categories\n                            \n                            \n                                creationDate\n                            \n                            \n                                currency\n                            \n                            \n                                defaultCategory\n                            \n                            \n                                defaultCategoryId\n                            \n                            \n                                email\n                            \n                            \n                                id\n                            \n                            \n                                lastLoginDate\n                            \n                            \n                                lastLoginIp\n                            \n                            \n                                media\n                            \n                            \n                                modificationDate\n                            \n                            \n                                password\n                            \n                            \n                                picture\n                            \n                            \n                                pictureId\n                            \n                            \n                                transactions\n                            \n                            \n                                verified\n                            \n                            \n                                version\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                validatePassword\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            categories\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Category[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Exclude()@OneToMany(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/user.entity.ts:92\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            creationDate\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @CreateDateColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/user.entity.ts:60\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            currency\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         CurrencyEnum\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'enum', enum: CurrencyEnum, default: undefined})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/user.entity.ts:41\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            defaultCategory\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Category\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Exclude()@OneToOne(undefined, undefined)@JoinColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/user.entity.ts:75\n                            \n                        \n\n                \n                    \n                        Relations\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            defaultCategoryId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     uuid\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({nullable: true, default: undefined})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/user.entity.ts:48\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            email\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({length: 255, nullable: false})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/user.entity.ts:30\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     uuid\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn('uuid')\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/user.entity.ts:27\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            lastLoginDate\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({length: 50, nullable: true, default: undefined})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/user.entity.ts:54\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            lastLoginIp\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({length: 255, nullable: true, default: undefined})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/user.entity.ts:57\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            media\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Media[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Exclude()@OneToMany(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/user.entity.ts:84\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            modificationDate\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @UpdateDateColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/user.entity.ts:63\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            password\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Exclude()@Column({length: 60, nullable: false})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/user.entity.ts:34\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            picture\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Media\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Exclude()@OneToOne(undefined, undefined)@JoinColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/user.entity.ts:80\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            pictureId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     uuid\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({nullable: true, default: undefined})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/user.entity.ts:51\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            transactions\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Transaction[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Exclude()@OneToMany(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/user.entity.ts:88\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            verified\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Exclude()@Column({default: false})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/user.entity.ts:45\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            version\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @VersionColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/user.entity.ts:66\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            validatePassword\n                        \n                        \n                    \n                \n            \n            \n                \nvalidatePassword(password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.entity.ts:94\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  BaseEntity,\n  Column,\n  CreateDateColumn,\n  Entity,\n  JoinColumn,\n  OneToMany,\n  OneToOne,\n  PrimaryGeneratedColumn,\n  Unique,\n  UpdateDateColumn,\n  VersionColumn,\n} from 'typeorm'\nimport * as bcrypt from 'bcryptjs'\nimport { Transaction } from '../transactions/transaction.entity'\nimport { Category } from '../categories/category.entity'\nimport { Media } from '../media/media.entity'\nimport { CurrencyEnum } from './currency.enum'\nimport uuid from 'uuid'\nimport { Exclude } from 'class-transformer'\n\n@Entity()\n@Unique(['email'])\nexport class User extends BaseEntity {\n\n  @PrimaryGeneratedColumn('uuid')\n  id: uuid\n\n  @Column({ length: 255, nullable: false })\n  email: string\n\n  @Exclude()\n  @Column({ length: 60, nullable: false })\n  password: string\n\n  @Column({\n    type: 'enum',\n    enum: CurrencyEnum,\n    default: CurrencyEnum.EURO,\n  })\n  currency: CurrencyEnum\n\n  @Exclude()\n  @Column({ default: false })\n  verified: boolean\n\n  @Column({ nullable: true, default: null })\n  defaultCategoryId: uuid\n\n  @Column({ nullable: true, default: null })\n  pictureId: uuid\n\n  @Column({ length: 50, nullable: true, default: null })\n  lastLoginDate: string\n\n  @Column({ length: 255, nullable: true, default: null })\n  lastLoginIp: string\n\n  @CreateDateColumn()\n  creationDate: string\n\n  @UpdateDateColumn()\n  modificationDate: string\n\n  @VersionColumn()\n  version: number\n\n  /**\n   * Relations\n   */\n\n  @Exclude()\n  @OneToOne(() => Category, category => category.userForDefaultCategory)\n  @JoinColumn()\n  defaultCategory: Category\n\n  @Exclude()\n  @OneToOne(() => Media, media => media.userForPicture)\n  @JoinColumn()\n  picture: Media\n\n  @Exclude()\n  @OneToMany(() => Media, media => media.user)\n  media: Media[]\n\n  @Exclude()\n  @OneToMany(() => Transaction, transaction => transaction.user)\n  transactions: Transaction[]\n\n  @Exclude()\n  @OneToMany(() => Category, category => category.user)\n  categories: Category[]\n\n  validatePassword(password: string): Promise {\n    return bcrypt.compare(password, this.password)\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserRepository.html":{"url":"classes/UserRepository.html","title":"class - UserRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.repository.ts\n        \n\n\n            \n                Extends\n            \n            \n                    Repository\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Static\n                                _hashPassword\n                            \n                            \n                                    Async\n                                signUp\n                            \n                            \n                                    Async\n                                updateUser\n                            \n                            \n                                    Async\n                                validatePassword\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            Static\n                            _hashPassword\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    _hashPassword(password: string, salt: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.repository.ts:14\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    salt\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            signUp\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    signUp(authCredentialsDto: AuthCredentialsDto, verificationEnabled: boolean)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.repository.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    authCredentialsDto\n                                    \n                                                AuthCredentialsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    verificationEnabled\n                                    \n                                                boolean\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            updateUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateUser(updateUserDto: UpdateUserDto, user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.repository.ts:46\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    updateUserDto\n                                    \n                                                UpdateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            validatePassword\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validatePassword(authCredentialsDto: AuthCredentialsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.repository.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    authCredentialsDto\n                                    \n                                                AuthCredentialsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { EntityRepository, Repository } from 'typeorm'\nimport { User } from './user.entity'\nimport { AuthCredentialsDto } from '../auth/dto/auth-credentials.dto'\nimport { BadRequestException, ConflictException, InternalServerErrorException } from '@nestjs/common'\nimport * as bcrypt from 'bcryptjs'\nimport { UpdateUserDto } from './update-user.dto'\n\nconst PG_UNIQUE_CONSTRAINT_VIOLATION = '23505'\nconst PG_FOREIGN_KEY_CONSTRAINT_VIOLATION = '23503'\n\n@EntityRepository(User)\nexport class UserRepository extends Repository {\n\n  private static _hashPassword(password: string, salt: string): Promise {\n    return bcrypt.hash(password, salt)\n  }\n\n  async signUp(authCredentialsDto: AuthCredentialsDto, verificationEnabled: boolean): Promise {\n    const { email, password } = authCredentialsDto\n    const salt = await bcrypt.genSalt()\n    const user = Object.assign(this.create(), {\n      email,\n      verified: !verificationEnabled,\n      password: await UserRepository._hashPassword(password, salt),\n    })\n    try {\n      return await user.save()\n    } catch (e) {\n      if (e.code === PG_UNIQUE_CONSTRAINT_VIOLATION) {\n        throw new ConflictException('Email already exists')\n      }\n      throw new InternalServerErrorException()\n    }\n  }\n\n  async validatePassword(authCredentialsDto: AuthCredentialsDto): Promise {\n    const { email, password } = authCredentialsDto\n    const user = await this.findOne({ where: { email } })\n    if (user && await user.validatePassword(password)) {\n      return user\n    } else {\n      return null\n    }\n  }\n\n  async updateUser(updateUserDto: UpdateUserDto, user: User): Promise {\n    const updatedUser = Object.assign(user, updateUserDto)\n    try {\n      return await updatedUser.save()\n    } catch (e) {\n      if (e.code === PG_FOREIGN_KEY_CONSTRAINT_VIOLATION) {\n        throw new BadRequestException(`Invalid pictureId or defaultCategoryId provided.`)\n      }\n      throw new InternalServerErrorException()\n    }\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                deleteCurrent\n                            \n                            \n                                getCurrent\n                            \n                            \n                                    Async\n                                updateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            deleteCurrent\n                        \n                        \n                    \n                \n            \n            \n                \ndeleteCurrent(user: User)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/current')\n                \n            \n\n            \n                \n                    Defined in src/user/users.controller.ts:45\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getCurrent\n                        \n                        \n                    \n                \n            \n            \n                \ngetCurrent(user: User)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/current')\n                \n            \n\n            \n                \n                    Defined in src/user/users.controller.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         User\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            updateUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateUser(updateUserDto: UpdateUserDto, user: User)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('/current')@UsePipes(new ValidationPipe())\n                \n            \n\n            \n                \n                    Defined in src/user/users.controller.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    updateUserDto\n                                    \n                                                UpdateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  ClassSerializerInterceptor,\n  Controller,\n  Delete,\n  Get,\n  Patch,\n  UseGuards,\n  UseInterceptors,\n  UsePipes,\n  ValidationPipe,\n} from '@nestjs/common'\nimport { GetUser } from './get-user.decorator'\nimport { User } from './user.entity'\nimport { AuthGuard } from '@nestjs/passport'\nimport { UsersService } from './users.service'\nimport { UpdateUserDto } from './update-user.dto'\nimport { ApiBearerAuth, ApiUseTags } from '@nestjs/swagger'\n\n@ApiBearerAuth()\n@ApiUseTags('users')\n@Controller('users')\n@UseGuards(AuthGuard())\n@UseInterceptors(ClassSerializerInterceptor)\nexport class UsersController {\n\n  constructor(private readonly usersService: UsersService) {\n  }\n\n  @Get('/current')\n  getCurrent(@GetUser() user: User): User {\n    return user\n  }\n\n  @Patch('/current')\n  @UsePipes(new ValidationPipe({ whitelist: true, transform: true }))\n  async updateUser(\n    @Body() updateUserDto: UpdateUserDto,\n    @GetUser() user: User,\n  ): Promise {\n    return this.usersService.updateUser(updateUserDto, user)\n  }\n\n  @Delete('/current')\n  deleteCurrent(@GetUser() user: User): Promise {\n    return this.usersService.deleteUser(user.id)\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_imports\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nMediaModule\n\nMediaModule\n\n\n\nUsersModule\n\nUsersModule\n\nUsersModule -->\n\nMediaModule->UsersModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/user/users.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            MediaModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UsersService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { forwardRef, Module } from '@nestjs/common'\nimport { TypeOrmModule } from '@nestjs/typeorm'\nimport { UsersController } from './users.controller'\nimport { UserRepository } from './user.repository'\nimport { UsersService } from './users.service'\nimport { AuthModule } from '../auth/auth.module'\nimport { MediaModule } from '../media/media.module'\nimport { CategoriesModule } from '../categories/categories.module'\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([UserRepository]),\n    forwardRef(() => AuthModule),\n    MediaModule,\n    forwardRef(() => CategoriesModule),\n  ],\n  providers: [\n    UsersService,\n  ],\n  controllers: [UsersController],\n  exports: [UsersService],\n})\n\nexport class UsersModule {\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/users.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                deleteUser\n                            \n                            \n                                findOne\n                            \n                            \n                                signUp\n                            \n                            \n                                    Async\n                                updateUser\n                            \n                            \n                                validatePassword\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepository: UserRepository, mediaService: MediaService, categoriesService: CategoriesService, configService: ConfigService)\n                    \n                \n                        \n                            \n                                Defined in src/user/users.service.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        UserRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        mediaService\n                                                  \n                                                        \n                                                                        MediaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        categoriesService\n                                                  \n                                                        \n                                                                        CategoriesService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        configService\n                                                  \n                                                        \n                                                                        ConfigService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            deleteUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteUser(id: uuid)\n                \n            \n\n\n            \n                \n                    Defined in src/user/users.service.ts:75\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                            uuid\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            findOne\n                        \n                        \n                    \n                \n            \n            \n                \nfindOne(email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user/users.service.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            signUp\n                        \n                        \n                    \n                \n            \n            \n                \nsignUp(authCredentialsDto: AuthCredentialsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/user/users.service.ts:30\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    authCredentialsDto\n                                    \n                                                AuthCredentialsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            updateUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateUser(updateUserDto: UpdateUserDto, user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/user/users.service.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    updateUserDto\n                                    \n                                                UpdateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            validatePassword\n                        \n                        \n                    \n                \n            \n            \n                \nvalidatePassword(authCrendentialsDto: AuthCredentialsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/user/users.service.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    authCrendentialsDto\n                                    \n                                                AuthCredentialsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Readonly\n                            logger\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new Logger()\n                        \n                    \n                        \n                            \n                                    Defined in src/user/users.service.ts:15\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import { BadRequestException, Injectable, Logger } from '@nestjs/common'\nimport { InjectRepository } from '@nestjs/typeorm'\nimport { AuthCredentialsDto } from '../auth/dto/auth-credentials.dto'\nimport { UserRepository } from './user.repository'\nimport { User } from './user.entity'\nimport uuid from 'uuid'\nimport { UpdateUserDto } from './update-user.dto'\nimport { MediaService } from '../media/media.service'\nimport { CategoriesService } from '../categories/categories.service'\nimport { ConfigService } from '../config/config.service'\n\n@Injectable()\nexport class UsersService {\n\n  private readonly logger = new Logger()\n\n  constructor(\n    @InjectRepository(UserRepository)\n    private readonly userRepository: UserRepository,\n    private readonly mediaService: MediaService,\n    private readonly categoriesService: CategoriesService,\n    private readonly configService: ConfigService,\n  ) {\n  }\n\n  findOne(email: string): Promise {\n    return this.userRepository.findOne({ email })\n  }\n\n  signUp(authCredentialsDto: AuthCredentialsDto): Promise {\n    return this.userRepository.signUp(authCredentialsDto, this.configService.isEmailVerificationEnabled)\n  }\n\n  validatePassword(authCrendentialsDto: AuthCredentialsDto): Promise {\n    return this.userRepository.validatePassword(authCrendentialsDto)\n  }\n\n  async updateUser(updateUserDto: UpdateUserDto, user: User): Promise {\n    if (Object.entries(updateUserDto).length === 0) {\n      return user\n    }\n    try {\n      // those calls are done to ensure that the category and/or media provided belongs to the user\n      // TODO: replace this to do only one db call\n      if (updateUserDto.defaultCategoryId) {\n        await this.categoriesService.getCategoryById(updateUserDto.defaultCategoryId, user)\n      }\n      if (updateUserDto.pictureId) {\n        await this.mediaService.getMediaById(updateUserDto.pictureId, user)\n      }\n    } catch (e) {\n      this.logger.warn(`updateUser: pictureId or defaultCategoryId from other user`, e)\n      throw new BadRequestException(`Invalid pictureId or defaultCategoryId provided.`)\n    }\n\n    // becauseuserRepository.updateUser modifies the object ...\n    const previousImageId = user.pictureId\n\n    const updatedUser = await this.userRepository.updateUser(updateUserDto, user)\n\n    if (\n      previousImageId\n      && updateUserDto.hasOwnProperty('pictureId')\n      && (updateUserDto.pictureId === null || updateUserDto.pictureId !== previousImageId)\n    ) {\n      try {\n        await this.mediaService.deleteMedia(previousImageId, user)\n      } catch (e) {\n        this.logger.error(`User successfully updated but media with id ${previousImageId} could not be deleted.`)\n      }\n    }\n    return updatedUser\n  }\n\n  async deleteUser(id: uuid): Promise {\n    await this.userRepository.delete({ id })\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/VerificationTokenEntity.html":{"url":"classes/VerificationTokenEntity.html","title":"class - VerificationTokenEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  VerificationTokenEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/verification.token.entity.ts\n        \n\n\n            \n                Extends\n            \n            \n                    BaseEntity\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                creationDate\n                            \n                            \n                                modificationDate\n                            \n                            \n                                token\n                            \n                            \n                                user\n                            \n                            \n                                userId\n                            \n                            \n                                version\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            creationDate\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @CreateDateColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auth/verification.token.entity.ts:19\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            modificationDate\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @UpdateDateColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auth/verification.token.entity.ts:22\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            token\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({length: 32, nullable: false})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auth/verification.token.entity.ts:16\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            user\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         User\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @OneToOne(undefined, undefined, {eager: true, onDelete: 'CASCADE', primary: true})@JoinColumn({name: 'userId'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auth/verification.token.entity.ts:10\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            userId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     uuid\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auth/verification.token.entity.ts:13\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            version\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @VersionColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auth/verification.token.entity.ts:25\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { BaseEntity, Column, CreateDateColumn, Entity, JoinColumn, OneToOne, PrimaryColumn, UpdateDateColumn, VersionColumn } from 'typeorm'\nimport { User } from '../user/user.entity'\nimport * as uuid from 'uuid'\n\n@Entity()\nexport class VerificationTokenEntity extends BaseEntity {\n\n  @OneToOne(() => User, user => user.id, { eager: true, onDelete: 'CASCADE', primary: true })\n  @JoinColumn({ name: 'userId' })\n  user: User\n\n  @PrimaryColumn()\n  userId: uuid\n\n  @Column({ length: 32, nullable: false })\n  token: string\n\n  @CreateDateColumn()\n  creationDate: string\n\n  @UpdateDateColumn()\n  modificationDate: string\n\n  @VersionColumn()\n  version: number\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/auth/dto/auth-credentials.dto.ts\n            \n            class\n            AuthCredentialsDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/interfaces/jwt-payload.interface.ts\n            \n            interface\n            JwtPayload\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/verification.token.entity.ts\n            \n            class\n            VerificationTokenEntity\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/categories/categories.controller.ts\n            \n            controller\n            CategoriesController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/categories/categories.service.ts\n            \n            injectable\n            CategoriesService\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/categories/category.entity.ts\n            \n            class\n            Category\n            \n                6 %\n                (1/16)\n            \n        \n        \n            \n                \n                src/categories/category.repository.ts\n            \n            class\n            CategoryRepository\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/categories/category.repository.ts\n            \n            variable\n            PG_FOREIGN_KEY_CONSTRAINT_VIOLATION\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/categories/dto/create-category.dto.ts\n            \n            class\n            CreateCategoryDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/categories/dto/get-categories-filter.dto.ts\n            \n            class\n            GetCategoriesFilterDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/categories/dto/update-category.dto.ts\n            \n            class\n            UpdateCategoryDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/config/config.service.ts\n            \n            class\n            ConfigService\n            \n                14 %\n                (1/7)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/media/dto/create-media.dto.ts\n            \n            class\n            CreateMediaDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/media/dto/update-media.dto.ts\n            \n            class\n            UpdateMediaDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/media/media.controller.ts\n            \n            controller\n            MediaController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/media/media.entity.ts\n            \n            class\n            Media\n            \n                7 %\n                (1/14)\n            \n        \n        \n            \n                \n                src/media/media.repository.ts\n            \n            class\n            MediaRepository\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/media/media.repository.ts\n            \n            variable\n            PG_FOREIGN_KEY_CONSTRAINT_VIOLATION\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/media/media.service.ts\n            \n            injectable\n            MediaService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/transactions/dto/create-transaction.dto.ts\n            \n            class\n            CreateTransactionDto\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/transactions/dto/get-transactions-filter.dto.ts\n            \n            class\n            GetTransactionsFilterDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/transactions/dto/update-transaction.dto.ts\n            \n            class\n            UpdateTransactionDto\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/transactions/transaction.entity.ts\n            \n            class\n            Transaction\n            \n                6 %\n                (1/15)\n            \n        \n        \n            \n                \n                src/transactions/transaction.repository.ts\n            \n            class\n            TransactionRepository\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/transactions/transaction.repository.ts\n            \n            variable\n            PG_FOREIGN_KEY_CONSTRAINT_VIOLATION\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/transactions/transaction.repository.ts\n            \n            variable\n            PG_UNIQUE_CONSTRAINT_VIOLATION\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/transactions/transactions.controller.ts\n            \n            controller\n            TransactionsController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/transactions/transactions.service.ts\n            \n            injectable\n            TransactionsService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/user/get-user.decorator.ts\n            \n            variable\n            GetUser\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user/update-user.dto.ts\n            \n            class\n            UpdateUserDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/user/user.entity.ts\n            \n            class\n            User\n            \n                5 %\n                (1/19)\n            \n        \n        \n            \n                \n                src/user/user.repository.ts\n            \n            class\n            UserRepository\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/user/user.repository.ts\n            \n            variable\n            PG_FOREIGN_KEY_CONSTRAINT_VIOLATION\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user/user.repository.ts\n            \n            variable\n            PG_UNIQUE_CONSTRAINT_VIOLATION\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user/users.controller.ts\n            \n            controller\n            UsersController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/user/users.service.ts\n            \n            injectable\n            UsersService\n            \n                0 %\n                (0/8)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @hapi/joi : ^16.1.7\n        \n            @nestjs/common : ^6.10.1\n        \n            @nestjs/core : ^6.10.1\n        \n            @nestjs/jwt : ^6.1.1\n        \n            @nestjs/passport : ^6.1.0\n        \n            @nestjs/platform-express : ^6.10.1\n        \n            @nestjs/swagger : ^3.1.0\n        \n            @nestjs/typeorm : ^6.2.0\n        \n            bcryptjs : ^2.4.3\n        \n            class-transformer : ^0.2.3\n        \n            class-validator : ^0.10.2\n        \n            compression : ^1.7.4\n        \n            config : ^3.2.4\n        \n            crypto-random-string : ^3.0.1\n        \n            dotenv : ^8.2.0\n        \n            express-rate-limit : ^5.0.0\n        \n            helmet : ^3.21.2\n        \n            mailgun-js : ^0.22.0\n        \n            passport : ^0.4.0\n        \n            passport-jwt : ^4.0.0\n        \n            pg : ^7.14.0\n        \n            reflect-metadata : ^0.1.12\n        \n            rimraf : ^2.6.2\n        \n            rxjs : ^6.5.3\n        \n            swagger-ui-express : ^4.1.2\n        \n            typeorm : ^0.2.20\n        \n            uuid : ^3.3.3\n    \n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            CurrencyEnum   (src/.../currency.enum.ts)\n                        \n                        \n                            MediaType   (src/.../media-type.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/user/currency.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        CurrencyEnum\n                    \n                \n                        \n                            \n                                 EURO\n                            \n                        \n                        \n                            \n                                Value : EURO\n                            \n                        \n                        \n                            \n                                 DOLLAR\n                            \n                        \n                        \n                            \n                                Value : DOLLAR\n                            \n                        \n            \n        \n\n    src/media/media-type.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        MediaType\n                    \n                \n                        \n                            \n                                 IMAGE\n                            \n                        \n                        \n                            \n                                Value : IMAGE\n                            \n                        \n                        \n                            \n                                 VIDEO\n                            \n                        \n                        \n                            \n                                Value : VIDEO\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            bootstrap\n                        \n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n  \n\n\nThe backend of shargea made with Nest.\n\n\n\n\nDescription\nnestjs-shargea is the backend of shargea made with Nest.\nShargea is an expense manager app.\nInstallation\n$ npm installRunning the app\n# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodTest\n# unit tests\n$ npm run test\n\n# test coverage\n$ npm run test:covDocumentation\nDocumentation is available here\n# generate documentation\n$ npx compodoc -p tsconfig.json -sPostman collections:\nAPI tests\nIntegration tests\nSupport\nnestjs-shargea is an MIT-licensed open source project.\nStay in touch\n\nAuthor - Denis Hamann\nWebsite - https://shargea.com\n\nLicense\nnestjs-shargea is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nMIT License\nCopyright (c) [year] [fullname]\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CategoriesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        ConfigModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        MediaModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        TransactionsModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_CategoriesModule\n\n\n\ncluster_CategoriesModule_exports\n\n\n\ncluster_CategoriesModule_providers\n\n\n\ncluster_ConfigModule\n\n\n\ncluster_ConfigModule_exports\n\n\n\ncluster_MediaModule\n\n\n\ncluster_MediaModule_exports\n\n\n\ncluster_MediaModule_providers\n\n\n\ncluster_TransactionsModule\n\n\n\ncluster_TransactionsModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nTransactionsModule\n\nTransactionsModule\n\nTransactionsModule -->\n\nAuthModule->TransactionsModule\n\n\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nCategoriesModule\n\nCategoriesModule\n\nTransactionsModule -->\n\nCategoriesModule->TransactionsModule\n\n\n\nAppModule -->\n\nCategoriesModule->AppModule\n\n\n\n\n\nCategoriesService \n\nCategoriesService \n\nCategoriesService  -->\n\nCategoriesModule->CategoriesService \n\n\n\n\n\nConfigModule\n\nConfigModule\n\nAppModule -->\n\nConfigModule->AppModule\n\n\n\n\n\nConfigService \n\nConfigService \n\nConfigService  -->\n\nConfigModule->ConfigService \n\n\n\n\n\nMediaModule\n\nMediaModule\n\nCategoriesModule -->\n\nMediaModule->CategoriesModule\n\n\n\nTransactionsModule -->\n\nMediaModule->TransactionsModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nUsersModule -->\n\nMediaModule->UsersModule\n\n\n\nAppModule -->\n\nMediaModule->AppModule\n\n\n\n\n\nMediaService \n\nMediaService \n\nMediaService  -->\n\nMediaModule->MediaService \n\n\n\nAppModule -->\n\nTransactionsModule->AppModule\n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nCategoriesService\n\nCategoriesService\n\nCategoriesModule -->\n\nCategoriesService->CategoriesModule\n\n\n\n\n\nMediaService\n\nMediaService\n\nMediaModule -->\n\nMediaService->MediaModule\n\n\n\n\n\nTransactionsService\n\nTransactionsService\n\nTransactionsModule -->\n\nTransactionsService->TransactionsModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        7 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    5 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    6 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    20 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Interface\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/typealiases.html":{"url":"miscellaneous/typealiases.html","title":"miscellaneous-typealiases - typealiases","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Type aliases\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            EnvConfig   (src/.../config.service.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/config/config.service.ts\n    \n    \n        \n            \n                \n                    \n                    EnvConfig\n                \n            \n            \n                \n                        Record\n\n                \n            \n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            GetUser   (src/.../get-user.decorator.ts)\n                        \n                        \n                            PG_FOREIGN_KEY_CONSTRAINT_VIOLATION   (src/.../transaction.repository.ts)\n                        \n                        \n                            PG_FOREIGN_KEY_CONSTRAINT_VIOLATION   (src/.../category.repository.ts)\n                        \n                        \n                            PG_FOREIGN_KEY_CONSTRAINT_VIOLATION   (src/.../media.repository.ts)\n                        \n                        \n                            PG_FOREIGN_KEY_CONSTRAINT_VIOLATION   (src/.../user.repository.ts)\n                        \n                        \n                            PG_UNIQUE_CONSTRAINT_VIOLATION   (src/.../transaction.repository.ts)\n                        \n                        \n                            PG_UNIQUE_CONSTRAINT_VIOLATION   (src/.../user.repository.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/user/get-user.decorator.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            GetUser\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : createParamDecorator((data, req): User => {\n  return req.user\n})\n                        \n                    \n\n\n            \n        \n\n    src/transactions/transaction.repository.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            PG_FOREIGN_KEY_CONSTRAINT_VIOLATION\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : '23503'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            PG_UNIQUE_CONSTRAINT_VIOLATION\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : '23505'\n                        \n                    \n\n\n            \n        \n\n    src/categories/category.repository.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            PG_FOREIGN_KEY_CONSTRAINT_VIOLATION\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : '23503'\n                        \n                    \n\n\n            \n        \n\n    src/media/media.repository.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            PG_FOREIGN_KEY_CONSTRAINT_VIOLATION\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : '23503'\n                        \n                    \n\n\n            \n        \n\n    src/user/user.repository.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            PG_FOREIGN_KEY_CONSTRAINT_VIOLATION\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : '23503'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            PG_UNIQUE_CONSTRAINT_VIOLATION\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : '23505'\n                        \n                    \n\n\n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
