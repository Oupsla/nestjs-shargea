var COMPODOC_SEARCH_INDEX = {
    "index": {"version":"2.3.7","fields":["title","body"],"fieldVectors":[["title/modules/AppModule.html",[0,1.28,1,2.406]],["body/modules/AppModule.html",[0,2.153,1,4.874,2,1.928,3,1.928,4,2.213,5,2.213,6,1.928,7,2.213,8,2.213,9,3.538,10,3.538,11,3.093,12,0.023,13,3.55,14,4.15,15,3.308,16,3.827,17,2.859,18,2.213,19,2.062,20,0.272,21,0.241,22,0.241,23,4.154,24,3.082,25,0.504,26,0.888,27,2.386,28,1.597,29,3.132,30,4.154,31,2.587,32,4.154,33,3.132,34,2.829,35,3.538,36,4.154,37,0.272,38,0.202,39,0.013,40,0.017,41,0.013]],["title/controllers/AuthController.html",[42,1.444,43,2.406]],["body/controllers/AuthController.html",[12,0.023,20,0.227,21,0.201,22,0.201,25,0.429,26,0.741,37,0.227,38,0.169,39,0.011,40,0.015,41,0.011,42,1.417,43,3.24,44,1.417,45,2.953,46,2.159,47,3.467,48,0.282,49,1.446,50,4.626,51,3.24,52,2.088,53,4.626,54,3.467,55,3.645,56,1.308,57,4.757,58,0.682,59,3.467,60,1.65,61,1.558,62,0.534,63,0.964,64,1.65,65,1.923,66,2.361,67,4.757,68,3.467,69,2.953,70,1.161,71,4.757,72,3.467,73,4.408,74,2.159,75,2.363,76,2.361,77,2.361,78,2.614,79,3.641,80,2.953,81,2.361,82,3.119,83,2.953,84,2.159,85,1.054,86,3.467,87,3.467,88,1.255,89,1.944,90,1.749,91,2.159,92,3.467,93,2.963,94,2.503,95,2.088,96,1.776,97,3.467,98,3.467,99,3.467,100,2.953,101,2.953,102,3.467,103,3.467,104,3.467,105,1.609,106,1.417,107,3.467,108,2.362,109,2.361,110,2.361,111,1.609,112,1.721,113,3.467,114,2.953,115,2.614,116,2.953,117,3.467,118,3.467]],["title/classes/AuthCredentialsDto.html",[38,0.172,55,1.882]],["body/classes/AuthCredentialsDto.html",[12,0.022,20,0.295,21,0.261,22,0.261,25,0.415,37,0.295,38,0.275,39,0.014,40,0.018,41,0.014,48,0.367,55,3.009,56,1.36,58,0.709,62,0.555,70,1.384,85,1.368,108,3.064,119,1.084,120,5.257,121,3.834,122,1.208,123,4.541,124,4.502,125,4.502,126,4.502,127,5.648,128,5.648,129,5.648,130,5.648,131,4.502,132,5.648,133,2.865,134,3.288,135,4.502,136,2.398,137,4.502,138,1.84,139,4.204,140,4.502,141,4.502,142,4.502,143,4.502,144,4.502]],["title/modules/AuthModule.html",[0,1.28,11,1.64]],["body/modules/AuthModule.html",[0,2.107,2,1.843,3,1.843,4,2.116,5,2.116,6,1.843,7,3.099,8,2.777,11,3.159,12,0.023,16,2.993,17,2.777,18,2.116,19,1.972,20,0.26,21,0.23,22,0.23,24,2.281,25,0.51,26,0.849,27,2.281,28,1.527,35,3.382,37,0.26,38,0.193,39,0.012,40,0.016,41,0.012,43,3.962,44,2.13,82,3.78,83,3.382,145,3.382,146,3.382,147,4.099,148,2.995,149,3.549,150,3.971,151,3.971,152,2.995,153,5.212,154,2.116,155,3.971,156,3.93,157,2.473,158,3.382,159,1.623,160,2.995,161,3.382,162,3.971,163,3.971,164,3.971,165,2.705,166,3.971,167,3.971,168,3.382,169,3.971,170,3.971,171,3.971,172,3.971]],["title/injectables/AuthService.html",[82,2.029,173,1.28]],["body/injectables/AuthService.html",[12,0.023,20,0.16,21,0.141,22,0.141,25,0.473,26,0.522,28,0.938,37,0.16,38,0.119,39,0.008,40,0.011,41,0.008,48,0.199,49,1.121,50,3.143,51,2.513,52,2.479,53,3.143,55,3.474,58,0.704,60,1.62,61,1.529,62,0.524,63,0.946,64,1.508,65,1.823,66,2.513,69,3.143,70,1.061,73,4.392,75,2.16,78,1.839,80,2.077,81,1.661,82,2.119,88,2.224,89,1.819,90,1.806,94,0.997,96,0.741,100,2.077,101,2.077,105,1.132,106,2.51,108,2.978,110,1.661,111,1.132,116,2.077,122,0.789,152,1.839,157,1.519,158,2.077,159,2.558,165,1.661,173,1.336,174,1.299,175,2.077,176,3.69,177,2.119,178,2.439,179,3.091,180,2.892,181,5.825,182,3.69,183,3.69,184,3.69,185,2.029,186,1.284,187,2.439,188,3.69,189,2.439,190,2.077,191,2.439,192,2.439,193,1.061,194,1.211,195,3.69,196,1.401,197,2.298,198,2.077,199,2.077,200,2.077,201,3.69,202,2.077,203,2.077,204,0.997,205,1.519,206,4.541,207,2.077,208,1.661,209,2.077,210,2.439,211,1.188,212,2.439,213,2.439,214,2.439,215,2.077,216,2.439,217,0.789,218,2.439,219,2.119,220,1.937,221,2.439,222,2.439,223,3.143,224,3.69,225,2.439,226,2.439,227,2.439,228,4.452,229,2.439,230,2.439,231,2.439,232,1.401,233,2.439,234,2.439,235,2.439,236,1.401,237,2.077,238,2.439,239,2.439,240,2.077,241,2.439,242,2.077,243,2.439,244,2.077,245,2.439,246,1.401,247,2.439,248,2.077,249,2.439,250,2.439,251,2.077,252,2.439,253,2.439,254,2.439,255,2.439,256,1.839,257,2.439,258,2.077,259,2.439,260,2.439,261,2.439,262,2.439,263,2.439,264,3.69,265,2.439,266,2.077,267,2.439]],["title/controllers/CategoriesController.html",[42,1.444,268,2.406]],["body/controllers/CategoriesController.html",[12,0.023,20,0.176,21,0.155,22,0.155,25,0.477,26,0.573,37,0.176,38,0.13,39,0.008,40,0.012,41,0.008,42,1.095,44,1.095,46,1.668,48,0.218,49,1.203,56,1.336,58,0.696,60,1.686,61,1.591,62,0.545,63,0.985,64,1.686,65,1.947,74,2.932,75,1.722,76,1.824,77,2.696,79,3.617,84,1.668,85,0.814,88,0.97,89,1.095,90,1.787,91,1.668,93,2.932,94,2.373,95,1.81,96,1.686,154,1.427,186,1.565,211,1.87,217,1.542,219,2.273,246,1.538,268,2.696,269,2.281,270,2.704,271,3.55,272,3.55,273,3.55,274,4.009,275,3.55,276,2.02,277,3.335,278,2.02,279,2.678,280,2.02,281,2.984,282,2.678,283,2.02,284,2.986,285,2.678,286,2.273,287,2.281,288,2.984,289,2.678,290,2.281,291,3.542,292,2.02,293,2.678,294,1.824,295,1.824,296,3.921,297,1.824,298,2.281,299,1.824,300,1.824,301,1.824,302,2.337,303,2.281,304,1.33,305,2.984,306,1.538,307,1.538,308,1.522,309,2.02,310,1.824,311,0.914,312,3.335,313,2.02,314,1.824,315,1.33,316,2.696,317,2.678,318,2.678,319,1.824,320,1.824,321,2.678,322,2.281,323,2.984,324,2.02,325,1.824,326,1.824,327,2.678,328,3.55,329,2.678,330,2.696,331,2.02,332,2.281,333,2.678,334,2.02,335,2.678,336,2.678]],["title/modules/CategoriesModule.html",[0,1.28,13,1.882]],["body/modules/CategoriesModule.html",[0,2.17,2,1.961,3,1.961,4,2.251,5,2.251,6,1.961,7,3.193,8,3.193,11,2.518,12,0.023,13,3.71,15,3.323,17,2.891,18,2.251,19,2.098,20,0.277,21,0.245,22,0.245,24,3.116,25,0.5,26,0.904,27,2.427,28,1.624,31,2.631,34,2.878,37,0.277,38,0.206,39,0.013,40,0.017,41,0.013,44,2.217,149,3.695,268,4.082,302,3.529,303,3.599,337,3.599,338,4.225,339,3.599,340,3.599,341,4.225,342,4.225,343,2.631,344,3.599,345,4.225]],["title/injectables/CategoriesService.html",[173,1.28,302,1.754]],["body/injectables/CategoriesService.html",[12,0.023,20,0.123,21,0.109,22,0.109,25,0.427,26,0.401,28,0.722,37,0.123,38,0.091,39,0.013,40,0.009,41,0.006,48,0.153,49,0.914,52,2.423,58,0.711,60,1.669,61,1.575,62,0.54,63,0.975,64,1.606,65,1.892,75,2.189,88,2.151,89,1.927,90,1.62,96,1.722,105,1.999,106,2.545,109,2.049,111,1.999,112,2.498,122,0.643,159,2.056,173,1.09,174,1,177,1.728,185,0.767,186,1.585,193,0.817,194,0.932,196,1.078,205,1.169,211,1.948,217,1.546,220,1.874,232,1.078,266,1.599,270,1.078,271,2.269,272,2.269,273,2.269,274,2.563,275,2.269,276,2.269,277,2.708,280,2.269,283,2.269,284,2.474,286,1.078,287,2.563,290,2.563,291,3.254,302,1.494,304,0.932,305,2.269,306,1.078,307,1.078,308,1.448,309,1.415,311,0.641,315,0.932,343,3.134,344,1.599,346,1.599,347,3.009,348,3.009,349,1.877,350,2.453,351,3.009,352,3.009,353,3.62,354,1.877,355,3.009,356,1.877,357,1.877,358,1.877,359,1.877,360,1.877,361,1.877,362,1,363,1.415,364,1.877,365,1.877,366,1.877,367,1.599,368,2.269,369,2.269,370,2.269,371,2.269,372,3.207,373,2.049,374,1.471,375,2.295,376,2.269,377,2.84,378,2.269,379,2.269,380,2.269,381,2.269,382,1.877,383,1.877,384,1.877,385,1.877,386,1.877,387,2.934,388,2.049,389,1.877,390,3.009,391,1.877,392,1.415,393,1.278,394,3.248,395,1.877,396,1.877,397,1,398,3.766,399,1.877,400,3.009,401,1.877,402,1.877,403,3.009,404,1.877,405,1.877,406,1.877,407,1.877,408,1.877,409,2.563,410,1.877,411,1.877,412,0.68,413,1.415,414,3.009,415,1.415,416,1.877,417,2.84,418,1.87,419,1.877,420,1.599,421,1.877,422,1,423,1.877,424,1.877,425,1.877,426,1.877,427,3.766,428,1.877,429,1.877,430,1.877,431,1.877]],["title/classes/Category.html",[38,0.172,308,1.358]],["body/classes/Category.html",[12,0.023,20,0.172,21,0.152,22,0.152,25,0.423,37,0.172,38,0.19,39,0.008,40,0.012,41,0.008,48,0.214,56,1.622,58,0.845,62,0.662,70,1.312,94,2.358,119,0.633,122,0.835,185,1.903,186,1.536,193,2.51,204,1.075,211,1.5,217,1.401,236,2.242,308,2.41,311,0.898,353,2.9,372,3.966,374,1.88,412,1.686,418,2.312,432,2.239,433,1.699,434,2.9,435,4.657,436,2.9,437,1.79,438,2.481,439,2.9,440,2.9,441,1.903,442,4.657,443,2.9,444,2.629,445,3.821,446,2.629,447,2.9,448,2.629,449,2.431,450,2.944,451,3.72,452,2.629,453,2.555,454,2.239,455,2.629,456,2.659,457,2.629,458,2.659,459,1.983,460,2.629,461,2.659,462,2.944,463,2.629,464,2.9,465,2.629,466,2.944,467,2.629,468,2.629,469,3.325,470,3.21,471,2.629,472,3.51,473,3.51,474,2.629,475,2.629,476,1.983,477,2.629,478,2.08,479,2.9,480,2.629,481,3.593,482,2.242,483,2.659,484,3.511,485,3.966,486,2.9,487,1.791,488,1.983,489,1.983,490,4.068,491,1.075,492,2.239,493,2.629,494,2.629,495,2.629,496,2.629,497,2.629,498,2.629]],["title/classes/CategoryRepository.html",[38,0.172,343,2.201]],["body/classes/CategoryRepository.html",[12,0.023,20,0.167,21,0.148,22,0.148,25,0.447,26,0.546,37,0.167,38,0.124,39,0.008,40,0.012,41,0.008,48,0.208,49,1.161,52,2.504,58,0.683,60,1.544,61,1.457,62,0.499,63,0.902,64,1.544,65,1.849,75,2.211,88,1.658,90,2.04,96,1.391,105,2.358,106,2.077,111,2.358,112,2.522,115,2.882,119,0.615,122,0.817,159,2.223,179,2.851,185,2.077,186,1.31,193,1.112,194,1.268,196,1.467,204,1.044,211,1.905,217,1.488,219,2.195,220,2.647,232,1.467,246,1.467,270,2.195,271,2.882,272,2.882,273,2.882,275,2.882,276,2.882,277,3.278,280,2.882,283,2.882,284,2.918,286,2.195,291,3.494,304,1.268,305,2.882,306,1.467,307,1.467,308,2.391,309,1.927,311,0.872,315,1.268,325,1.74,326,1.74,332,2.176,343,2.38,353,2.38,362,1.361,367,2.176,375,2.036,387,2.603,388,1.74,397,1.361,409,2.176,422,2.707,433,1.663,437,0.982,441,1.044,499,1.927,500,3.822,501,2.555,502,2.555,503,2.555,504,2.555,505,3.822,506,2.555,507,1.74,508,3.705,509,2.918,510,1.591,511,2.555,512,2.603,513,3.255,514,2.176,515,3.255,516,1.927,517,2.555,518,2.176,519,3.118,520,2.555,521,2.555,522,1.74,523,2.555,524,2.882,525,2.176,526,2.555,527,2.176,528,2.176,529,1.927]],["title/classes/CreateCategoryDto.html",[38,0.172,277,2.029]],["body/classes/CreateCategoryDto.html",[12,0.023,20,0.259,21,0.228,22,0.228,25,0.452,37,0.259,38,0.282,39,0.012,40,0.016,41,0.012,48,0.321,56,1.484,58,0.773,62,0.646,63,1.166,70,1.405,85,1.199,95,1.516,119,0.95,122,1.109,133,2.408,134,3.089,136,2.101,138,1.612,139,3.533,186,1.582,277,2.98,353,3.611,412,2.1,418,3.058,437,2.368,441,2.369,491,1.612,530,5.45,531,2.974,532,3.359,533,3.944,534,3.231,535,3.231,536,3.944,537,3.944,538,2.974,539,3.944,540,2.859,541,3.611,542,2.859,543,2.265,544,2.456,545,2.265,546,2.686,547,2.686,548,2.101]],["title/classes/CreateEntryDto.html",[38,0.172,549,2.029]],["body/classes/CreateEntryDto.html",[12,0.023,20,0.233,21,0.206,22,0.206,25,0.433,37,0.233,38,0.268,39,0.011,40,0.015,41,0.011,48,0.289,56,1.535,58,0.8,62,0.653,63,1.178,70,1.42,85,1.08,95,1.366,119,0.856,122,1.035,133,2.741,134,2.931,136,1.893,138,1.452,139,3.746,186,1.535,412,2.139,418,2.932,437,2.271,441,2.248,478,2.577,491,1.452,534,3.013,535,3.013,538,2.679,540,2.868,541,3.426,542,2.868,543,2.04,544,2.213,545,2.778,546,2.42,547,2.42,548,3.146,549,2.778,550,5.555,551,2.679,552,4.148,553,4.453,554,3.553,555,3.553,556,3.553,557,3.026,558,3.553,559,3.026,560,3.553,561,3.553,562,3.553,563,4.12,564,4.12,565,3.026,566,2.679,567,2.679,568,3.026,569,3.026]],["title/classes/CreateMediaDto.html",[38,0.172,570,2.201]],["body/classes/CreateMediaDto.html",[12,0.023,20,0.27,21,0.239,22,0.239,25,0.435,37,0.27,38,0.26,39,0.013,40,0.017,41,0.013,48,0.336,56,1.509,58,0.787,62,0.665,63,1.112,70,1.422,85,1.253,119,0.993,122,1.142,133,2.908,134,3.338,136,2.197,138,1.685,139,4.035,374,1.408,437,2.278,439,2.568,441,2.421,538,3.109,540,2.75,542,2.75,543,2.368,545,2.368,570,3.327,571,5.528,572,3.109,573,4.467,574,4.124,575,4.124,576,4.124,577,4.035,578,3.512,579,3.512,580,4.124,581,4.124,582,4.124,583,3.512,584,4.549,585,3.109,586,3.512,587,2.809,588,3.109,589,3.512]],["title/controllers/EntriesController.html",[42,1.444,590,2.406]],["body/controllers/EntriesController.html",[12,0.023,20,0.176,21,0.155,22,0.155,25,0.477,26,0.573,37,0.176,38,0.13,39,0.008,40,0.012,41,0.008,42,1.095,44,1.095,46,1.668,48,0.218,49,1.203,56,1.336,58,0.696,60,1.686,61,1.591,62,0.545,63,0.985,64,1.686,65,1.947,74,2.932,75,1.722,76,1.824,77,2.696,79,3.617,84,1.668,85,0.814,88,0.97,89,1.095,90,1.787,91,1.668,93,2.932,94,2.373,95,1.81,96,1.686,154,1.427,186,1.565,211,1.87,217,1.542,219,2.273,246,1.538,278,2.02,281,2.984,286,2.273,288,2.984,292,2.02,294,1.824,295,1.824,296,3.921,297,1.824,298,2.281,299,1.824,300,1.824,301,1.824,304,1.33,306,1.538,307,1.538,310,1.824,311,0.914,312,3.335,313,2.02,314,1.824,315,1.33,316,2.696,319,1.824,320,1.824,322,2.281,323,2.984,324,2.02,325,1.824,326,1.824,328,3.55,330,2.696,331,2.02,334,2.02,438,2.508,453,1.837,549,3.335,590,2.696,591,2.281,592,3.55,593,4.009,594,3.55,595,4.009,596,3.55,597,2.02,598,2.678,599,2.281,600,2.678,601,2.02,602,2.986,603,2.678,604,2.281,605,2.678,606,2.281,607,3.542,608,2.678,609,2.704,610,2.281,611,2.984,612,2.02,613,2.678,614,2.678,615,2.678,616,2.678,617,2.678,618,2.281,619,2.678,620,2.678,621,2.678]],["title/modules/EntriesModule.html",[0,1.28,14,2.201]],["body/modules/EntriesModule.html",[0,2.155,2,1.933,3,1.933,4,2.218,5,2.218,6,1.933,7,3.171,8,2.218,11,3.095,12,0.023,13,3.552,14,4.418,15,3.31,17,2.863,18,2.218,19,2.067,20,0.273,21,0.241,22,0.241,24,3.087,25,0.505,26,0.89,27,2.391,28,1.601,31,2.593,33,3.14,34,2.836,37,0.273,38,0.203,39,0.013,40,0.017,41,0.013,44,2.196,590,4.053,609,3.829,610,3.546,622,3.546,623,4.164,624,3.546,625,4.164,626,4.164,627,2.593,628,3.546,629,4.164]],["title/injectables/EntriesService.html",[173,1.28,609,2.029]],["body/injectables/EntriesService.html",[12,0.023,20,0.138,21,0.122,22,0.122,25,0.45,26,0.45,28,0.808,37,0.138,38,0.102,39,0.014,40,0.01,41,0.007,48,0.171,49,1,52,2.394,58,0.693,60,1.606,61,1.515,62,0.519,63,0.938,64,1.514,65,1.827,75,2.299,88,1.914,89,2.16,90,1.702,96,1.514,105,2.13,106,2.504,109,2.242,111,2.13,112,2.623,122,0.704,159,2.16,173,1.192,174,1.12,177,1.89,185,1.345,186,1.476,193,0.915,194,1.044,196,1.207,205,1.309,211,1.973,217,1.526,220,1.997,232,1.89,286,1.207,302,2.742,304,1.044,306,1.207,307,1.207,308,1.265,311,0.718,315,1.044,350,2.563,362,1.12,363,1.585,368,2.482,369,2.482,370,2.482,371,2.482,373,2.242,374,1.567,375,2.445,376,2.482,377,2.482,378,2.482,379,2.482,380,2.482,381,2.482,387,3.126,388,2.242,392,1.585,393,1.432,394,3.46,397,1.753,412,0.761,413,1.585,415,1.585,417,3.058,418,2.014,420,1.79,422,1.753,438,1.12,453,1.883,524,1.585,529,1.585,548,2.445,549,2.861,592,2.482,593,2.803,594,2.482,595,2.803,596,2.482,597,2.482,599,2.803,601,2.482,602,2.636,604,2.803,606,2.803,607,3.283,609,1.89,611,2.482,612,1.585,627,3.291,628,1.79,630,1.79,631,2.102,632,3.291,633,2.102,634,2.102,635,2.102,636,2.102,637,2.102,638,1.79,639,2.102,640,2.102,641,2.102,642,3.291,643,2.102,644,2.102,645,2.102,646,2.102,647,2.102,648,2.102,649,3.291,650,2.102,651,2.102,652,2.102,653,4.056,654,2.102,655,2.102,656,2.102,657,2.102,658,2.803,659,2.102,660,2.102,661,3.291,662,2.102]],["title/classes/Entry.html",[38,0.172,453,1.64]],["body/classes/Entry.html",[12,0.023,20,0.183,21,0.162,22,0.162,25,0.433,37,0.183,38,0.199,39,0.009,40,0.013,41,0.009,48,0.227,56,1.626,58,0.848,62,0.664,70,1.383,94,2.55,95,1.073,119,0.672,122,0.873,185,1.971,186,1.558,204,1.141,211,1.553,217,1.335,236,2.343,308,2.399,311,0.953,374,1.926,418,2.394,433,1.775,434,3.003,436,3.003,437,1.854,439,3.003,440,3.003,441,1.971,443,3.003,445,2.541,447,3.003,449,2.541,450,3.076,451,4.029,453,1.894,456,2.779,458,1.901,459,2.105,461,2.779,462,3.636,464,3.003,466,3.076,469,3.475,470,3.671,472,2.779,473,2.779,476,2.105,478,2.826,479,3.003,481,3.791,482,2.343,483,2.779,484,3.636,486,2.541,487,1.901,489,2.105,490,3.843,491,1.141,548,2.569,552,3.636,553,3.636,566,2.105,567,2.105,663,2.378,664,2.791,665,2.791,666,2.791,667,2.791,668,2.791,669,2.791,670,2.791,671,2.791,672,2.791,673,2.791,674,2.791,675,2.791,676,2.791,677,2.791,678,2.791,679,2.105,680,2.791,681,2.791,682,2.791,683,2.791]],["title/classes/EntryRepository.html",[38,0.172,627,2.201]],["body/classes/EntryRepository.html",[12,0.023,20,0.179,21,0.159,22,0.159,25,0.444,26,0.586,37,0.179,38,0.133,39,0.009,40,0.012,41,0.009,48,0.223,49,1.222,52,2.435,58,0.66,60,1.449,61,1.368,62,0.469,63,0.846,64,1.449,65,1.597,75,2.287,88,1.727,90,2.04,96,1.449,105,2.213,106,1.949,111,2.213,112,2.367,115,3.033,119,0.66,122,0.86,159,2.392,179,2.97,185,1.949,193,1.191,194,1.359,204,1.119,211,1.536,217,1.459,219,2.31,220,2.633,246,1.573,286,2.31,304,1.359,306,1.573,307,1.573,308,1.053,311,0.935,315,1.359,325,1.865,326,1.865,362,1.459,375,2.143,387,2.74,388,1.865,422,2.541,433,1.75,437,1.053,438,2.143,441,1.119,453,2.881,482,2.31,507,1.865,508,3.579,509,2.739,510,1.705,512,2.74,513,3.426,514,2.332,515,3.426,516,2.065,518,2.332,519,3.579,522,1.865,548,2.143,549,3.362,592,3.033,594,3.033,596,3.033,597,3.033,601,3.033,602,3.018,607,3.565,611,3.033,612,2.065,618,2.332,627,2.505,658,2.332,684,2.065,685,4.023,686,2.738,687,2.738,688,2.738,689,4.023,690,2.738,691,3.248,692,2.065,693,2.738,694,2.738,695,3.426,696,4.769,697,3.426,698,4.023,699,4.023,700,2.738,701,2.738]],["title/classes/GetCategoriesFilterDto.html",[38,0.172,284,2.029]],["body/classes/GetCategoriesFilterDto.html",[12,0.022,20,0.324,21,0.286,22,0.286,25,0.439,37,0.324,38,0.291,39,0.015,40,0.019,41,0.015,48,0.403,56,1.19,58,0.62,62,0.486,63,1.062,70,1.279,85,1.502,119,1.19,122,1.279,133,2.777,138,2.02,270,3.436,284,3.436,512,4.382,540,2.777,542,2.777,702,5.095,703,3.726,704,4.209,705,4.209]],["title/classes/GetEntriesFilterDto.html",[38,0.172,602,2.029]],["body/classes/GetEntriesFilterDto.html",[12,0.022,20,0.324,21,0.286,22,0.286,25,0.439,37,0.324,38,0.291,39,0.015,40,0.019,41,0.015,48,0.403,56,1.19,58,0.62,62,0.486,63,1.062,70,1.279,85,1.502,119,1.19,122,1.279,133,2.777,138,2.02,438,3.187,512,4.382,540,2.777,542,2.777,602,3.436,703,3.726,704,4.209,705,4.209,706,5.095]],["title/interfaces/JwtPayload.html",[197,2.201,707,2.406]],["body/interfaces/JwtPayload.html",[12,0.022,20,0.347,21,0.306,22,0.306,37,0.347,39,0.016,40,0.019,41,0.016,48,0.431,62,0.52,70,1.417,108,3.395,122,1.333,197,3.881,707,3.604,708,5.291,709,4.507,710,4.507]],["title/injectables/JwtStrategy.html",[147,2.201,173,1.28]],["body/injectables/JwtStrategy.html",[12,0.023,20,0.264,21,0.233,22,0.233,25,0.494,26,0.861,37,0.264,38,0.196,39,0.013,40,0.016,41,0.013,48,0.328,49,1.598,52,2.252,58,0.66,60,1.598,61,1.508,62,0.517,63,0.934,64,1.224,65,1.598,78,3.966,88,1.458,89,1.646,90,1.297,96,1.224,106,1.646,108,1.999,114,4.479,147,3.276,154,2.146,156,3.966,159,2.149,165,2.743,168,3.43,173,1.905,174,2.146,177,3.021,180,3.28,197,3.867,198,3.43,199,3.43,200,3.43,217,1.328,220,1.752,223,4.479,311,1.375,433,1.752,711,3.43,712,4.027,713,4.027,714,5.259,715,4.027,716,4.027,717,4.027,718,4.027,719,3.43,720,4.027,721,4.027,722,4.027,723,4.027,724,4.027,725,4.027,726,4.027]],["title/classes/Media.html",[38,0.172,374,1.206]],["body/classes/Media.html",[12,0.023,20,0.181,21,0.16,22,0.16,25,0.445,37,0.181,38,0.197,39,0.009,40,0.013,41,0.009,48,0.225,56,1.61,58,0.839,62,0.676,70,1.38,94,1.656,119,0.666,122,0.866,185,1.96,186,1.415,193,2.297,204,1.13,211,1.544,217,1.415,236,2.754,308,2.393,311,0.944,374,1.637,412,1.001,433,1.763,434,2.986,436,2.986,437,1.844,440,2.986,441,1.96,443,2.986,445,3.658,447,2.986,449,2.986,450,3.055,451,3.78,453,2.889,456,2.759,458,3.266,461,2.759,464,2.986,466,2.085,470,3.658,472,3.596,473,3.596,476,2.085,478,2.158,479,2.986,481,3.658,482,2.327,484,3.055,486,3.288,487,1.883,488,2.085,490,4,491,1.13,573,3.616,577,3.828,585,2.085,587,3.596,679,2.085,727,2.355,728,4.795,729,2.765,730,2.765,731,2.765,732,2.765,733,2.765,734,2.765,735,4.051,736,2.765,737,2.355,738,2.765,739,4.051,740,2.765,741,2.765,742,2.765,743,2.765,744,2.765,745,2.765,746,2.765,747,2.765,748,2.765,749,2.765]],["title/controllers/MediaController.html",[42,1.444,750,2.406]],["body/controllers/MediaController.html",[12,0.023,20,0.183,21,0.162,22,0.162,25,0.475,26,0.597,37,0.183,38,0.136,39,0.009,40,0.013,41,0.009,42,1.141,44,1.141,46,1.739,48,0.227,49,1.24,56,1.359,58,0.708,60,1.715,61,1.618,62,0.555,63,1.002,64,1.715,65,1.966,74,3.003,75,1.775,76,1.901,77,2.779,79,3.515,84,1.739,85,0.848,88,1.011,89,1.141,90,1.817,91,1.739,93,2.541,94,2.168,95,1.569,96,1.715,154,1.487,186,1.579,211,1.898,217,1.543,219,2.343,246,1.603,278,2.105,281,3.076,288,3.076,292,2.105,294,1.901,295,1.901,296,4,297,1.901,299,1.901,300,1.901,301,1.901,304,1.386,310,1.901,311,0.953,312,3.241,313,2.105,314,1.901,315,1.386,316,2.779,319,1.901,320,1.901,323,3.076,324,2.105,328,3.636,330,2.779,331,2.105,334,2.105,350,2.238,374,1.811,570,3.671,750,2.779,751,2.378,752,4.107,753,3.636,754,3.475,755,4.107,756,4.107,757,2.378,758,2.791,759,2.105,760,2.791,761,2.378,762,2.791,763,2.378,764,2.791,765,2.378,766,3.887,767,2.791,768,2.378,769,3.475,770,2.105,771,2.791,772,2.791,773,2.791,774,2.791,775,2.791,776,2.791,777,2.791,778,2.791,779,2.791,780,2.791]],["title/modules/MediaModule.html",[0,1.28,15,1.754]],["body/modules/MediaModule.html",[0,2.209,2,2.036,3,2.036,4,2.337,5,2.337,6,2.036,7,3.25,8,3.25,11,2.579,12,0.023,15,3.408,17,2.961,18,2.337,19,2.178,20,0.288,21,0.254,22,0.254,24,2.519,25,0.496,26,0.938,27,2.519,28,1.687,31,2.732,37,0.288,38,0.214,39,0.014,40,0.017,41,0.014,44,2.271,149,3.785,350,3.316,750,4.154,768,3.736,781,3.736,782,3.736,783,3.736,784,4.387,785,4.387,786,2.732,787,3.736,788,4.387]],["title/classes/MediaRepository.html",[38,0.172,786,2.201]],["body/classes/MediaRepository.html",[12,0.023,20,0.267,21,0.236,22,0.236,25,0.475,26,0.871,37,0.267,38,0.198,39,0.013,40,0.016,41,0.013,48,0.332,49,1.611,52,2.265,58,0.512,60,1.238,61,1.169,62,0.401,63,0.723,64,1.238,65,1.611,90,1.897,105,1.891,106,1.665,111,1.891,112,2.023,119,0.982,159,1.665,179,3.669,185,1.665,186,1.558,196,2.34,204,1.665,211,2.135,217,1.443,220,2.563,232,2.34,311,1.391,362,2.171,374,1.391,397,2.171,422,2.171,433,2.306,507,2.775,508,3.61,509,3.044,510,2.538,519,2.775,524,3.996,525,3.471,527,3.471,528,3.471,529,3.073,695,3.471,753,3.996,759,3.996,770,3.073,786,3.301,789,3.073,790,4.075,791,4.075,792,3.471]],["title/injectables/MediaService.html",[173,1.28,350,1.64]],["body/injectables/MediaService.html",[12,0.023,20,0.194,21,0.171,22,0.171,25,0.465,26,0.633,28,1.138,37,0.194,38,0.144,39,0.017,40,0.013,41,0.009,48,0.241,49,1.294,52,2.312,58,0.755,60,1.828,61,1.725,62,0.591,63,1.068,64,1.755,65,1.992,88,1.072,89,1.21,90,0.953,96,1.828,106,2.037,159,2.228,173,1.542,174,1.577,177,2.445,185,1.74,186,1.599,196,1.7,205,1.843,211,1.937,217,1.538,220,1.288,232,1.7,304,1.469,311,1.01,315,1.469,350,1.976,374,1.861,397,1.577,422,2.268,516,2.232,570,3.746,752,3.626,753,3.21,754,3.626,755,3.626,756,3.626,757,3.626,759,3.21,761,3.626,763,3.626,765,3.626,766,3.949,769,3.626,770,2.232,786,3.746,787,2.521,792,2.521,793,2.521,794,2.96,795,2.96,796,2.96,797,2.96,798,2.96,799,2.96,800,2.96,801,2.96,802,2.96,803,2.96,804,2.96,805,2.96,806,2.96,807,2.96,808,2.96,809,2.96,810,2.96,811,2.96]],["title/classes/UpdateCategoryDto.html",[38,0.172,291,2.029]],["body/classes/UpdateCategoryDto.html",[12,0.023,20,0.257,21,0.227,22,0.227,25,0.451,37,0.257,38,0.282,39,0.012,40,0.016,41,0.012,48,0.32,56,1.481,58,0.772,62,0.645,63,1.205,70,1.403,85,1.193,95,1.509,119,0.946,122,1.106,133,2.401,134,3.082,136,2.092,138,1.605,186,1.58,291,2.971,353,3.829,412,2.095,418,3.052,437,2.364,441,2.364,491,1.605,531,2.96,532,3.344,534,3.221,535,3.221,540,2.966,541,3.603,542,2.966,543,2.255,544,2.445,545,2.255,546,2.674,812,5.442,813,3.926,814,3.926,815,3.926,816,2.96,817,3.926,818,3.926]],["title/classes/UpdateEntryDto.html",[38,0.172,607,2.029]],["body/classes/UpdateEntryDto.html",[12,0.023,20,0.231,21,0.204,22,0.204,25,0.432,37,0.231,38,0.266,39,0.011,40,0.015,41,0.011,48,0.286,56,1.531,58,0.798,62,0.651,63,1.227,70,1.416,85,1.069,95,1.352,119,0.847,122,1.027,133,2.729,134,2.915,136,1.874,138,1.437,186,1.531,412,2.129,418,2.919,437,2.261,441,2.236,478,2.559,491,1.437,534,2.992,535,2.992,540,3.019,541,3.408,542,3.019,543,2.02,544,2.19,545,2.759,546,2.395,547,2.395,548,3.133,551,2.652,552,4.126,553,4.434,557,2.995,559,2.995,563,4.092,564,4.092,565,2.995,566,2.652,567,2.652,568,2.995,569,2.995,607,2.759,816,2.652,819,5.54,820,3.517,821,3.517,822,3.517,823,3.517,824,3.517,825,3.517,826,3.517]],["title/classes/UpdateMediaDto.html",[38,0.172,766,2.201]],["body/classes/UpdateMediaDto.html",[12,0.023,20,0.26,21,0.23,22,0.23,25,0.453,37,0.26,38,0.283,39,0.012,40,0.016,41,0.012,48,0.324,56,1.488,58,0.775,62,0.659,63,1.208,70,1.408,85,1.207,95,1.527,119,0.957,122,1.114,133,2.867,134,3.29,136,2.116,138,1.623,374,1.356,412,1.438,437,2.375,439,2.473,441,2.377,491,1.623,540,2.977,542,2.977,543,2.281,544,2.473,545,2.281,572,2.995,573,4.386,577,3.962,578,3.382,579,3.382,583,3.382,584,4.439,585,2.995,586,3.382,587,2.705,588,2.995,589,3.382,766,3.246,816,2.995,827,5.462,828,3.971,829,3.971,830,3.971,831,3.971,832,3.971,833,3.971]],["title/classes/UpdateUserDto.html",[38,0.172,834,2.029]],["body/classes/UpdateUserDto.html",[12,0.023,20,0.291,21,0.257,22,0.257,25,0.45,37,0.291,38,0.298,39,0.014,40,0.017,41,0.014,48,0.361,56,1.347,58,0.702,62,0.633,63,1.142,70,1.449,85,1.347,95,1.704,119,1.068,122,1.196,138,1.811,412,2.025,491,1.811,534,3.483,535,3.483,540,2.844,541,3.817,542,2.844,547,3.809,548,2.98,834,3.212,835,5.219,836,3.775,837,4.174,838,4.174,839,4.432,840,4.432]],["title/classes/User.html",[38,0.172,217,0.756]],["body/classes/User.html",[12,0.023,20,0.154,21,0.136,22,0.136,25,0.435,37,0.154,38,0.175,39,0.007,40,0.011,41,0.007,48,0.191,49,1.09,56,1.614,58,0.847,60,0.714,61,0.674,62,0.667,63,0.417,64,0.714,65,1.09,70,1.411,94,2.423,96,0.714,108,2.16,110,2.963,119,0.566,122,0.767,123,3.316,186,1.428,193,2.742,204,0.96,211,1.401,217,0.767,236,2.796,270,2.498,308,2.336,374,2.182,412,1.763,433,1.56,434,2.709,436,2.709,438,2.318,440,2.709,443,2.709,445,3.692,447,2.709,449,2.709,451,3.86,453,2.434,454,3.705,456,2.443,458,2.443,459,2.704,461,2.443,462,2.704,464,2.709,470,3.443,478,1.911,479,2.709,481,3.784,482,2.06,483,2.963,485,4.147,486,2.709,487,1.6,488,1.771,489,1.771,490,4.038,491,0.96,492,2.001,587,3.316,679,1.771,737,2.001,837,2.963,838,2.963,841,2.001,842,4.35,843,4.35,844,4.35,845,4.35,846,4.35,847,2.704,848,2.349,849,2.349,850,4.466,851,2.349,852,2.349,853,2.349,854,4.869,855,2.349,856,2.349,857,2.349,858,3.586,859,2.349,860,2.349,861,2.349,862,2.349,863,2.349,864,3.586,865,2.349,866,2.349,867,2.349,868,3.586,869,2.349,870,2.349,871,2.349,872,3.586,873,2.349,874,2.349,875,2.001,876,1.771,877,2.349,878,2.349,879,2.349,880,2.349,881,2.349,882,2.349,883,2.349,884,2.349,885,2.349]],["title/classes/UserRepository.html",[38,0.172,886,2.201]],["body/classes/UserRepository.html",[12,0.023,20,0.192,21,0.17,22,0.17,25,0.454,26,0.628,37,0.192,38,0.143,39,0.009,40,0.013,41,0.009,48,0.239,49,1.286,51,2.881,52,2.478,55,3.53,58,0.682,60,1.65,61,1.557,62,0.534,63,0.964,64,1.65,65,1.923,66,2.881,70,1.282,81,1.999,88,1.797,90,1.749,96,1.749,105,1.964,106,2.451,108,2.696,110,1.999,111,1.964,112,2.1,119,0.707,123,3.698,159,2.586,179,3.09,204,1.199,208,1.999,209,2.499,215,2.499,217,1.417,220,2.363,362,1.563,375,1.563,412,1.063,433,1.841,507,1.999,508,3.379,509,2.43,510,1.828,519,2.881,522,1.999,691,2.881,692,2.213,697,2.499,834,3.444,837,1.999,838,1.999,847,3.19,875,2.499,876,2.213,886,2.635,887,2.213,888,4.961,889,4.231,890,3.19,891,4.231,892,5.997,893,2.934,894,2.934,895,3.19,896,2.934,897,4.231,898,2.934,899,2.213,900,2.499,901,2.934,902,2.213,903,2.213,904,2.934,905,2.934,906,2.934,907,2.934,908,2.934,909,2.934,910,2.934,911,2.934,912,2.934,913,2.934,914,2.499,915,2.934,916,2.934]],["title/controllers/UsersController.html",[42,1.444,917,2.406]],["body/controllers/UsersController.html",[12,0.023,20,0.236,21,0.208,22,0.208,25,0.48,26,0.769,37,0.236,38,0.175,39,0.011,40,0.015,41,0.011,42,1.47,44,1.47,46,2.241,48,0.293,49,1.483,52,2.129,56,1.334,58,0.695,60,1.682,61,1.588,62,0.544,63,0.983,64,1.682,65,1.804,74,3.039,79,3.448,84,2.241,85,1.093,89,1.47,91,2.241,93,2.241,94,1.994,95,1.383,96,1.682,154,1.917,180,2.748,217,1.539,294,2.45,295,2.45,297,2.45,299,2.45,300,2.45,301,2.45,310,2.45,312,2.802,314,2.45,316,3.323,319,2.45,320,2.45,330,2.45,834,3.675,890,4.174,895,2.713,899,2.713,902,2.713,903,2.713,917,3.323,918,3.064,919,3.597,920,4.879,921,4.879,922,3.597,923,4.879,924,3.597,925,3.597,926,4.879,927,3.597,928,3.597,929,3.597,930,3.064,931,3.597,932,3.597,933,3.597,934,3.597,935,3.597,936,3.597,937,3.597]],["title/modules/UsersModule.html",[0,1.28,16,2.029]],["body/modules/UsersModule.html",[0,2.145,2,1.914,3,1.914,4,2.197,5,2.197,6,1.914,7,3.156,8,3.156,11,2.479,12,0.023,13,2.846,15,3.301,16,3.982,17,2.846,18,2.197,19,2.047,20,0.27,21,0.239,22,0.239,24,3.068,25,0.504,26,0.882,27,2.368,28,1.586,31,2.568,33,3.109,34,2.809,37,0.27,38,0.201,39,0.013,40,0.017,41,0.013,44,2.183,149,4.035,180,3.517,886,2.568,917,4.035,930,3.512,938,3.512,939,4.124,940,3.512,941,3.512,942,4.124,943,4.124,944,3.512,945,4.124]],["title/injectables/UsersService.html",[173,1.28,180,1.754]],["body/injectables/UsersService.html",[12,0.023,20,0.173,21,0.152,22,0.152,25,0.46,26,0.563,28,1.012,37,0.173,38,0.128,39,0.008,40,0.012,41,0.008,48,0.215,49,1.188,51,2.662,52,2.219,55,3.27,58,0.75,60,1.754,61,1.655,62,0.567,63,1.025,64,1.674,65,1.939,66,2.662,70,0.997,75,2.511,81,1.793,88,2.09,89,2.359,90,1.501,96,1.674,105,1.814,106,2.252,108,1.94,109,1.793,111,1.814,112,2.314,122,0.836,159,1.597,173,1.415,174,1.403,177,2.245,180,1.94,186,1.327,190,2.243,193,1.146,194,1.307,205,1.64,211,1.501,217,1.429,220,1.146,302,2.966,308,1.012,350,2.773,362,1.403,363,1.986,368,1.986,369,1.986,370,1.986,371,1.986,373,1.793,374,1.334,375,2.082,376,1.986,377,1.986,378,1.986,379,1.986,380,1.986,381,1.986,392,1.986,393,1.793,394,3.889,397,1.403,412,0.954,413,1.986,415,1.986,417,1.986,522,1.793,638,2.243,834,3.164,837,2.662,838,2.662,847,2.947,886,3.595,890,2.947,895,2.947,899,1.986,900,2.243,902,1.986,903,1.986,914,3.329,944,2.243,946,2.243,947,3.908,948,3.908,949,2.633,950,3.908,951,3.908,952,2.633,953,3.908,954,2.633,955,2.633,956,2.633,957,3.908,958,2.633,959,2.633,960,2.633,961,2.633,962,2.633,963,2.633,964,2.633,965,2.633,966,4.661,967,2.633,968,2.633,969,2.633,970,2.633,971,2.633,972,2.633,973,2.633,974,2.633]],["title/classes/VerificationTokenEntity.html",[38,0.172,157,2.201]],["body/classes/VerificationTokenEntity.html",[12,0.023,20,0.249,21,0.22,22,0.22,25,0.418,37,0.249,38,0.185,39,0.012,40,0.016,41,0.012,48,0.309,56,1.565,58,0.816,61,1.089,62,0.639,70,1.39,73,4.29,94,2.325,119,0.914,122,1.082,157,3.15,185,2.583,186,1.461,204,1.551,217,1.441,236,2.18,237,4.308,311,1.296,422,2.022,433,2.201,434,3.543,436,3.543,440,3.543,443,3.543,445,2.364,447,3.543,449,2.364,451,3.15,464,3.543,470,3.15,472,3.445,473,3.445,478,2.695,479,3.543,481,3.15,482,2.905,483,3.445,486,3.15,975,3.233,976,3.796,977,3.796,978,3.796,979,3.796,980,5.058,981,5.058,982,3.796,983,3.796,984,5.689,985,3.796,986,3.796]],["title/coverage.html",[987,3.634]],["body/coverage.html",[6,1.357,12,0.023,22,0.169,29,2.205,38,0.34,39,0.009,40,0.013,41,0.009,42,2.349,43,1.992,45,2.491,55,1.558,62,0.287,82,1.68,90,0.942,120,2.491,121,2.491,147,1.821,148,2.205,157,1.821,160,2.205,173,2.169,175,2.491,180,1.452,197,1.821,208,1.992,217,0.625,268,1.992,269,2.491,270,1.68,277,1.68,284,1.68,291,1.68,302,1.452,308,1.124,312,1.68,343,1.821,346,2.491,350,1.357,374,0.998,397,3.883,432,2.491,438,1.558,453,1.357,499,3.182,509,3.114,530,2.491,531,3.182,549,1.68,550,2.491,551,3.182,570,1.821,571,2.491,572,3.182,590,1.992,591,2.491,602,1.68,607,1.68,609,1.68,627,1.821,630,2.491,663,2.491,684,3.734,691,2.874,702,2.491,703,3.182,706,2.491,707,1.992,709,2.491,710,2.491,711,2.491,727,2.491,750,1.992,751,2.491,766,1.821,786,1.821,789,3.182,793,2.491,812,2.491,819,2.491,827,2.491,834,1.68,835,2.491,836,2.491,841,2.491,886,1.821,887,3.734,917,1.992,918,2.491,946,2.491,975,2.491,987,2.205,988,2.205,989,2.924,990,2.924,991,4.22,992,6.691,993,6.752,994,5.749,995,4.952,996,5.421,997,5.421,998,2.924,999,3.594,1000,2.924,1001,5.99,1002,3.594,1003,2.491,1004,3.594,1005,2.491,1006,4.22,1007,2.924,1008,2.491,1009,2.924,1010,2.924,1011,2.924,1012,2.491,1013,2.491,1014,2.491,1015,2.924,1016,2.924,1017,2.924]],["title/dependencies.html",[3,1.972,1018,2.952]],["body/dependencies.html",[3,2.112,12,0.023,26,0.973,28,1.749,38,0.277,39,0.014,40,0.018,41,0.014,70,0.973,85,1.382,138,1.859,152,3.43,154,2.424,156,3.43,165,3.098,186,1.096,202,3.875,203,3.875,204,1.859,206,3.875,207,3.875,491,1.859,719,4.842,876,3.43,1019,6.202,1020,4.549,1021,4.549,1022,4.549,1023,4.549,1024,4.842,1025,4.549,1026,4.549,1027,4.549,1028,4.549,1029,4.549,1030,4.549,1031,4.549,1032,4.549,1033,4.549,1034,4.549,1035,4.549,1036,4.549,1037,4.549,1038,4.549,1039,4.549,1040,4.549,1041,4.549,1042,4.549,1043,4.549,1044,4.549,1045,4.549,1046,4.549,1047,4.549,1048,4.549]],["title/miscellaneous/enumerations.html",[1049,1.695,1050,3.619]],["body/miscellaneous/enumerations.html",[12,0.022,39,0.016,40,0.019,41,0.016,48,0.425,194,3.378,439,3.846,577,4.206,588,4.657,850,5.26,1049,2.993,1050,4.438,1051,5.211,1052,5.211,1053,6.176,1054,5.211,1055,6.176,1056,6.176,1057,5.211]],["title/miscellaneous/functions.html",[1049,1.695,1058,3.619]],["body/miscellaneous/functions.html",[6,3.139,12,0.02,39,0.017,40,0.02,41,0.017,48,0.453,1008,4.74,1049,3.196,1058,4.74,1059,5.565]],["title/index.html",[48,0.24,1060,2.514,1061,2.514]],["body/index.html",[12,0.022,21,0.259,39,0.014,40,0.017,41,0.014,251,5.238,437,1.717,987,3.368,988,3.368,1062,5.62,1063,5.62,1064,5.62,1065,5.62,1066,6.15,1067,4.467,1068,6.79,1069,4.467,1070,4.467,1071,4.467,1072,6.652,1073,4.467,1074,4.467,1075,5.62,1076,4.467,1077,4.467,1078,4.467,1079,4.467,1080,6.15,1081,5.62,1082,4.467,1083,4.467,1084,4.467,1085,4.467,1086,4.467,1087,4.467,1088,4.467,1089,4.467,1090,4.467,1091,4.467,1092,3.804,1093,4.787,1094,5.62,1095,4.467,1096,4.467,1097,4.467,1098,4.467,1099,4.467,1100,4.467,1101,4.467,1102,4.467,1103,4.467,1104,3.368]],["title/license.html",[1060,2.514,1061,2.514,1104,2.226]],["body/license.html",[12,0.017,19,2.172,39,0.014,40,0.017,41,0.014,248,3.727,373,2.98,375,2.331,988,3.299,1024,3.727,1093,3.727,1104,3.299,1105,6.092,1106,4.376,1107,4.376,1108,4.376,1109,5.548,1110,4.376,1111,4.376,1112,4.376,1113,4.376,1114,4.376,1115,4.376,1116,5.548,1117,7.008,1118,4.376,1119,4.376,1120,4.376,1121,6.092,1122,4.376,1123,5.548,1124,4.376,1125,4.376,1126,5.548,1127,4.376,1128,4.376,1129,4.376,1130,4.376,1131,4.376,1132,4.376,1133,5.548,1134,4.376,1135,4.376,1136,4.376,1137,4.376,1138,4.376,1139,4.376,1140,5.548,1141,5.548,1142,4.376,1143,4.376,1144,4.376,1145,4.376,1146,4.376,1147,4.376,1148,4.376,1149,4.376,1150,4.376,1151,4.376,1152,4.376,1153,4.376,1154,4.376,1155,4.376,1156,4.376,1157,4.376,1158,4.376,1159,4.376,1160,4.376,1161,4.376,1162,4.376,1163,4.376,1164,4.376,1165,4.376,1166,4.376,1167,4.376,1168,4.376,1169,4.376]],["title/modules.html",[2,2.237]],["body/modules.html",[1,3.528,2,2.404,11,2.404,12,0.019,13,2.76,14,3.226,15,2.571,16,2.975,39,0.016,40,0.019,41,0.016,1092,5.992,1170,7.035,1171,7.035,1172,7.035]],["title/overview.html",[1173,4.105]],["body/overview.html",[0,1.403,1,4.78,2,1.798,3,1.798,4,2.063,5,2.063,6,1.798,7,2.063,8,2.063,9,3.299,10,3.299,11,3.142,12,0.023,13,3.65,14,4.342,15,3.401,16,3.887,17,2.731,18,2.063,19,1.923,39,0.012,40,0.016,41,0.012,44,1.583,82,3.3,119,0.933,145,3.299,146,3.299,147,3.579,174,2.063,180,3.31,302,3.31,337,3.299,339,3.299,340,3.299,350,3.095,609,3.3,622,3.299,624,3.299,707,2.638,781,3.299,782,3.299,783,3.299,938,3.299,940,3.299,941,3.299,999,4.366,1014,3.299,1173,3.299,1174,3.873,1175,3.873]],["title/miscellaneous/variables.html",[256,3.204,1049,1.695]],["body/miscellaneous/variables.html",[12,0.023,29,3.668,39,0.011,40,0.015,41,0.011,48,0.292,62,0.663,70,1.367,96,1.089,123,2.44,148,2.701,160,3.668,161,3.051,193,3.017,194,3.442,208,3.313,217,0.766,240,3.051,242,3.051,244,3.051,256,2.701,258,3.051,312,2.794,393,2.44,499,2.701,509,3.82,510,3.691,684,2.701,691,4.036,692,3.668,789,2.701,887,2.701,1002,3.051,1003,4.144,1004,3.051,1005,4.144,1012,3.051,1013,4.144,1049,2.057,1176,4.865,1177,4.865,1178,3.582,1179,3.582,1180,4.865,1181,4.865,1182,3.582,1183,3.582,1184,3.582,1185,3.582,1186,3.582,1187,3.582,1188,3.582,1189,3.582,1190,3.582,1191,3.582,1192,3.582,1193,3.582,1194,3.582,1195,3.582,1196,3.582,1197,3.582,1198,3.582,1199,3.582,1200,3.582,1201,3.582,1202,3.582,1203,3.582,1204,3.582,1205,3.582,1206,3.582,1207,3.582,1208,3.582,1209,3.582,1210,3.582,1211,3.582,1212,3.582,1213,3.582,1214,3.582,1215,3.582,1216,3.582,1217,3.582,1218,3.582,1219,3.582,1220,3.582]]],"invertedIndex":[["",{"_index":12,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"classes/AuthCredentialsDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"classes/Category.html":{},"classes/CategoryRepository.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateEntryDto.html":{},"classes/CreateMediaDto.html":{},"controllers/EntriesController.html":{},"modules/EntriesModule.html":{},"injectables/EntriesService.html":{},"classes/Entry.html":{},"classes/EntryRepository.html":{},"classes/GetCategoriesFilterDto.html":{},"classes/GetEntriesFilterDto.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/Media.html":{},"controllers/MediaController.html":{},"modules/MediaModule.html":{},"classes/MediaRepository.html":{},"injectables/MediaService.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateEntryDto.html":{},"classes/UpdateMediaDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/VerificationTokenEntity.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["0",{"_index":397,"title":{},"body":{"injectables/CategoriesService.html":{},"classes/CategoryRepository.html":{},"injectables/EntriesService.html":{},"classes/MediaRepository.html":{},"injectables/MediaService.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["0.1.12",{"_index":1039,"title":{},"body":{"dependencies.html":{}}}],["0.10.0",{"_index":1029,"title":{},"body":{"dependencies.html":{}}}],["0.2.18",{"_index":1047,"title":{},"body":{"dependencies.html":{}}}],["0.2.3",{"_index":1028,"title":{},"body":{"dependencies.html":{}}}],["0.22.0",{"_index":1032,"title":{},"body":{"dependencies.html":{}}}],["0.4.0",{"_index":1033,"title":{},"body":{"dependencies.html":{}}}],["0/1",{"_index":993,"title":{},"body":{"coverage.html":{}}}],["0/10",{"_index":998,"title":{},"body":{"coverage.html":{}}}],["0/2",{"_index":996,"title":{},"body":{"coverage.html":{}}}],["0/3",{"_index":995,"title":{},"body":{"coverage.html":{}}}],["0/4",{"_index":991,"title":{},"body":{"coverage.html":{}}}],["0/5",{"_index":1001,"title":{},"body":{"coverage.html":{}}}],["0/6",{"_index":997,"title":{},"body":{"coverage.html":{}}}],["0/7",{"_index":994,"title":{},"body":{"coverage.html":{}}}],["0/8",{"_index":1006,"title":{},"body":{"coverage.html":{}}}],["1",{"_index":1175,"title":{},"body":{"overview.html":{}}}],["1/14",{"_index":1011,"title":{},"body":{"coverage.html":{}}}],["1/15",{"_index":1007,"title":{},"body":{"coverage.html":{}}}],["1/16",{"_index":1000,"title":{},"body":{"coverage.html":{}}}],["1/19",{"_index":1015,"title":{},"body":{"coverage.html":{}}}],["19",{"_index":1174,"title":{},"body":{"overview.html":{}}}],["2.4.3",{"_index":1027,"title":{},"body":{"dependencies.html":{}}}],["2.6.2",{"_index":1041,"title":{},"body":{"dependencies.html":{}}}],["20",{"_index":469,"title":{},"body":{"classes/Category.html":{},"classes/Entry.html":{}}}],["2048",{"_index":739,"title":{},"body":{"classes/Media.html":{}}}],["23503",{"_index":510,"title":{},"body":{"classes/CategoryRepository.html":{},"classes/EntryRepository.html":{},"classes/MediaRepository.html":{},"classes/UserRepository.html":{},"miscellaneous/variables.html":{}}}],["23505",{"_index":692,"title":{},"body":{"classes/EntryRepository.html":{},"classes/UserRepository.html":{},"miscellaneous/variables.html":{}}}],["25",{"_index":735,"title":{},"body":{"classes/Media.html":{}}}],["250",{"_index":450,"title":{},"body":{"classes/Category.html":{},"classes/Entry.html":{},"classes/Media.html":{}}}],["255",{"_index":854,"title":{},"body":{"classes/User.html":{}}}],["3.0.1",{"_index":1031,"title":{},"body":{"dependencies.html":{}}}],["3.1.0",{"_index":1025,"title":{},"body":{"dependencies.html":{}}}],["3.2.2",{"_index":1030,"title":{},"body":{"dependencies.html":{}}}],["3.3.3",{"_index":1048,"title":{},"body":{"dependencies.html":{}}}],["32",{"_index":237,"title":{},"body":{"injectables/AuthService.html":{},"classes/VerificationTokenEntity.html":{}}}],["4.0.0",{"_index":1034,"title":{},"body":{"dependencies.html":{}}}],["4.1.2",{"_index":1046,"title":{},"body":{"dependencies.html":{}}}],["5",{"_index":1014,"title":{},"body":{"coverage.html":{},"overview.html":{}}}],["50",{"_index":858,"title":{},"body":{"classes/User.html":{}}}],["6",{"_index":999,"title":{},"body":{"coverage.html":{},"overview.html":{}}}],["6.0.0",{"_index":1019,"title":{},"body":{"dependencies.html":{}}}],["6.1.0",{"_index":1022,"title":{},"body":{"dependencies.html":{}}}],["6.1.1",{"_index":1021,"title":{},"body":{"dependencies.html":{}}}],["6.1.3",{"_index":1026,"title":{},"body":{"dependencies.html":{}}}],["6.3.3",{"_index":1043,"title":{},"body":{"dependencies.html":{}}}],["60",{"_index":864,"title":{},"body":{"classes/User.html":{}}}],["7",{"_index":1010,"title":{},"body":{"coverage.html":{}}}],["7.12.1",{"_index":1036,"title":{},"body":{"dependencies.html":{}}}],["__dirname",{"_index":1213,"title":{},"body":{"miscellaneous/variables.html":{}}}],["_checkforcyclic",{"_index":347,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["_checkforcyclic(id",{"_index":352,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["_getcategorybyid",{"_index":348,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["_getcategorybyid(id",{"_index":355,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["_hashpassword",{"_index":889,"title":{},"body":{"classes/UserRepository.html":{}}}],["_hashpassword(password",{"_index":891,"title":{},"body":{"classes/UserRepository.html":{}}}],["above",{"_index":1139,"title":{},"body":{"license.html":{}}}],["accesstoken",{"_index":224,"title":{},"body":{"injectables/AuthService.html":{}}}],["account",{"_index":252,"title":{},"body":{"injectables/AuthService.html":{}}}],["action",{"_index":1163,"title":{},"body":{"license.html":{}}}],["already",{"_index":697,"title":{},"body":{"classes/EntryRepository.html":{},"classes/UserRepository.html":{}}}],["amount",{"_index":552,"title":{},"body":{"classes/CreateEntryDto.html":{},"classes/Entry.html":{},"classes/UpdateEntryDto.html":{}}}],["and/or",{"_index":373,"title":{},"body":{"injectables/CategoriesService.html":{},"injectables/EntriesService.html":{},"injectables/UsersService.html":{},"license.html":{}}}],["another",{"_index":699,"title":{},"body":{"classes/EntryRepository.html":{}}}],["api",{"_index":1090,"title":{},"body":{"index.html":{}}}],["api.eu.mailgun.net",{"_index":245,"title":{},"body":{"injectables/AuthService.html":{}}}],["apibearerauth",{"_index":316,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/EntriesController.html":{},"controllers/MediaController.html":{},"controllers/UsersController.html":{}}}],["apikey",{"_index":240,"title":{},"body":{"injectables/AuthService.html":{},"miscellaneous/variables.html":{}}}],["apimodelproperty",{"_index":139,"title":{},"body":{"classes/AuthCredentialsDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateEntryDto.html":{},"classes/CreateMediaDto.html":{}}}],["apimodelproperty()@isnotempty()@isstring()@isurl()@maxlength(2048",{"_index":581,"title":{},"body":{"classes/CreateMediaDto.html":{}}}],["apimodelproperty()@isnotempty()@isstring()@maxlength(25",{"_index":538,"title":{},"body":{"classes/CreateCategoryDto.html":{},"classes/CreateEntryDto.html":{},"classes/CreateMediaDto.html":{}}}],["apimodelproperty()@isnotempty()@isstring()@minlength(3)@maxlength(320)@isemail",{"_index":124,"title":{},"body":{"classes/AuthCredentialsDto.html":{}}}],["apimodelproperty()@isnotempty()@isstring()@minlength(8)@maxlength(20)@matches(/((?=.*\\d)|(?=.*\\w+))(?![.\\n])(?=.*[a",{"_index":126,"title":{},"body":{"classes/AuthCredentialsDto.html":{}}}],["apimodelproperty()@transform(undefined)@isnotempty()@isnumber()@notequals(0",{"_index":554,"title":{},"body":{"classes/CreateEntryDto.html":{}}}],["apimodelpropertyoptional",{"_index":542,"title":{},"body":{"classes/CreateCategoryDto.html":{},"classes/CreateEntryDto.html":{},"classes/CreateMediaDto.html":{},"classes/GetCategoriesFilterDto.html":{},"classes/GetEntriesFilterDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateEntryDto.html":{},"classes/UpdateMediaDto.html":{},"classes/UpdateUserDto.html":{}}}],["apimodelpropertyoptional()@isoptional()@isnotempty",{"_index":704,"title":{},"body":{"classes/GetCategoriesFilterDto.html":{},"classes/GetEntriesFilterDto.html":{}}}],["apimodelpropertyoptional()@isoptional()@isnotempty()@isstring()@isurl()@maxlength(2048",{"_index":832,"title":{},"body":{"classes/UpdateMediaDto.html":{}}}],["apimodelpropertyoptional()@isoptional()@isnotempty()@isstring()@maxlength(25",{"_index":816,"title":{},"body":{"classes/UpdateCategoryDto.html":{},"classes/UpdateEntryDto.html":{},"classes/UpdateMediaDto.html":{}}}],["apimodelpropertyoptional()@isoptional()@isnotempty()@isstring()@maxlength(250",{"_index":574,"title":{},"body":{"classes/CreateMediaDto.html":{}}}],["apimodelpropertyoptional()@isoptional()@isnotempty()@isstring()@maxlength(250)@transform(undefined",{"_index":828,"title":{},"body":{"classes/UpdateMediaDto.html":{}}}],["apimodelpropertyoptional()@transform(undefined)@isoptional()@isdatestring()@maxlength(250",{"_index":557,"title":{},"body":{"classes/CreateEntryDto.html":{},"classes/UpdateEntryDto.html":{}}}],["apimodelpropertyoptional()@transform(undefined)@isoptional()@isnotempty()@isnumber()@notequals(0",{"_index":820,"title":{},"body":{"classes/UpdateEntryDto.html":{}}}],["apimodelpropertyoptional()@transform(undefined)@isoptional()@isnotempty()@isstring()@maxlength(250",{"_index":559,"title":{},"body":{"classes/CreateEntryDto.html":{},"classes/UpdateEntryDto.html":{}}}],["apimodelpropertyoptional()@transform(undefined)@isoptional()@isstring()@maxlength(250",{"_index":532,"title":{},"body":{"classes/CreateCategoryDto.html":{},"classes/UpdateCategoryDto.html":{}}}],["apimodelpropertyoptional({enum",{"_index":578,"title":{},"body":{"classes/CreateMediaDto.html":{},"classes/UpdateMediaDto.html":{}}}],["apimodelpropertyoptional({type",{"_index":534,"title":{},"body":{"classes/CreateCategoryDto.html":{},"classes/CreateEntryDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateEntryDto.html":{},"classes/UpdateUserDto.html":{}}}],["apiusetags",{"_index":84,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CategoriesController.html":{},"controllers/EntriesController.html":{},"controllers/MediaController.html":{},"controllers/UsersController.html":{}}}],["apiusetags('auth",{"_index":86,"title":{},"body":{"controllers/AuthController.html":{}}}],["apiusetags('categories",{"_index":317,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["apiusetags('entries",{"_index":613,"title":{},"body":{"controllers/EntriesController.html":{}}}],["apiusetags('media",{"_index":771,"title":{},"body":{"controllers/MediaController.html":{}}}],["apiusetags('users",{"_index":931,"title":{},"body":{"controllers/UsersController.html":{}}}],["app",{"_index":1070,"title":{},"body":{"index.html":{}}}],["appmodule",{"_index":1,"title":{"modules/AppModule.html":{}},"body":{"modules/AppModule.html":{},"modules.html":{},"overview.html":{}}}],["arising",{"_index":1167,"title":{},"body":{"license.html":{}}}],["associated",{"_index":1118,"title":{},"body":{"license.html":{}}}],["async",{"_index":52,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CategoriesService.html":{},"classes/CategoryRepository.html":{},"injectables/EntriesService.html":{},"classes/EntryRepository.html":{},"injectables/JwtStrategy.html":{},"classes/MediaRepository.html":{},"injectables/MediaService.html":{},"classes/UserRepository.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["auth",{"_index":47,"title":{},"body":{"controllers/AuthController.html":{}}}],["auth.controller",{"_index":150,"title":{},"body":{"modules/AuthModule.html":{}}}],["auth.service",{"_index":83,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{}}}],["auth/auth.module",{"_index":31,"title":{},"body":{"modules/AppModule.html":{},"modules/CategoriesModule.html":{},"modules/EntriesModule.html":{},"modules/MediaModule.html":{},"modules/UsersModule.html":{}}}],["auth/dto/auth",{"_index":900,"title":{},"body":{"classes/UserRepository.html":{},"injectables/UsersService.html":{}}}],["authcontroller",{"_index":43,"title":{"controllers/AuthController.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"coverage.html":{}}}],["authcredentialsdto",{"_index":55,"title":{"classes/AuthCredentialsDto.html":{}},"body":{"controllers/AuthController.html":{},"classes/AuthCredentialsDto.html":{},"injectables/AuthService.html":{},"classes/UserRepository.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["authcrendentialsdto",{"_index":190,"title":{},"body":{"injectables/AuthService.html":{},"injectables/UsersService.html":{}}}],["authguard",{"_index":310,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/EntriesController.html":{},"controllers/MediaController.html":{},"controllers/UsersController.html":{}}}],["authmodule",{"_index":11,"title":{"modules/AuthModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoriesModule.html":{},"modules/EntriesModule.html":{},"modules/MediaModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["author",{"_index":1099,"title":{},"body":{"index.html":{}}}],["authors",{"_index":1156,"title":{},"body":{"license.html":{}}}],["authservice",{"_index":82,"title":{"injectables/AuthService.html":{}},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"coverage.html":{},"overview.html":{}}}],["await",{"_index":106,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CategoriesService.html":{},"classes/CategoryRepository.html":{},"injectables/EntriesService.html":{},"classes/EntryRepository.html":{},"injectables/JwtStrategy.html":{},"classes/MediaRepository.html":{},"injectables/MediaService.html":{},"classes/UserRepository.html":{},"injectables/UsersService.html":{}}}],["badrequestexception",{"_index":362,"title":{},"body":{"injectables/CategoriesService.html":{},"classes/CategoryRepository.html":{},"injectables/EntriesService.html":{},"classes/EntryRepository.html":{},"classes/MediaRepository.html":{},"classes/UserRepository.html":{},"injectables/UsersService.html":{}}}],["badrequestexception('circular",{"_index":423,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["badrequestexception('invalid",{"_index":388,"title":{},"body":{"injectables/CategoriesService.html":{},"classes/CategoryRepository.html":{},"injectables/EntriesService.html":{},"classes/EntryRepository.html":{}}}],["badrequestexception(`category",{"_index":526,"title":{},"body":{"classes/CategoryRepository.html":{}}}],["badrequestexception(`invalid",{"_index":522,"title":{},"body":{"classes/CategoryRepository.html":{},"classes/EntryRepository.html":{},"classes/UserRepository.html":{},"injectables/UsersService.html":{}}}],["badrequestexception(`media",{"_index":695,"title":{},"body":{"classes/EntryRepository.html":{},"classes/MediaRepository.html":{}}}],["baseentity",{"_index":434,"title":{},"body":{"classes/Category.html":{},"classes/Entry.html":{},"classes/Media.html":{},"classes/User.html":{},"classes/VerificationTokenEntity.html":{}}}],["bcrypt",{"_index":875,"title":{},"body":{"classes/User.html":{},"classes/UserRepository.html":{}}}],["bcrypt.compare(password",{"_index":884,"title":{},"body":{"classes/User.html":{}}}],["bcrypt.gensalt",{"_index":906,"title":{},"body":{"classes/UserRepository.html":{}}}],["bcrypt.hash(password",{"_index":905,"title":{},"body":{"classes/UserRepository.html":{}}}],["bcryptjs",{"_index":876,"title":{},"body":{"classes/User.html":{},"classes/UserRepository.html":{},"dependencies.html":{}}}],["becauseuserrepository.updateuser",{"_index":969,"title":{},"body":{"injectables/UsersService.html":{}}}],["belongs",{"_index":376,"title":{},"body":{"injectables/CategoriesService.html":{},"injectables/EntriesService.html":{},"injectables/UsersService.html":{}}}],["body",{"_index":74,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CategoriesController.html":{},"controllers/EntriesController.html":{},"controllers/MediaController.html":{},"controllers/UsersController.html":{}}}],["body(new",{"_index":98,"title":{},"body":{"controllers/AuthController.html":{}}}],["boolean",{"_index":868,"title":{},"body":{"classes/User.html":{}}}],["bootstrap",{"_index":6,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoriesModule.html":{},"modules/EntriesModule.html":{},"modules/MediaModule.html":{},"modules/UsersModule.html":{},"coverage.html":{},"miscellaneous/functions.html":{},"overview.html":{}}}],["browse",{"_index":1172,"title":{},"body":{"modules.html":{}}}],["browser",{"_index":1170,"title":{},"body":{"modules.html":{}}}],["c",{"_index":1106,"title":{},"body":{"license.html":{}}}],["call",{"_index":381,"title":{},"body":{"injectables/CategoriesService.html":{},"injectables/EntriesService.html":{},"injectables/UsersService.html":{}}}],["calls",{"_index":369,"title":{},"body":{"injectables/CategoriesService.html":{},"injectables/EntriesService.html":{},"injectables/UsersService.html":{}}}],["cascade",{"_index":473,"title":{},"body":{"classes/Category.html":{},"classes/Entry.html":{},"classes/Media.html":{},"classes/VerificationTokenEntity.html":{}}}],["catch",{"_index":111,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CategoriesService.html":{},"classes/CategoryRepository.html":{},"injectables/EntriesService.html":{},"classes/EntryRepository.html":{},"classes/MediaRepository.html":{},"classes/UserRepository.html":{},"injectables/UsersService.html":{}}}],["categories",{"_index":270,"title":{},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"classes/CategoryRepository.html":{},"classes/GetCategoriesFilterDto.html":{},"classes/User.html":{},"coverage.html":{}}}],["categories.controller",{"_index":342,"title":{},"body":{"modules/CategoriesModule.html":{}}}],["categories.service",{"_index":303,"title":{},"body":{"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{}}}],["categories/categories.module",{"_index":33,"title":{},"body":{"modules/AppModule.html":{},"modules/EntriesModule.html":{},"modules/UsersModule.html":{}}}],["categories/categories.service",{"_index":638,"title":{},"body":{"injectables/EntriesService.html":{},"injectables/UsersService.html":{}}}],["categories/category.entity",{"_index":679,"title":{},"body":{"classes/Entry.html":{},"classes/Media.html":{},"classes/User.html":{}}}],["categoriescontroller",{"_index":268,"title":{"controllers/CategoriesController.html":{}},"body":{"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{},"coverage.html":{}}}],["categoriesmodule",{"_index":13,"title":{"modules/CategoriesModule.html":{}},"body":{"modules/AppModule.html":{},"modules/CategoriesModule.html":{},"modules/EntriesModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["categoriesservice",{"_index":302,"title":{"injectables/CategoriesService.html":{}},"body":{"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"injectables/EntriesService.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["category",{"_index":308,"title":{"classes/Category.html":{}},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"classes/Category.html":{},"classes/CategoryRepository.html":{},"injectables/EntriesService.html":{},"classes/Entry.html":{},"classes/EntryRepository.html":{},"classes/Media.html":{},"classes/User.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["category.childrencategories",{"_index":496,"title":{},"body":{"classes/Category.html":{}}}],["category.dto",{"_index":305,"title":{},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"classes/CategoryRepository.html":{}}}],["category.dto.ts",{"_index":531,"title":{},"body":{"classes/CreateCategoryDto.html":{},"classes/UpdateCategoryDto.html":{},"coverage.html":{}}}],["category.dto.ts:12",{"_index":539,"title":{},"body":{"classes/CreateCategoryDto.html":{}}}],["category.dto.ts:13",{"_index":817,"title":{},"body":{"classes/UpdateCategoryDto.html":{}}}],["category.dto.ts:19",{"_index":533,"title":{},"body":{"classes/CreateCategoryDto.html":{}}}],["category.dto.ts:20",{"_index":813,"title":{},"body":{"classes/UpdateCategoryDto.html":{}}}],["category.dto.ts:25",{"_index":536,"title":{},"body":{"classes/CreateCategoryDto.html":{}}}],["category.dto.ts:26",{"_index":814,"title":{},"body":{"classes/UpdateCategoryDto.html":{}}}],["category.dto.ts:31",{"_index":537,"title":{},"body":{"classes/CreateCategoryDto.html":{}}}],["category.dto.ts:32",{"_index":815,"title":{},"body":{"classes/UpdateCategoryDto.html":{}}}],["category.entity",{"_index":309,"title":{},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"classes/CategoryRepository.html":{}}}],["category.entries",{"_index":682,"title":{},"body":{"classes/Entry.html":{}}}],["category.id",{"_index":523,"title":{},"body":{"classes/CategoryRepository.html":{}}}],["category.image",{"_index":749,"title":{},"body":{"classes/Media.html":{}}}],["category.imageid",{"_index":395,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["category.repository",{"_index":344,"title":{},"body":{"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{}}}],["category.save",{"_index":517,"title":{},"body":{"classes/CategoryRepository.html":{}}}],["category.user",{"_index":883,"title":{},"body":{"classes/User.html":{}}}],["category.userfordefaultcategory",{"_index":880,"title":{},"body":{"classes/User.html":{}}}],["categoryid",{"_index":548,"title":{},"body":{"classes/CreateCategoryDto.html":{},"classes/CreateEntryDto.html":{},"injectables/EntriesService.html":{},"classes/Entry.html":{},"classes/EntryRepository.html":{},"classes/UpdateEntryDto.html":{},"classes/UpdateUserDto.html":{}}}],["categoryrepository",{"_index":343,"title":{"classes/CategoryRepository.html":{}},"body":{"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"classes/CategoryRepository.html":{},"coverage.html":{}}}],["categoryrepository.updatecategory",{"_index":391,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["caught",{"_index":425,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["charge",{"_index":1113,"title":{},"body":{"license.html":{}}}],["check",{"_index":405,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["childrencategories",{"_index":435,"title":{},"body":{"classes/Category.html":{}}}],["claim",{"_index":1159,"title":{},"body":{"license.html":{}}}],["class",{"_index":38,"title":{"classes/AuthCredentialsDto.html":{},"classes/Category.html":{},"classes/CategoryRepository.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateEntryDto.html":{},"classes/CreateMediaDto.html":{},"classes/Entry.html":{},"classes/EntryRepository.html":{},"classes/GetCategoriesFilterDto.html":{},"classes/GetEntriesFilterDto.html":{},"classes/Media.html":{},"classes/MediaRepository.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateEntryDto.html":{},"classes/UpdateMediaDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"classes/VerificationTokenEntity.html":{}},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"classes/AuthCredentialsDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"classes/Category.html":{},"classes/CategoryRepository.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateEntryDto.html":{},"classes/CreateMediaDto.html":{},"controllers/EntriesController.html":{},"modules/EntriesModule.html":{},"injectables/EntriesService.html":{},"classes/Entry.html":{},"classes/EntryRepository.html":{},"classes/GetCategoriesFilterDto.html":{},"classes/GetEntriesFilterDto.html":{},"injectables/JwtStrategy.html":{},"classes/Media.html":{},"controllers/MediaController.html":{},"modules/MediaModule.html":{},"classes/MediaRepository.html":{},"injectables/MediaService.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateEntryDto.html":{},"classes/UpdateMediaDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/VerificationTokenEntity.html":{},"coverage.html":{},"dependencies.html":{}}}],["classes",{"_index":119,"title":{},"body":{"classes/AuthCredentialsDto.html":{},"classes/Category.html":{},"classes/CategoryRepository.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateEntryDto.html":{},"classes/CreateMediaDto.html":{},"classes/Entry.html":{},"classes/EntryRepository.html":{},"classes/GetCategoriesFilterDto.html":{},"classes/GetEntriesFilterDto.html":{},"classes/Media.html":{},"classes/MediaRepository.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateEntryDto.html":{},"classes/UpdateMediaDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"classes/VerificationTokenEntity.html":{},"overview.html":{}}}],["classserializerinterceptor",{"_index":294,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/EntriesController.html":{},"controllers/MediaController.html":{},"controllers/UsersController.html":{}}}],["cluster_appmodule",{"_index":9,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_appmodule_imports",{"_index":10,"title":{},"body":{"modules/AppModule.html":{},"overview.html":{}}}],["cluster_authmodule",{"_index":145,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_authmodule_providers",{"_index":146,"title":{},"body":{"modules/AuthModule.html":{},"overview.html":{}}}],["cluster_categoriesmodule",{"_index":337,"title":{},"body":{"modules/CategoriesModule.html":{},"overview.html":{}}}],["cluster_categoriesmodule_exports",{"_index":339,"title":{},"body":{"modules/CategoriesModule.html":{},"overview.html":{}}}],["cluster_categoriesmodule_imports",{"_index":338,"title":{},"body":{"modules/CategoriesModule.html":{}}}],["cluster_categoriesmodule_providers",{"_index":340,"title":{},"body":{"modules/CategoriesModule.html":{},"overview.html":{}}}],["cluster_entriesmodule",{"_index":622,"title":{},"body":{"modules/EntriesModule.html":{},"overview.html":{}}}],["cluster_entriesmodule_imports",{"_index":623,"title":{},"body":{"modules/EntriesModule.html":{}}}],["cluster_entriesmodule_providers",{"_index":624,"title":{},"body":{"modules/EntriesModule.html":{},"overview.html":{}}}],["cluster_mediamodule",{"_index":781,"title":{},"body":{"modules/MediaModule.html":{},"overview.html":{}}}],["cluster_mediamodule_exports",{"_index":782,"title":{},"body":{"modules/MediaModule.html":{},"overview.html":{}}}],["cluster_mediamodule_providers",{"_index":783,"title":{},"body":{"modules/MediaModule.html":{},"overview.html":{}}}],["cluster_usersmodule",{"_index":938,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_exports",{"_index":940,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["cluster_usersmodule_imports",{"_index":939,"title":{},"body":{"modules/UsersModule.html":{}}}],["cluster_usersmodule_providers",{"_index":941,"title":{},"body":{"modules/UsersModule.html":{},"overview.html":{}}}],["collections",{"_index":1089,"title":{},"body":{"index.html":{}}}],["column",{"_index":481,"title":{},"body":{"classes/Category.html":{},"classes/Entry.html":{},"classes/Media.html":{},"classes/User.html":{},"classes/VerificationTokenEntity.html":{}}}],["column('decimal",{"_index":680,"title":{},"body":{"classes/Entry.html":{}}}],["column({length",{"_index":449,"title":{},"body":{"classes/Category.html":{},"classes/Entry.html":{},"classes/Media.html":{},"classes/User.html":{},"classes/VerificationTokenEntity.html":{}}}],["column({nullable",{"_index":462,"title":{},"body":{"classes/Category.html":{},"classes/Entry.html":{},"classes/User.html":{}}}],["column({type",{"_index":737,"title":{},"body":{"classes/Media.html":{},"classes/User.html":{}}}],["compodoc",{"_index":1085,"title":{},"body":{"index.html":{}}}],["conditions",{"_index":1138,"title":{},"body":{"license.html":{}}}],["conf",{"_index":1003,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["conf.apikey",{"_index":1189,"title":{},"body":{"miscellaneous/variables.html":{}}}],["conf.domain",{"_index":1191,"title":{},"body":{"miscellaneous/variables.html":{}}}],["conf.from",{"_index":1193,"title":{},"body":{"miscellaneous/variables.html":{}}}],["conf.hostname",{"_index":1195,"title":{},"body":{"miscellaneous/variables.html":{}}}],["conf.verificationenabled",{"_index":1187,"title":{},"body":{"miscellaneous/variables.html":{}}}],["config",{"_index":156,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["config.get('db",{"_index":1196,"title":{},"body":{"miscellaneous/variables.html":{}}}],["config.get('email",{"_index":1184,"title":{},"body":{"miscellaneous/variables.html":{}}}],["config.get('jwt",{"_index":161,"title":{},"body":{"modules/AuthModule.html":{},"miscellaneous/variables.html":{}}}],["config.get('jwt.secret",{"_index":725,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["config/mailgun.config",{"_index":209,"title":{},"body":{"injectables/AuthService.html":{},"classes/UserRepository.html":{}}}],["config/typeorm.config",{"_index":30,"title":{},"body":{"modules/AppModule.html":{}}}],["conflictexception",{"_index":901,"title":{},"body":{"classes/UserRepository.html":{}}}],["conflictexception('email",{"_index":910,"title":{},"body":{"classes/UserRepository.html":{}}}],["connection",{"_index":1168,"title":{},"body":{"license.html":{}}}],["const",{"_index":159,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/CategoriesService.html":{},"classes/CategoryRepository.html":{},"injectables/EntriesService.html":{},"classes/EntryRepository.html":{},"injectables/JwtStrategy.html":{},"classes/MediaRepository.html":{},"injectables/MediaService.html":{},"classes/UserRepository.html":{},"injectables/UsersService.html":{}}}],["constructor",{"_index":177,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CategoriesService.html":{},"injectables/EntriesService.html":{},"injectables/JwtStrategy.html":{},"injectables/MediaService.html":{},"injectables/UsersService.html":{}}}],["constructor(categoryrepository",{"_index":349,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["constructor(entryrepository",{"_index":631,"title":{},"body":{"injectables/EntriesService.html":{}}}],["constructor(mediarepository",{"_index":794,"title":{},"body":{"injectables/MediaService.html":{}}}],["constructor(private",{"_index":91,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CategoriesController.html":{},"controllers/EntriesController.html":{},"controllers/MediaController.html":{},"controllers/UsersController.html":{}}}],["constructor(userrepository",{"_index":949,"title":{},"body":{"injectables/UsersService.html":{}}}],["constructor(usersservice",{"_index":712,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["constructor(verificationtokenrepository",{"_index":178,"title":{},"body":{"injectables/AuthService.html":{}}}],["contract",{"_index":1164,"title":{},"body":{"license.html":{}}}],["controller",{"_index":42,"title":{"controllers/AuthController.html":{},"controllers/CategoriesController.html":{},"controllers/EntriesController.html":{},"controllers/MediaController.html":{},"controllers/UsersController.html":{}},"body":{"controllers/AuthController.html":{},"controllers/CategoriesController.html":{},"controllers/EntriesController.html":{},"controllers/MediaController.html":{},"controllers/UsersController.html":{},"coverage.html":{}}}],["controller('auth",{"_index":87,"title":{},"body":{"controllers/AuthController.html":{}}}],["controller('categories",{"_index":318,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["controller('entries",{"_index":614,"title":{},"body":{"controllers/EntriesController.html":{}}}],["controller('media",{"_index":772,"title":{},"body":{"controllers/MediaController.html":{}}}],["controller('users",{"_index":932,"title":{},"body":{"controllers/UsersController.html":{}}}],["controllers",{"_index":44,"title":{},"body":{"controllers/AuthController.html":{},"modules/AuthModule.html":{},"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{},"controllers/EntriesController.html":{},"modules/EntriesModule.html":{},"controllers/MediaController.html":{},"modules/MediaModule.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["copies",{"_index":1133,"title":{},"body":{"license.html":{}}}],["copy",{"_index":1116,"title":{},"body":{"license.html":{}}}],["copyright",{"_index":1105,"title":{},"body":{"license.html":{}}}],["coverage",{"_index":987,"title":{"coverage.html":{}},"body":{"coverage.html":{},"index.html":{}}}],["create",{"_index":518,"title":{},"body":{"classes/CategoryRepository.html":{},"classes/EntryRepository.html":{}}}],["createcategory",{"_index":271,"title":{},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"classes/CategoryRepository.html":{}}}],["createcategory(createcategorydto",{"_index":276,"title":{},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"classes/CategoryRepository.html":{}}}],["createcategorydto",{"_index":277,"title":{"classes/CreateCategoryDto.html":{}},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"classes/CategoryRepository.html":{},"classes/CreateCategoryDto.html":{},"coverage.html":{}}}],["createcategorydto.imageid",{"_index":382,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["createcategorydto.parentcategoryid",{"_index":384,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["createdatecolumn",{"_index":447,"title":{},"body":{"classes/Category.html":{},"classes/Entry.html":{},"classes/Media.html":{},"classes/User.html":{},"classes/VerificationTokenEntity.html":{}}}],["createentry",{"_index":592,"title":{},"body":{"controllers/EntriesController.html":{},"injectables/EntriesService.html":{},"classes/EntryRepository.html":{}}}],["createentry(createentrydto",{"_index":597,"title":{},"body":{"controllers/EntriesController.html":{},"injectables/EntriesService.html":{},"classes/EntryRepository.html":{}}}],["createentrydto",{"_index":549,"title":{"classes/CreateEntryDto.html":{}},"body":{"classes/CreateEntryDto.html":{},"controllers/EntriesController.html":{},"injectables/EntriesService.html":{},"classes/EntryRepository.html":{},"coverage.html":{}}}],["createentrydto.categoryid",{"_index":645,"title":{},"body":{"injectables/EntriesService.html":{}}}],["createentrydto.imageid",{"_index":643,"title":{},"body":{"injectables/EntriesService.html":{}}}],["createmedia",{"_index":752,"title":{},"body":{"controllers/MediaController.html":{},"injectables/MediaService.html":{}}}],["createmedia(createmediadto",{"_index":757,"title":{},"body":{"controllers/MediaController.html":{},"injectables/MediaService.html":{}}}],["createmediadto",{"_index":570,"title":{"classes/CreateMediaDto.html":{}},"body":{"classes/CreateMediaDto.html":{},"controllers/MediaController.html":{},"injectables/MediaService.html":{},"coverage.html":{}}}],["createparamdecorator((data",{"_index":1218,"title":{},"body":{"miscellaneous/variables.html":{}}}],["creating",{"_index":331,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/EntriesController.html":{},"controllers/MediaController.html":{}}}],["creationdate",{"_index":436,"title":{},"body":{"classes/Category.html":{},"classes/Entry.html":{},"classes/Media.html":{},"classes/User.html":{},"classes/VerificationTokenEntity.html":{}}}],["credentials",{"_index":101,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["credentials.dto",{"_index":81,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/UserRepository.html":{},"injectables/UsersService.html":{}}}],["credentials.dto.ts",{"_index":121,"title":{},"body":{"classes/AuthCredentialsDto.html":{},"coverage.html":{}}}],["credentials.dto.ts:12",{"_index":125,"title":{},"body":{"classes/AuthCredentialsDto.html":{}}}],["credentials.dto.ts:20",{"_index":131,"title":{},"body":{"classes/AuthCredentialsDto.html":{}}}],["crypto",{"_index":202,"title":{},"body":{"injectables/AuthService.html":{},"dependencies.html":{}}}],["cryptorandomstring",{"_index":201,"title":{},"body":{"injectables/AuthService.html":{}}}],["currency",{"_index":842,"title":{},"body":{"classes/User.html":{}}}],["currency.enum",{"_index":877,"title":{},"body":{"classes/User.html":{}}}],["currencyenum",{"_index":850,"title":{},"body":{"classes/User.html":{},"miscellaneous/enumerations.html":{}}}],["currencyenum.euro",{"_index":879,"title":{},"body":{"classes/User.html":{}}}],["current",{"_index":408,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["damages",{"_index":1160,"title":{},"body":{"license.html":{}}}],["data",{"_index":246,"title":{},"body":{"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"classes/CategoryRepository.html":{},"controllers/EntriesController.html":{},"classes/EntryRepository.html":{},"controllers/MediaController.html":{}}}],["database",{"_index":1209,"title":{},"body":{"miscellaneous/variables.html":{}}}],["date",{"_index":553,"title":{},"body":{"classes/CreateEntryDto.html":{},"classes/Entry.html":{},"classes/UpdateEntryDto.html":{}}}],["db",{"_index":380,"title":{},"body":{"injectables/CategoriesService.html":{},"injectables/EntriesService.html":{},"injectables/UsersService.html":{}}}],["dbconfig",{"_index":1005,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["dbconfig.database",{"_index":1211,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dbconfig.email",{"_index":1206,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dbconfig.host",{"_index":1200,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dbconfig.password",{"_index":1208,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dbconfig.port",{"_index":1203,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dbconfig.synchronize",{"_index":1217,"title":{},"body":{"miscellaneous/variables.html":{}}}],["dbconfig.type",{"_index":1198,"title":{},"body":{"miscellaneous/variables.html":{}}}],["deal",{"_index":1120,"title":{},"body":{"license.html":{}}}],["dealings",{"_index":1169,"title":{},"body":{"license.html":{}}}],["declarations",{"_index":5,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoriesModule.html":{},"modules/EntriesModule.html":{},"modules/MediaModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["decorators",{"_index":56,"title":{},"body":{"controllers/AuthController.html":{},"classes/AuthCredentialsDto.html":{},"controllers/CategoriesController.html":{},"classes/Category.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateEntryDto.html":{},"classes/CreateMediaDto.html":{},"controllers/EntriesController.html":{},"classes/Entry.html":{},"classes/GetCategoriesFilterDto.html":{},"classes/GetEntriesFilterDto.html":{},"classes/Media.html":{},"controllers/MediaController.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateEntryDto.html":{},"classes/UpdateMediaDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"classes/VerificationTokenEntity.html":{}}}],["default",{"_index":193,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CategoriesService.html":{},"classes/Category.html":{},"classes/CategoryRepository.html":{},"injectables/EntriesService.html":{},"classes/EntryRepository.html":{},"classes/Media.html":{},"classes/User.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["defaultcategory",{"_index":843,"title":{},"body":{"classes/User.html":{}}}],["defaultcategoryid",{"_index":837,"title":{},"body":{"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"injectables/UsersService.html":{}}}],["defaultstrategy",{"_index":164,"title":{},"body":{"modules/AuthModule.html":{}}}],["defined",{"_index":58,"title":{},"body":{"controllers/AuthController.html":{},"classes/AuthCredentialsDto.html":{},"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"classes/Category.html":{},"classes/CategoryRepository.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateEntryDto.html":{},"classes/CreateMediaDto.html":{},"controllers/EntriesController.html":{},"injectables/EntriesService.html":{},"classes/Entry.html":{},"classes/EntryRepository.html":{},"classes/GetCategoriesFilterDto.html":{},"classes/GetEntriesFilterDto.html":{},"injectables/JwtStrategy.html":{},"classes/Media.html":{},"controllers/MediaController.html":{},"classes/MediaRepository.html":{},"injectables/MediaService.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateEntryDto.html":{},"classes/UpdateMediaDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/VerificationTokenEntity.html":{}}}],["delete",{"_index":295,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/EntriesController.html":{},"controllers/MediaController.html":{},"controllers/UsersController.html":{}}}],["delete('/:id",{"_index":281,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/EntriesController.html":{},"controllers/MediaController.html":{}}}],["delete('/current",{"_index":923,"title":{},"body":{"controllers/UsersController.html":{}}}],["deletecategory",{"_index":272,"title":{},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"classes/CategoryRepository.html":{}}}],["deletecategory(id",{"_index":280,"title":{},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"classes/CategoryRepository.html":{}}}],["deletecurrent",{"_index":920,"title":{},"body":{"controllers/UsersController.html":{}}}],["deletecurrent(@getuser",{"_index":936,"title":{},"body":{"controllers/UsersController.html":{}}}],["deletecurrent(user",{"_index":922,"title":{},"body":{"controllers/UsersController.html":{}}}],["deleted",{"_index":417,"title":{},"body":{"injectables/CategoriesService.html":{},"injectables/EntriesService.html":{},"injectables/UsersService.html":{}}}],["deleteentry",{"_index":593,"title":{},"body":{"controllers/EntriesController.html":{},"injectables/EntriesService.html":{}}}],["deleteentry(id",{"_index":599,"title":{},"body":{"controllers/EntriesController.html":{},"injectables/EntriesService.html":{}}}],["deletemedia",{"_index":753,"title":{},"body":{"controllers/MediaController.html":{},"classes/MediaRepository.html":{},"injectables/MediaService.html":{}}}],["deletemedia(id",{"_index":759,"title":{},"body":{"controllers/MediaController.html":{},"classes/MediaRepository.html":{},"injectables/MediaService.html":{}}}],["deleteuser",{"_index":947,"title":{},"body":{"injectables/UsersService.html":{}}}],["deleteuser(id",{"_index":951,"title":{},"body":{"injectables/UsersService.html":{}}}],["denis",{"_index":1100,"title":{},"body":{"index.html":{}}}],["dependencies",{"_index":3,"title":{"dependencies.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoriesModule.html":{},"modules/EntriesModule.html":{},"modules/MediaModule.html":{},"modules/UsersModule.html":{},"dependencies.html":{},"overview.html":{}}}],["description",{"_index":437,"title":{},"body":{"classes/Category.html":{},"classes/CategoryRepository.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateEntryDto.html":{},"classes/CreateMediaDto.html":{},"classes/Entry.html":{},"classes/EntryRepository.html":{},"classes/Media.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateEntryDto.html":{},"classes/UpdateMediaDto.html":{},"index.html":{}}}],["development",{"_index":1071,"title":{},"body":{"index.html":{}}}],["distribute",{"_index":1130,"title":{},"body":{"license.html":{}}}],["documentation",{"_index":988,"title":{},"body":{"coverage.html":{},"index.html":{},"license.html":{}}}],["dollar",{"_index":1056,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["domain",{"_index":242,"title":{},"body":{"injectables/AuthService.html":{},"miscellaneous/variables.html":{}}}],["done",{"_index":370,"title":{},"body":{"injectables/CategoriesService.html":{},"injectables/EntriesService.html":{},"injectables/UsersService.html":{}}}],["dto/auth",{"_index":80,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["dto/create",{"_index":304,"title":{},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"classes/CategoryRepository.html":{},"controllers/EntriesController.html":{},"injectables/EntriesService.html":{},"classes/EntryRepository.html":{},"controllers/MediaController.html":{},"injectables/MediaService.html":{}}}],["dto/get",{"_index":306,"title":{},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"classes/CategoryRepository.html":{},"controllers/EntriesController.html":{},"injectables/EntriesService.html":{},"classes/EntryRepository.html":{}}}],["dto/update",{"_index":315,"title":{},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"classes/CategoryRepository.html":{},"controllers/EntriesController.html":{},"injectables/EntriesService.html":{},"classes/EntryRepository.html":{},"controllers/MediaController.html":{},"injectables/MediaService.html":{}}}],["e",{"_index":112,"title":{},"body":{"controllers/AuthController.html":{},"injectables/CategoriesService.html":{},"classes/CategoryRepository.html":{},"injectables/EntriesService.html":{},"classes/EntryRepository.html":{},"classes/MediaRepository.html":{},"classes/UserRepository.html":{},"injectables/UsersService.html":{}}}],["e.code",{"_index":519,"title":{},"body":{"classes/CategoryRepository.html":{},"classes/EntryRepository.html":{},"classes/MediaRepository.html":{},"classes/UserRepository.html":{}}}],["e.stack",{"_index":115,"title":{},"body":{"controllers/AuthController.html":{},"classes/CategoryRepository.html":{},"classes/EntryRepository.html":{}}}],["eager",{"_index":980,"title":{},"body":{"classes/VerificationTokenEntity.html":{}}}],["email",{"_index":108,"title":{},"body":{"controllers/AuthController.html":{},"classes/AuthCredentialsDto.html":{},"injectables/AuthService.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"injectables/UsersService.html":{}}}],["email_confirm",{"_index":254,"title":{},"body":{"injectables/AuthService.html":{}}}],["emailconfig",{"_index":208,"title":{},"body":{"injectables/AuthService.html":{},"classes/UserRepository.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["emailconfig.apikey",{"_index":241,"title":{},"body":{"injectables/AuthService.html":{}}}],["emailconfig.domain",{"_index":243,"title":{},"body":{"injectables/AuthService.html":{}}}],["emailconfig.from",{"_index":247,"title":{},"body":{"injectables/AuthService.html":{}}}],["emailconfig.hostname",{"_index":259,"title":{},"body":{"injectables/AuthService.html":{}}}],["emailconfig.verificationenabled",{"_index":215,"title":{},"body":{"injectables/AuthService.html":{},"classes/UserRepository.html":{}}}],["ensure",{"_index":371,"title":{},"body":{"injectables/CategoriesService.html":{},"injectables/EntriesService.html":{},"injectables/UsersService.html":{}}}],["entities",{"_index":1212,"title":{},"body":{"miscellaneous/variables.html":{}}}],["entity",{"_index":482,"title":{},"body":{"classes/Category.html":{},"classes/Entry.html":{},"classes/EntryRepository.html":{},"classes/Media.html":{},"classes/User.html":{},"classes/VerificationTokenEntity.html":{}}}],["entity.{js,ts",{"_index":1214,"title":{},"body":{"miscellaneous/variables.html":{}}}],["entityrepository",{"_index":507,"title":{},"body":{"classes/CategoryRepository.html":{},"classes/EntryRepository.html":{},"classes/MediaRepository.html":{},"classes/UserRepository.html":{}}}],["entityrepository(category",{"_index":511,"title":{},"body":{"classes/CategoryRepository.html":{}}}],["entityrepository(entry",{"_index":693,"title":{},"body":{"classes/EntryRepository.html":{}}}],["entityrepository(media",{"_index":791,"title":{},"body":{"classes/MediaRepository.html":{}}}],["entityrepository(user",{"_index":904,"title":{},"body":{"classes/UserRepository.html":{}}}],["entries",{"_index":438,"title":{},"body":{"classes/Category.html":{},"controllers/EntriesController.html":{},"injectables/EntriesService.html":{},"classes/EntryRepository.html":{},"classes/GetEntriesFilterDto.html":{},"classes/User.html":{},"coverage.html":{}}}],["entries.controller",{"_index":626,"title":{},"body":{"modules/EntriesModule.html":{}}}],["entries.service",{"_index":610,"title":{},"body":{"controllers/EntriesController.html":{},"modules/EntriesModule.html":{}}}],["entries/entries.module",{"_index":32,"title":{},"body":{"modules/AppModule.html":{}}}],["entries/entry.entity",{"_index":488,"title":{},"body":{"classes/Category.html":{},"classes/Media.html":{},"classes/User.html":{}}}],["entriescontroller",{"_index":590,"title":{"controllers/EntriesController.html":{}},"body":{"controllers/EntriesController.html":{},"modules/EntriesModule.html":{},"coverage.html":{}}}],["entriesmodule",{"_index":14,"title":{"modules/EntriesModule.html":{}},"body":{"modules/AppModule.html":{},"modules/EntriesModule.html":{},"modules.html":{},"overview.html":{}}}],["entriesservice",{"_index":609,"title":{"injectables/EntriesService.html":{}},"body":{"controllers/EntriesController.html":{},"modules/EntriesModule.html":{},"injectables/EntriesService.html":{},"coverage.html":{},"overview.html":{}}}],["entry",{"_index":453,"title":{"classes/Entry.html":{}},"body":{"classes/Category.html":{},"controllers/EntriesController.html":{},"injectables/EntriesService.html":{},"classes/Entry.html":{},"classes/EntryRepository.html":{},"classes/Media.html":{},"classes/User.html":{},"coverage.html":{}}}],["entry.category",{"_index":494,"title":{},"body":{"classes/Category.html":{}}}],["entry.dto",{"_index":611,"title":{},"body":{"controllers/EntriesController.html":{},"injectables/EntriesService.html":{},"classes/EntryRepository.html":{}}}],["entry.dto.ts",{"_index":551,"title":{},"body":{"classes/CreateEntryDto.html":{},"classes/UpdateEntryDto.html":{},"coverage.html":{}}}],["entry.dto.ts:12",{"_index":562,"title":{},"body":{"classes/CreateEntryDto.html":{}}}],["entry.dto.ts:13",{"_index":826,"title":{},"body":{"classes/UpdateEntryDto.html":{}}}],["entry.dto.ts:20",{"_index":560,"title":{},"body":{"classes/CreateEntryDto.html":{}}}],["entry.dto.ts:21",{"_index":824,"title":{},"body":{"classes/UpdateEntryDto.html":{}}}],["entry.dto.ts:27",{"_index":555,"title":{},"body":{"classes/CreateEntryDto.html":{}}}],["entry.dto.ts:29",{"_index":821,"title":{},"body":{"classes/UpdateEntryDto.html":{}}}],["entry.dto.ts:34",{"_index":558,"title":{},"body":{"classes/CreateEntryDto.html":{}}}],["entry.dto.ts:36",{"_index":823,"title":{},"body":{"classes/UpdateEntryDto.html":{}}}],["entry.dto.ts:40",{"_index":561,"title":{},"body":{"classes/CreateEntryDto.html":{}}}],["entry.dto.ts:42",{"_index":825,"title":{},"body":{"classes/UpdateEntryDto.html":{}}}],["entry.dto.ts:46",{"_index":556,"title":{},"body":{"classes/CreateEntryDto.html":{}}}],["entry.dto.ts:48",{"_index":822,"title":{},"body":{"classes/UpdateEntryDto.html":{}}}],["entry.entity",{"_index":612,"title":{},"body":{"controllers/EntriesController.html":{},"injectables/EntriesService.html":{},"classes/EntryRepository.html":{}}}],["entry.id",{"_index":696,"title":{},"body":{"classes/EntryRepository.html":{}}}],["entry.image",{"_index":748,"title":{},"body":{"classes/Media.html":{}}}],["entry.imageid",{"_index":651,"title":{},"body":{"injectables/EntriesService.html":{}}}],["entry.repository",{"_index":628,"title":{},"body":{"modules/EntriesModule.html":{},"injectables/EntriesService.html":{}}}],["entry.save",{"_index":694,"title":{},"body":{"classes/EntryRepository.html":{}}}],["entry.user",{"_index":882,"title":{},"body":{"classes/User.html":{}}}],["entryrepository",{"_index":627,"title":{"classes/EntryRepository.html":{}},"body":{"modules/EntriesModule.html":{},"injectables/EntriesService.html":{},"classes/EntryRepository.html":{},"coverage.html":{}}}],["entryrepository.updateentry",{"_index":650,"title":{},"body":{"injectables/EntriesService.html":{}}}],["enum",{"_index":587,"title":{},"body":{"classes/CreateMediaDto.html":{},"classes/Media.html":{},"classes/UpdateMediaDto.html":{},"classes/User.html":{}}}],["enumerations",{"_index":1050,"title":{"miscellaneous/enumerations.html":{}},"body":{"miscellaneous/enumerations.html":{}}}],["err",{"_index":264,"title":{},"body":{"injectables/AuthService.html":{}}}],["error",{"_index":116,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["euro",{"_index":1055,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["event",{"_index":1155,"title":{},"body":{"license.html":{}}}],["exceptionfactory",{"_index":99,"title":{},"body":{"controllers/AuthController.html":{}}}],["exclude",{"_index":490,"title":{},"body":{"classes/Category.html":{},"classes/Entry.html":{},"classes/Media.html":{},"classes/User.html":{}}}],["exclude()@column({default",{"_index":869,"title":{},"body":{"classes/User.html":{}}}],["exclude()@column({length",{"_index":863,"title":{},"body":{"classes/User.html":{}}}],["exclude()@column({nullable",{"_index":476,"title":{},"body":{"classes/Category.html":{},"classes/Entry.html":{},"classes/Media.html":{}}}],["exclude()@manytoone(undefined",{"_index":466,"title":{},"body":{"classes/Category.html":{},"classes/Entry.html":{},"classes/Media.html":{}}}],["exclude()@onetomany(undefined",{"_index":454,"title":{},"body":{"classes/Category.html":{},"classes/User.html":{}}}],["exclude()@onetoone(undefined",{"_index":458,"title":{},"body":{"classes/Category.html":{},"classes/Entry.html":{},"classes/Media.html":{},"classes/User.html":{}}}],["exists",{"_index":911,"title":{},"body":{"classes/UserRepository.html":{}}}],["expense",{"_index":1062,"title":{},"body":{"index.html":{}}}],["expiresin",{"_index":171,"title":{},"body":{"modules/AuthModule.html":{}}}],["export",{"_index":37,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"classes/AuthCredentialsDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"classes/Category.html":{},"classes/CategoryRepository.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateEntryDto.html":{},"classes/CreateMediaDto.html":{},"controllers/EntriesController.html":{},"modules/EntriesModule.html":{},"injectables/EntriesService.html":{},"classes/Entry.html":{},"classes/EntryRepository.html":{},"classes/GetCategoriesFilterDto.html":{},"classes/GetEntriesFilterDto.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/Media.html":{},"controllers/MediaController.html":{},"modules/MediaModule.html":{},"classes/MediaRepository.html":{},"injectables/MediaService.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateEntryDto.html":{},"classes/UpdateMediaDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/VerificationTokenEntity.html":{}}}],["exports",{"_index":8,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoriesModule.html":{},"modules/EntriesModule.html":{},"modules/MediaModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["express",{"_index":1024,"title":{},"body":{"dependencies.html":{},"license.html":{}}}],["extends",{"_index":433,"title":{},"body":{"classes/Category.html":{},"classes/CategoryRepository.html":{},"classes/Entry.html":{},"classes/EntryRepository.html":{},"injectables/JwtStrategy.html":{},"classes/Media.html":{},"classes/MediaRepository.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"classes/VerificationTokenEntity.html":{}}}],["extractjwt",{"_index":717,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["extractjwt.fromauthheaderasbearertoken",{"_index":723,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["false",{"_index":470,"title":{},"body":{"classes/Category.html":{},"classes/Entry.html":{},"classes/Media.html":{},"classes/User.html":{},"classes/VerificationTokenEntity.html":{}}}],["fields",{"_index":406,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["file",{"_index":22,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"classes/AuthCredentialsDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"classes/Category.html":{},"classes/CategoryRepository.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateEntryDto.html":{},"classes/CreateMediaDto.html":{},"controllers/EntriesController.html":{},"modules/EntriesModule.html":{},"injectables/EntriesService.html":{},"classes/Entry.html":{},"classes/EntryRepository.html":{},"classes/GetCategoriesFilterDto.html":{},"classes/GetEntriesFilterDto.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/Media.html":{},"controllers/MediaController.html":{},"modules/MediaModule.html":{},"classes/MediaRepository.html":{},"injectables/MediaService.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateEntryDto.html":{},"classes/UpdateMediaDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/VerificationTokenEntity.html":{},"coverage.html":{}}}],["files",{"_index":1119,"title":{},"body":{"license.html":{}}}],["filter.dto",{"_index":307,"title":{},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"classes/CategoryRepository.html":{},"controllers/EntriesController.html":{},"injectables/EntriesService.html":{},"classes/EntryRepository.html":{}}}],["filter.dto.ts",{"_index":703,"title":{},"body":{"classes/GetCategoriesFilterDto.html":{},"classes/GetEntriesFilterDto.html":{},"coverage.html":{}}}],["filter.dto.ts:9",{"_index":705,"title":{},"body":{"classes/GetCategoriesFilterDto.html":{},"classes/GetEntriesFilterDto.html":{}}}],["filterdto",{"_index":286,"title":{},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"classes/CategoryRepository.html":{},"controllers/EntriesController.html":{},"injectables/EntriesService.html":{},"classes/EntryRepository.html":{}}}],["filters",{"_index":325,"title":{},"body":{"controllers/CategoriesController.html":{},"classes/CategoryRepository.html":{},"controllers/EntriesController.html":{},"classes/EntryRepository.html":{}}}],["findone",{"_index":948,"title":{},"body":{"injectables/UsersService.html":{}}}],["findone(email",{"_index":953,"title":{},"body":{"injectables/UsersService.html":{}}}],["fitness",{"_index":1151,"title":{},"body":{"license.html":{}}}],["following",{"_index":1137,"title":{},"body":{"license.html":{}}}],["forwardref",{"_index":149,"title":{},"body":{"modules/AuthModule.html":{},"modules/CategoriesModule.html":{},"modules/MediaModule.html":{},"modules/UsersModule.html":{}}}],["found",{"_index":232,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CategoriesService.html":{},"classes/CategoryRepository.html":{},"injectables/EntriesService.html":{},"classes/MediaRepository.html":{},"injectables/MediaService.html":{}}}],["free",{"_index":1112,"title":{},"body":{"license.html":{}}}],["fullname",{"_index":1108,"title":{},"body":{"license.html":{}}}],["function",{"_index":1009,"title":{},"body":{"coverage.html":{}}}],["functions",{"_index":1058,"title":{"miscellaneous/functions.html":{}},"body":{"miscellaneous/functions.html":{}}}],["furnished",{"_index":1136,"title":{},"body":{"license.html":{}}}],["generate",{"_index":1083,"title":{},"body":{"index.html":{}}}],["get('/:id",{"_index":288,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/EntriesController.html":{},"controllers/MediaController.html":{}}}],["get('/current",{"_index":926,"title":{},"body":{"controllers/UsersController.html":{}}}],["get('/email/verify/:token",{"_index":71,"title":{},"body":{"controllers/AuthController.html":{}}}],["getallmedia",{"_index":754,"title":{},"body":{"controllers/MediaController.html":{},"injectables/MediaService.html":{}}}],["getallmedia(@getuser",{"_index":774,"title":{},"body":{"controllers/MediaController.html":{}}}],["getallmedia(user",{"_index":761,"title":{},"body":{"controllers/MediaController.html":{},"injectables/MediaService.html":{}}}],["getcategories",{"_index":273,"title":{},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"classes/CategoryRepository.html":{}}}],["getcategories(filterdto",{"_index":283,"title":{},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"classes/CategoryRepository.html":{}}}],["getcategoriesfilterdto",{"_index":284,"title":{"classes/GetCategoriesFilterDto.html":{}},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"classes/CategoryRepository.html":{},"classes/GetCategoriesFilterDto.html":{},"coverage.html":{}}}],["getcategorybyid",{"_index":274,"title":{},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{}}}],["getcategorybyid(id",{"_index":287,"title":{},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{}}}],["getcurrent",{"_index":921,"title":{},"body":{"controllers/UsersController.html":{}}}],["getcurrent(@getuser",{"_index":933,"title":{},"body":{"controllers/UsersController.html":{}}}],["getcurrent(user",{"_index":925,"title":{},"body":{"controllers/UsersController.html":{}}}],["getentries",{"_index":594,"title":{},"body":{"controllers/EntriesController.html":{},"injectables/EntriesService.html":{},"classes/EntryRepository.html":{}}}],["getentries(filterdto",{"_index":601,"title":{},"body":{"controllers/EntriesController.html":{},"injectables/EntriesService.html":{},"classes/EntryRepository.html":{}}}],["getentriesfilterdto",{"_index":602,"title":{"classes/GetEntriesFilterDto.html":{}},"body":{"controllers/EntriesController.html":{},"injectables/EntriesService.html":{},"classes/EntryRepository.html":{},"classes/GetEntriesFilterDto.html":{},"coverage.html":{}}}],["getentrybyid",{"_index":595,"title":{},"body":{"controllers/EntriesController.html":{},"injectables/EntriesService.html":{}}}],["getentrybyid(id",{"_index":604,"title":{},"body":{"controllers/EntriesController.html":{},"injectables/EntriesService.html":{}}}],["getmediabyid",{"_index":755,"title":{},"body":{"controllers/MediaController.html":{},"injectables/MediaService.html":{}}}],["getmediabyid(id",{"_index":763,"title":{},"body":{"controllers/MediaController.html":{},"injectables/MediaService.html":{}}}],["getting",{"_index":1060,"title":{"index.html":{},"license.html":{}},"body":{}}],["getuser",{"_index":312,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/EntriesController.html":{},"controllers/MediaController.html":{},"controllers/UsersController.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["granted",{"_index":1111,"title":{},"body":{"license.html":{}}}],["h:x",{"_index":255,"title":{},"body":{"injectables/AuthService.html":{}}}],["hamann",{"_index":1101,"title":{},"body":{"index.html":{}}}],["hereby",{"_index":1110,"title":{},"body":{"license.html":{}}}],["holders",{"_index":1157,"title":{},"body":{"license.html":{}}}],["host",{"_index":244,"title":{},"body":{"injectables/AuthService.html":{},"miscellaneous/variables.html":{}}}],["hostname",{"_index":258,"title":{},"body":{"injectables/AuthService.html":{},"miscellaneous/variables.html":{}}}],["https://shargea.com",{"_index":1103,"title":{},"body":{"index.html":{}}}],["id",{"_index":211,"title":{},"body":{"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"classes/Category.html":{},"classes/CategoryRepository.html":{},"controllers/EntriesController.html":{},"injectables/EntriesService.html":{},"classes/Entry.html":{},"classes/EntryRepository.html":{},"classes/Media.html":{},"controllers/MediaController.html":{},"classes/MediaRepository.html":{},"injectables/MediaService.html":{},"classes/User.html":{},"injectables/UsersService.html":{}}}],["idempotent",{"_index":103,"title":{},"body":{"controllers/AuthController.html":{}}}],["identifier",{"_index":989,"title":{},"body":{"coverage.html":{}}}],["image",{"_index":439,"title":{},"body":{"classes/Category.html":{},"classes/CreateMediaDto.html":{},"classes/Entry.html":{},"classes/UpdateMediaDto.html":{},"miscellaneous/enumerations.html":{}}}],["imageid",{"_index":418,"title":{},"body":{"injectables/CategoriesService.html":{},"classes/Category.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateEntryDto.html":{},"injectables/EntriesService.html":{},"classes/Entry.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateEntryDto.html":{}}}],["implied",{"_index":1147,"title":{},"body":{"license.html":{}}}],["import",{"_index":25,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"classes/AuthCredentialsDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"classes/Category.html":{},"classes/CategoryRepository.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateEntryDto.html":{},"classes/CreateMediaDto.html":{},"controllers/EntriesController.html":{},"modules/EntriesModule.html":{},"injectables/EntriesService.html":{},"classes/Entry.html":{},"classes/EntryRepository.html":{},"classes/GetCategoriesFilterDto.html":{},"classes/GetEntriesFilterDto.html":{},"injectables/JwtStrategy.html":{},"classes/Media.html":{},"controllers/MediaController.html":{},"modules/MediaModule.html":{},"classes/MediaRepository.html":{},"injectables/MediaService.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateEntryDto.html":{},"classes/UpdateMediaDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/VerificationTokenEntity.html":{}}}],["imports",{"_index":24,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoriesModule.html":{},"modules/EntriesModule.html":{},"modules/MediaModule.html":{},"modules/UsersModule.html":{}}}],["included",{"_index":1142,"title":{},"body":{"license.html":{}}}],["including",{"_index":1123,"title":{},"body":{"license.html":{}}}],["index",{"_index":48,"title":{"index.html":{}},"body":{"controllers/AuthController.html":{},"classes/AuthCredentialsDto.html":{},"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"classes/Category.html":{},"classes/CategoryRepository.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateEntryDto.html":{},"classes/CreateMediaDto.html":{},"controllers/EntriesController.html":{},"injectables/EntriesService.html":{},"classes/Entry.html":{},"classes/EntryRepository.html":{},"classes/GetCategoriesFilterDto.html":{},"classes/GetEntriesFilterDto.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/Media.html":{},"controllers/MediaController.html":{},"classes/MediaRepository.html":{},"injectables/MediaService.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateEntryDto.html":{},"classes/UpdateMediaDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/VerificationTokenEntity.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["info",{"_index":20,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"classes/AuthCredentialsDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"classes/Category.html":{},"classes/CategoryRepository.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateEntryDto.html":{},"classes/CreateMediaDto.html":{},"controllers/EntriesController.html":{},"modules/EntriesModule.html":{},"injectables/EntriesService.html":{},"classes/Entry.html":{},"classes/EntryRepository.html":{},"classes/GetCategoriesFilterDto.html":{},"classes/GetEntriesFilterDto.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/Media.html":{},"controllers/MediaController.html":{},"modules/MediaModule.html":{},"classes/MediaRepository.html":{},"injectables/MediaService.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateEntryDto.html":{},"classes/UpdateMediaDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/VerificationTokenEntity.html":{}}}],["injectable",{"_index":173,"title":{"injectables/AuthService.html":{},"injectables/CategoriesService.html":{},"injectables/EntriesService.html":{},"injectables/JwtStrategy.html":{},"injectables/MediaService.html":{},"injectables/UsersService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/CategoriesService.html":{},"injectables/EntriesService.html":{},"injectables/JwtStrategy.html":{},"injectables/MediaService.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["injectables",{"_index":174,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CategoriesService.html":{},"injectables/EntriesService.html":{},"injectables/JwtStrategy.html":{},"injectables/MediaService.html":{},"injectables/UsersService.html":{},"overview.html":{}}}],["injectrepository",{"_index":205,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CategoriesService.html":{},"injectables/EntriesService.html":{},"injectables/MediaService.html":{},"injectables/UsersService.html":{}}}],["injectrepository(categoryrepository",{"_index":364,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["injectrepository(entryrepository",{"_index":639,"title":{},"body":{"injectables/EntriesService.html":{}}}],["injectrepository(mediarepository",{"_index":801,"title":{},"body":{"injectables/MediaService.html":{}}}],["injectrepository(userrepository",{"_index":959,"title":{},"body":{"injectables/UsersService.html":{}}}],["injectrepository(verificationtokenentity",{"_index":210,"title":{},"body":{"injectables/AuthService.html":{}}}],["installation",{"_index":1067,"title":{},"body":{"index.html":{}}}],["installrunning",{"_index":1069,"title":{},"body":{"index.html":{}}}],["integration",{"_index":1091,"title":{},"body":{"index.html":{}}}],["interface",{"_index":707,"title":{"interfaces/JwtPayload.html":{}},"body":{"interfaces/JwtPayload.html":{},"coverage.html":{},"overview.html":{}}}],["interfaces",{"_index":708,"title":{},"body":{"interfaces/JwtPayload.html":{}}}],["interfaces/jwt",{"_index":198,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["internalservererrorexception",{"_index":508,"title":{},"body":{"classes/CategoryRepository.html":{},"classes/EntryRepository.html":{},"classes/MediaRepository.html":{},"classes/UserRepository.html":{}}}],["isdatestring",{"_index":563,"title":{},"body":{"classes/CreateEntryDto.html":{},"classes/UpdateEntryDto.html":{}}}],["isemail",{"_index":132,"title":{},"body":{"classes/AuthCredentialsDto.html":{}}}],["isin",{"_index":583,"title":{},"body":{"classes/CreateMediaDto.html":{},"classes/UpdateMediaDto.html":{}}}],["isin(object.values(mediatype",{"_index":589,"title":{},"body":{"classes/CreateMediaDto.html":{},"classes/UpdateMediaDto.html":{}}}],["isnotempty",{"_index":133,"title":{},"body":{"classes/AuthCredentialsDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateEntryDto.html":{},"classes/CreateMediaDto.html":{},"classes/GetCategoriesFilterDto.html":{},"classes/GetEntriesFilterDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateEntryDto.html":{},"classes/UpdateMediaDto.html":{}}}],["isnumber",{"_index":564,"title":{},"body":{"classes/CreateEntryDto.html":{},"classes/UpdateEntryDto.html":{}}}],["isoptional",{"_index":540,"title":{},"body":{"classes/CreateCategoryDto.html":{},"classes/CreateEntryDto.html":{},"classes/CreateMediaDto.html":{},"classes/GetCategoriesFilterDto.html":{},"classes/GetEntriesFilterDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateEntryDto.html":{},"classes/UpdateMediaDto.html":{},"classes/UpdateUserDto.html":{}}}],["isstring",{"_index":134,"title":{},"body":{"classes/AuthCredentialsDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateEntryDto.html":{},"classes/CreateMediaDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateEntryDto.html":{},"classes/UpdateMediaDto.html":{}}}],["isurl",{"_index":584,"title":{},"body":{"classes/CreateMediaDto.html":{},"classes/UpdateMediaDto.html":{}}}],["isuuid",{"_index":541,"title":{},"body":{"classes/CreateCategoryDto.html":{},"classes/CreateEntryDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateEntryDto.html":{},"classes/UpdateUserDto.html":{}}}],["joincolumn",{"_index":483,"title":{},"body":{"classes/Category.html":{},"classes/Entry.html":{},"classes/User.html":{},"classes/VerificationTokenEntity.html":{}}}],["js",{"_index":207,"title":{},"body":{"injectables/AuthService.html":{},"dependencies.html":{}}}],["json.stringify",{"_index":257,"title":{},"body":{"injectables/AuthService.html":{}}}],["json.stringify(createcategorydto",{"_index":332,"title":{},"body":{"controllers/CategoriesController.html":{},"classes/CategoryRepository.html":{}}}],["json.stringify(createentrydto",{"_index":618,"title":{},"body":{"controllers/EntriesController.html":{},"classes/EntryRepository.html":{}}}],["json.stringify(createmediadto",{"_index":777,"title":{},"body":{"controllers/MediaController.html":{}}}],["json.stringify(filterdto",{"_index":326,"title":{},"body":{"controllers/CategoriesController.html":{},"classes/CategoryRepository.html":{},"controllers/EntriesController.html":{},"classes/EntryRepository.html":{}}}],["json.stringify(payload",{"_index":227,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwt",{"_index":165,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["jwt.strategy",{"_index":155,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtconfig",{"_index":160,"title":{},"body":{"modules/AuthModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["jwtconfig.expiresin",{"_index":172,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtconfig.secret",{"_index":169,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtfromrequest",{"_index":722,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["jwtmodule",{"_index":151,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtmodule.register",{"_index":166,"title":{},"body":{"modules/AuthModule.html":{}}}],["jwtpayload",{"_index":197,"title":{"interfaces/JwtPayload.html":{}},"body":{"injectables/AuthService.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["jwtservice",{"_index":181,"title":{},"body":{"injectables/AuthService.html":{}}}],["jwtstrategy",{"_index":147,"title":{"injectables/JwtStrategy.html":{}},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{},"coverage.html":{},"overview.html":{}}}],["kind",{"_index":1146,"title":{},"body":{"license.html":{}}}],["lastlogindate",{"_index":844,"title":{},"body":{"classes/User.html":{}}}],["lastloginip",{"_index":845,"title":{},"body":{"classes/User.html":{}}}],["legend",{"_index":4,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoriesModule.html":{},"modules/EntriesModule.html":{},"modules/MediaModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["length",{"_index":236,"title":{},"body":{"injectables/AuthService.html":{},"classes/Category.html":{},"classes/Entry.html":{},"classes/Media.html":{},"classes/User.html":{},"classes/VerificationTokenEntity.html":{}}}],["liability",{"_index":1161,"title":{},"body":{"license.html":{}}}],["liable",{"_index":1158,"title":{},"body":{"license.html":{}}}],["license",{"_index":1104,"title":{"license.html":{}},"body":{"index.html":{},"license.html":{}}}],["licensed",{"_index":1094,"title":{},"body":{"index.html":{}}}],["like(`%${search",{"_index":513,"title":{},"body":{"classes/CategoryRepository.html":{},"classes/EntryRepository.html":{}}}],["limitation",{"_index":1124,"title":{},"body":{"license.html":{}}}],["limited",{"_index":1148,"title":{},"body":{"license.html":{}}}],["linked",{"_index":698,"title":{},"body":{"classes/EntryRepository.html":{}}}],["logger",{"_index":75,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"classes/CategoryRepository.html":{},"controllers/EntriesController.html":{},"injectables/EntriesService.html":{},"classes/EntryRepository.html":{},"controllers/MediaController.html":{},"injectables/UsersService.html":{}}}],["logger('authservice",{"_index":195,"title":{},"body":{"injectables/AuthService.html":{}}}],["logger('categoriescontroller",{"_index":321,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["logger('categoryrepository",{"_index":500,"title":{},"body":{"classes/CategoryRepository.html":{}}}],["logger('entriescontroller",{"_index":615,"title":{},"body":{"controllers/EntriesController.html":{}}}],["logger('entryrepository",{"_index":685,"title":{},"body":{"classes/EntryRepository.html":{}}}],["logger('mediacontroller",{"_index":773,"title":{},"body":{"controllers/MediaController.html":{}}}],["made",{"_index":1064,"title":{},"body":{"index.html":{}}}],["mailgun",{"_index":206,"title":{},"body":{"injectables/AuthService.html":{},"dependencies.html":{}}}],["mailgun.messages().send(data",{"_index":260,"title":{},"body":{"injectables/AuthService.html":{}}}],["manytoone",{"_index":484,"title":{},"body":{"classes/Category.html":{},"classes/Entry.html":{},"classes/Media.html":{}}}],["matches",{"_index":135,"title":{},"body":{"classes/AuthCredentialsDto.html":{}}}],["matches(/((?=.*\\d)|(?=.*\\w+))(?![.\\n])(?=.*[a",{"_index":144,"title":{},"body":{"classes/AuthCredentialsDto.html":{}}}],["matching",{"_index":40,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"classes/AuthCredentialsDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"classes/Category.html":{},"classes/CategoryRepository.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateEntryDto.html":{},"classes/CreateMediaDto.html":{},"controllers/EntriesController.html":{},"modules/EntriesModule.html":{},"injectables/EntriesService.html":{},"classes/Entry.html":{},"classes/EntryRepository.html":{},"classes/GetCategoriesFilterDto.html":{},"classes/GetEntriesFilterDto.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/Media.html":{},"controllers/MediaController.html":{},"modules/MediaModule.html":{},"classes/MediaRepository.html":{},"injectables/MediaService.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateEntryDto.html":{},"classes/UpdateMediaDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/VerificationTokenEntity.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["maxlength",{"_index":136,"title":{},"body":{"classes/AuthCredentialsDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateEntryDto.html":{},"classes/CreateMediaDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateEntryDto.html":{},"classes/UpdateMediaDto.html":{}}}],["maxlength(20",{"_index":143,"title":{},"body":{"classes/AuthCredentialsDto.html":{}}}],["maxlength(2048",{"_index":586,"title":{},"body":{"classes/CreateMediaDto.html":{},"classes/UpdateMediaDto.html":{}}}],["maxlength(25",{"_index":543,"title":{},"body":{"classes/CreateCategoryDto.html":{},"classes/CreateEntryDto.html":{},"classes/CreateMediaDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateEntryDto.html":{},"classes/UpdateMediaDto.html":{}}}],["maxlength(250",{"_index":545,"title":{},"body":{"classes/CreateCategoryDto.html":{},"classes/CreateEntryDto.html":{},"classes/CreateMediaDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateEntryDto.html":{},"classes/UpdateMediaDto.html":{}}}],["maxlength(320",{"_index":141,"title":{},"body":{"classes/AuthCredentialsDto.html":{}}}],["media",{"_index":374,"title":{"classes/Media.html":{}},"body":{"injectables/CategoriesService.html":{},"classes/Category.html":{},"classes/CreateMediaDto.html":{},"injectables/EntriesService.html":{},"classes/Entry.html":{},"classes/Media.html":{},"controllers/MediaController.html":{},"classes/MediaRepository.html":{},"injectables/MediaService.html":{},"classes/UpdateMediaDto.html":{},"classes/User.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["media.controller",{"_index":785,"title":{},"body":{"modules/MediaModule.html":{}}}],["media.dto",{"_index":769,"title":{},"body":{"controllers/MediaController.html":{},"injectables/MediaService.html":{}}}],["media.dto.ts",{"_index":572,"title":{},"body":{"classes/CreateMediaDto.html":{},"classes/UpdateMediaDto.html":{},"coverage.html":{}}}],["media.dto.ts:11",{"_index":576,"title":{},"body":{"classes/CreateMediaDto.html":{}}}],["media.dto.ts:13",{"_index":830,"title":{},"body":{"classes/UpdateMediaDto.html":{}}}],["media.dto.ts:18",{"_index":582,"title":{},"body":{"classes/CreateMediaDto.html":{}}}],["media.dto.ts:21",{"_index":833,"title":{},"body":{"classes/UpdateMediaDto.html":{}}}],["media.dto.ts:25",{"_index":575,"title":{},"body":{"classes/CreateMediaDto.html":{}}}],["media.dto.ts:29",{"_index":829,"title":{},"body":{"classes/UpdateMediaDto.html":{}}}],["media.dto.ts:30",{"_index":580,"title":{},"body":{"classes/CreateMediaDto.html":{}}}],["media.dto.ts:34",{"_index":831,"title":{},"body":{"classes/UpdateMediaDto.html":{}}}],["media.entity",{"_index":770,"title":{},"body":{"controllers/MediaController.html":{},"classes/MediaRepository.html":{},"injectables/MediaService.html":{}}}],["media.entry",{"_index":681,"title":{},"body":{"classes/Entry.html":{}}}],["media.repository",{"_index":787,"title":{},"body":{"modules/MediaModule.html":{},"injectables/MediaService.html":{}}}],["media.service",{"_index":768,"title":{},"body":{"controllers/MediaController.html":{},"modules/MediaModule.html":{}}}],["media.user",{"_index":492,"title":{},"body":{"classes/Category.html":{},"classes/User.html":{}}}],["media.userforpicture",{"_index":881,"title":{},"body":{"classes/User.html":{}}}],["media/media.entity",{"_index":489,"title":{},"body":{"classes/Category.html":{},"classes/Entry.html":{},"classes/User.html":{}}}],["media/media.module",{"_index":34,"title":{},"body":{"modules/AppModule.html":{},"modules/CategoriesModule.html":{},"modules/EntriesModule.html":{},"modules/UsersModule.html":{}}}],["media/media.service",{"_index":363,"title":{},"body":{"injectables/CategoriesService.html":{},"injectables/EntriesService.html":{},"injectables/UsersService.html":{}}}],["mediacontroller",{"_index":750,"title":{"controllers/MediaController.html":{}},"body":{"controllers/MediaController.html":{},"modules/MediaModule.html":{},"coverage.html":{}}}],["mediaid",{"_index":387,"title":{},"body":{"injectables/CategoriesService.html":{},"classes/CategoryRepository.html":{},"injectables/EntriesService.html":{},"classes/EntryRepository.html":{}}}],["mediamodule",{"_index":15,"title":{"modules/MediaModule.html":{}},"body":{"modules/AppModule.html":{},"modules/CategoriesModule.html":{},"modules/EntriesModule.html":{},"modules/MediaModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["mediarepository",{"_index":786,"title":{"classes/MediaRepository.html":{}},"body":{"modules/MediaModule.html":{},"classes/MediaRepository.html":{},"injectables/MediaService.html":{},"coverage.html":{}}}],["mediaservice",{"_index":350,"title":{"injectables/MediaService.html":{}},"body":{"injectables/CategoriesService.html":{},"injectables/EntriesService.html":{},"controllers/MediaController.html":{},"modules/MediaModule.html":{},"injectables/MediaService.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["mediatype",{"_index":577,"title":{},"body":{"classes/CreateMediaDto.html":{},"classes/Media.html":{},"classes/UpdateMediaDto.html":{},"miscellaneous/enumerations.html":{}}}],["mediatype.image",{"_index":745,"title":{},"body":{"classes/Media.html":{}}}],["merchantability",{"_index":1150,"title":{},"body":{"license.html":{}}}],["merge",{"_index":1128,"title":{},"body":{"license.html":{}}}],["message",{"_index":129,"title":{},"body":{"classes/AuthCredentialsDto.html":{}}}],["metadata",{"_index":1038,"title":{},"body":{"dependencies.html":{}}}],["methods",{"_index":49,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"classes/CategoryRepository.html":{},"controllers/EntriesController.html":{},"injectables/EntriesService.html":{},"classes/EntryRepository.html":{},"injectables/JwtStrategy.html":{},"controllers/MediaController.html":{},"classes/MediaRepository.html":{},"injectables/MediaService.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["minlength",{"_index":137,"title":{},"body":{"classes/AuthCredentialsDto.html":{}}}],["minlength(3",{"_index":140,"title":{},"body":{"classes/AuthCredentialsDto.html":{}}}],["minlength(8",{"_index":142,"title":{},"body":{"classes/AuthCredentialsDto.html":{}}}],["miscellaneous",{"_index":1049,"title":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}},"body":{"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"miscellaneous/variables.html":{}}}],["mit",{"_index":1093,"title":{},"body":{"index.html":{},"license.html":{}}}],["mode",{"_index":1075,"title":{},"body":{"index.html":{}}}],["modificationdate",{"_index":440,"title":{},"body":{"classes/Category.html":{},"classes/Entry.html":{},"classes/Media.html":{},"classes/User.html":{},"classes/VerificationTokenEntity.html":{}}}],["modifies",{"_index":392,"title":{},"body":{"injectables/CategoriesService.html":{},"injectables/EntriesService.html":{},"injectables/UsersService.html":{}}}],["modify",{"_index":1127,"title":{},"body":{"license.html":{}}}],["module",{"_index":0,"title":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoriesModule.html":{},"modules/EntriesModule.html":{},"modules/MediaModule.html":{},"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoriesModule.html":{},"modules/EntriesModule.html":{},"modules/MediaModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["modules",{"_index":2,"title":{"modules.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoriesModule.html":{},"modules/EntriesModule.html":{},"modules/MediaModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["name",{"_index":61,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"classes/CategoryRepository.html":{},"controllers/EntriesController.html":{},"injectables/EntriesService.html":{},"classes/EntryRepository.html":{},"injectables/JwtStrategy.html":{},"controllers/MediaController.html":{},"classes/MediaRepository.html":{},"injectables/MediaService.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/VerificationTokenEntity.html":{}}}],["need",{"_index":404,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["nest",{"_index":1065,"title":{},"body":{"index.html":{}}}],["nestjs",{"_index":1066,"title":{},"body":{"index.html":{}}}],["nestjs/common",{"_index":26,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"classes/CategoryRepository.html":{},"controllers/EntriesController.html":{},"modules/EntriesModule.html":{},"injectables/EntriesService.html":{},"classes/EntryRepository.html":{},"injectables/JwtStrategy.html":{},"controllers/MediaController.html":{},"modules/MediaModule.html":{},"classes/MediaRepository.html":{},"injectables/MediaService.html":{},"classes/UserRepository.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["nestjs/core",{"_index":1020,"title":{},"body":{"dependencies.html":{}}}],["nestjs/jwt",{"_index":152,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"dependencies.html":{}}}],["nestjs/passport",{"_index":154,"title":{},"body":{"modules/AuthModule.html":{},"controllers/CategoriesController.html":{},"controllers/EntriesController.html":{},"injectables/JwtStrategy.html":{},"controllers/MediaController.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["nestjs/platform",{"_index":1023,"title":{},"body":{"dependencies.html":{}}}],["nestjs/swagger",{"_index":85,"title":{},"body":{"controllers/AuthController.html":{},"classes/AuthCredentialsDto.html":{},"controllers/CategoriesController.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateEntryDto.html":{},"classes/CreateMediaDto.html":{},"controllers/EntriesController.html":{},"classes/GetCategoriesFilterDto.html":{},"classes/GetEntriesFilterDto.html":{},"controllers/MediaController.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateEntryDto.html":{},"classes/UpdateMediaDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{},"dependencies.html":{}}}],["nestjs/typeorm",{"_index":28,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"modules/EntriesModule.html":{},"injectables/EntriesService.html":{},"modules/MediaModule.html":{},"injectables/MediaService.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"dependencies.html":{}}}],["new",{"_index":90,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"classes/CategoryRepository.html":{},"controllers/EntriesController.html":{},"injectables/EntriesService.html":{},"classes/EntryRepository.html":{},"injectables/JwtStrategy.html":{},"controllers/MediaController.html":{},"classes/MediaRepository.html":{},"injectables/MediaService.html":{},"classes/UserRepository.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["newmedia",{"_index":804,"title":{},"body":{"injectables/MediaService.html":{}}}],["newmedia.save",{"_index":805,"title":{},"body":{"injectables/MediaService.html":{}}}],["noninfringement",{"_index":1154,"title":{},"body":{"license.html":{}}}],["notequals",{"_index":565,"title":{},"body":{"classes/CreateEntryDto.html":{},"classes/UpdateEntryDto.html":{}}}],["notequals(0",{"_index":568,"title":{},"body":{"classes/CreateEntryDto.html":{},"classes/UpdateEntryDto.html":{}}}],["notfoundexception",{"_index":196,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CategoriesService.html":{},"classes/CategoryRepository.html":{},"injectables/EntriesService.html":{},"classes/MediaRepository.html":{},"injectables/MediaService.html":{}}}],["notfoundexception(`category",{"_index":367,"title":{},"body":{"injectables/CategoriesService.html":{},"classes/CategoryRepository.html":{}}}],["notfoundexception(`entry",{"_index":642,"title":{},"body":{"injectables/EntriesService.html":{}}}],["notfoundexception(`media",{"_index":792,"title":{},"body":{"classes/MediaRepository.html":{},"injectables/MediaService.html":{}}}],["notfoundexception(`token",{"_index":231,"title":{},"body":{"injectables/AuthService.html":{}}}],["notice",{"_index":1140,"title":{},"body":{"license.html":{}}}],["npm",{"_index":1068,"title":{},"body":{"index.html":{}}}],["npx",{"_index":1084,"title":{},"body":{"index.html":{}}}],["null",{"_index":412,"title":{},"body":{"injectables/CategoriesService.html":{},"classes/Category.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateEntryDto.html":{},"injectables/EntriesService.html":{},"classes/Media.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateEntryDto.html":{},"classes/UpdateMediaDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"injectables/UsersService.html":{}}}],["nullable",{"_index":451,"title":{},"body":{"classes/Category.html":{},"classes/Entry.html":{},"classes/Media.html":{},"classes/User.html":{},"classes/VerificationTokenEntity.html":{}}}],["number",{"_index":478,"title":{},"body":{"classes/Category.html":{},"classes/CreateEntryDto.html":{},"classes/Entry.html":{},"classes/Media.html":{},"classes/UpdateEntryDto.html":{},"classes/User.html":{},"classes/VerificationTokenEntity.html":{}}}],["object",{"_index":393,"title":{},"body":{"injectables/CategoriesService.html":{},"injectables/EntriesService.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["object.assign(category",{"_index":520,"title":{},"body":{"classes/CategoryRepository.html":{}}}],["object.assign(entry",{"_index":700,"title":{},"body":{"classes/EntryRepository.html":{}}}],["object.assign(media",{"_index":809,"title":{},"body":{"injectables/MediaService.html":{}}}],["object.assign(new",{"_index":516,"title":{},"body":{"classes/CategoryRepository.html":{},"classes/EntryRepository.html":{},"injectables/MediaService.html":{}}}],["object.assign(this.create",{"_index":907,"title":{},"body":{"classes/UserRepository.html":{}}}],["object.assign(this.verificationtokenrepository.create",{"_index":238,"title":{},"body":{"injectables/AuthService.html":{}}}],["object.assign(user",{"_index":915,"title":{},"body":{"classes/UserRepository.html":{}}}],["object.entries(updatecategorydto).length",{"_index":396,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["object.entries(updateentrydto).length",{"_index":652,"title":{},"body":{"injectables/EntriesService.html":{}}}],["object.entries(updatemediadto).length",{"_index":807,"title":{},"body":{"injectables/MediaService.html":{}}}],["object.entries(updateuserdto).length",{"_index":963,"title":{},"body":{"injectables/UsersService.html":{}}}],["obtaining",{"_index":1115,"title":{},"body":{"license.html":{}}}],["occur",{"_index":213,"title":{},"body":{"injectables/AuthService.html":{}}}],["occured",{"_index":117,"title":{},"body":{"controllers/AuthController.html":{}}}],["ondelete",{"_index":472,"title":{},"body":{"classes/Category.html":{},"classes/Entry.html":{},"classes/Media.html":{},"classes/VerificationTokenEntity.html":{}}}],["one",{"_index":379,"title":{},"body":{"injectables/CategoriesService.html":{},"injectables/EntriesService.html":{},"injectables/UsersService.html":{}}}],["onetomany",{"_index":485,"title":{},"body":{"classes/Category.html":{},"classes/User.html":{}}}],["onetomany(undefined",{"_index":444,"title":{},"body":{"classes/Category.html":{}}}],["onetoone",{"_index":486,"title":{},"body":{"classes/Category.html":{},"classes/Entry.html":{},"classes/Media.html":{},"classes/User.html":{},"classes/VerificationTokenEntity.html":{}}}],["onetoone(undefined",{"_index":979,"title":{},"body":{"classes/VerificationTokenEntity.html":{}}}],["open",{"_index":1095,"title":{},"body":{"index.html":{}}}],["optional",{"_index":63,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"classes/CategoryRepository.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateEntryDto.html":{},"classes/CreateMediaDto.html":{},"controllers/EntriesController.html":{},"injectables/EntriesService.html":{},"classes/EntryRepository.html":{},"classes/GetCategoriesFilterDto.html":{},"classes/GetEntriesFilterDto.html":{},"injectables/JwtStrategy.html":{},"controllers/MediaController.html":{},"classes/MediaRepository.html":{},"injectables/MediaService.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateEntryDto.html":{},"classes/UpdateMediaDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["otherwise",{"_index":1166,"title":{},"body":{"license.html":{}}}],["out",{"_index":19,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoriesModule.html":{},"modules/EntriesModule.html":{},"modules/MediaModule.html":{},"modules/UsersModule.html":{},"license.html":{},"overview.html":{}}}],["overview",{"_index":1173,"title":{"overview.html":{}},"body":{"overview.html":{}}}],["owned",{"_index":407,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["p",{"_index":1086,"title":{},"body":{"index.html":{}}}],["package",{"_index":1018,"title":{"dependencies.html":{}},"body":{}}],["param",{"_index":76,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CategoriesController.html":{},"controllers/EntriesController.html":{},"controllers/MediaController.html":{}}}],["param('id",{"_index":328,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/EntriesController.html":{},"controllers/MediaController.html":{}}}],["param('token",{"_index":104,"title":{},"body":{"controllers/AuthController.html":{}}}],["parameters",{"_index":60,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"classes/CategoryRepository.html":{},"controllers/EntriesController.html":{},"injectables/EntriesService.html":{},"classes/EntryRepository.html":{},"injectables/JwtStrategy.html":{},"controllers/MediaController.html":{},"classes/MediaRepository.html":{},"injectables/MediaService.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["parent",{"_index":427,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["parent.parentcategoryid",{"_index":431,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["parentcategory",{"_index":372,"title":{},"body":{"injectables/CategoriesService.html":{},"classes/Category.html":{}}}],["parentcategoryid",{"_index":353,"title":{},"body":{"injectables/CategoriesService.html":{},"classes/Category.html":{},"classes/CategoryRepository.html":{},"classes/CreateCategoryDto.html":{},"classes/UpdateCategoryDto.html":{}}}],["parsefloat(amount",{"_index":567,"title":{},"body":{"classes/CreateEntryDto.html":{},"classes/Entry.html":{},"classes/UpdateEntryDto.html":{}}}],["parseuuidpipe",{"_index":296,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/EntriesController.html":{},"controllers/MediaController.html":{}}}],["particular",{"_index":1152,"title":{},"body":{"license.html":{}}}],["passport",{"_index":719,"title":{},"body":{"injectables/JwtStrategy.html":{},"dependencies.html":{}}}],["passportmodule",{"_index":153,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportmodule.register",{"_index":163,"title":{},"body":{"modules/AuthModule.html":{}}}],["passportstrategy",{"_index":716,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["passportstrategy(strategy",{"_index":720,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["password",{"_index":123,"title":{},"body":{"classes/AuthCredentialsDto.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"miscellaneous/variables.html":{}}}],["patch",{"_index":297,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/EntriesController.html":{},"controllers/MediaController.html":{},"controllers/UsersController.html":{}}}],["patch('/:id",{"_index":334,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/EntriesController.html":{},"controllers/MediaController.html":{}}}],["patch('/:id')@usepipes(new",{"_index":292,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/EntriesController.html":{},"controllers/MediaController.html":{}}}],["patch('/current",{"_index":934,"title":{},"body":{"controllers/UsersController.html":{}}}],["patch('/current')@usepipes(new",{"_index":928,"title":{},"body":{"controllers/UsersController.html":{}}}],["payload",{"_index":223,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["payload.interface",{"_index":199,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["payload.interface.ts",{"_index":710,"title":{},"body":{"interfaces/JwtPayload.html":{},"coverage.html":{}}}],["permission",{"_index":1109,"title":{},"body":{"license.html":{}}}],["permit",{"_index":1134,"title":{},"body":{"license.html":{}}}],["person",{"_index":1114,"title":{},"body":{"license.html":{}}}],["persons",{"_index":1135,"title":{},"body":{"license.html":{}}}],["pg",{"_index":1035,"title":{},"body":{"dependencies.html":{}}}],["pg_foreign_key_constraint_violation",{"_index":509,"title":{},"body":{"classes/CategoryRepository.html":{},"classes/EntryRepository.html":{},"classes/MediaRepository.html":{},"classes/UserRepository.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["pg_unique_constraint_violation",{"_index":691,"title":{},"body":{"classes/EntryRepository.html":{},"classes/UserRepository.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["picture",{"_index":846,"title":{},"body":{"classes/User.html":{}}}],["pictureid",{"_index":838,"title":{},"body":{"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"injectables/UsersService.html":{}}}],["please",{"_index":249,"title":{},"body":{"injectables/AuthService.html":{}}}],["port",{"_index":1201,"title":{},"body":{"miscellaneous/variables.html":{}}}],["portions",{"_index":1144,"title":{},"body":{"license.html":{}}}],["post",{"_index":77,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CategoriesController.html":{},"controllers/EntriesController.html":{},"controllers/MediaController.html":{}}}],["post('/signin",{"_index":57,"title":{},"body":{"controllers/AuthController.html":{}}}],["post('/signup",{"_index":67,"title":{},"body":{"controllers/AuthController.html":{}}}],["post()@usepipes(new",{"_index":278,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/EntriesController.html":{},"controllers/MediaController.html":{}}}],["prefix",{"_index":46,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CategoriesController.html":{},"controllers/EntriesController.html":{},"controllers/MediaController.html":{},"controllers/UsersController.html":{}}}],["previousimageid",{"_index":394,"title":{},"body":{"injectables/CategoriesService.html":{},"injectables/EntriesService.html":{},"injectables/UsersService.html":{}}}],["primary",{"_index":981,"title":{},"body":{"classes/VerificationTokenEntity.html":{}}}],["primarycolumn",{"_index":984,"title":{},"body":{"classes/VerificationTokenEntity.html":{}}}],["primarygeneratedcolumn",{"_index":487,"title":{},"body":{"classes/Category.html":{},"classes/Entry.html":{},"classes/Media.html":{},"classes/User.html":{}}}],["primarygeneratedcolumn('uuid",{"_index":456,"title":{},"body":{"classes/Category.html":{},"classes/Entry.html":{},"classes/Media.html":{},"classes/User.html":{}}}],["private",{"_index":88,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"classes/CategoryRepository.html":{},"controllers/EntriesController.html":{},"injectables/EntriesService.html":{},"classes/EntryRepository.html":{},"injectables/JwtStrategy.html":{},"controllers/MediaController.html":{},"injectables/MediaService.html":{},"classes/UserRepository.html":{},"injectables/UsersService.html":{}}}],["process.env.email_api_key",{"_index":1188,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.email_domain",{"_index":1190,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.email_from",{"_index":1192,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.email_hostname",{"_index":1194,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.email_verification_enabled",{"_index":1186,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.jwt_secret",{"_index":168,"title":{},"body":{"modules/AuthModule.html":{},"injectables/JwtStrategy.html":{}}}],["process.env.rds_db_name",{"_index":1210,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.rds_hostname",{"_index":1199,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.rds_password",{"_index":1207,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.rds_port",{"_index":1202,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.rds_username",{"_index":1205,"title":{},"body":{"miscellaneous/variables.html":{}}}],["process.env.typeorm_sync",{"_index":1216,"title":{},"body":{"miscellaneous/variables.html":{}}}],["production",{"_index":1077,"title":{},"body":{"index.html":{}}}],["project",{"_index":1096,"title":{},"body":{"index.html":{}}}],["promise",{"_index":65,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"classes/CategoryRepository.html":{},"controllers/EntriesController.html":{},"injectables/EntriesService.html":{},"classes/EntryRepository.html":{},"injectables/JwtStrategy.html":{},"controllers/MediaController.html":{},"classes/MediaRepository.html":{},"injectables/MediaService.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["properties",{"_index":122,"title":{},"body":{"classes/AuthCredentialsDto.html":{},"injectables/AuthService.html":{},"injectables/CategoriesService.html":{},"classes/Category.html":{},"classes/CategoryRepository.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateEntryDto.html":{},"classes/CreateMediaDto.html":{},"injectables/EntriesService.html":{},"classes/Entry.html":{},"classes/EntryRepository.html":{},"classes/GetCategoriesFilterDto.html":{},"classes/GetEntriesFilterDto.html":{},"interfaces/JwtPayload.html":{},"classes/Media.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateEntryDto.html":{},"classes/UpdateMediaDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"injectables/UsersService.html":{},"classes/VerificationTokenEntity.html":{}}}],["provided",{"_index":375,"title":{},"body":{"injectables/CategoriesService.html":{},"classes/CategoryRepository.html":{},"injectables/EntriesService.html":{},"classes/EntryRepository.html":{},"classes/UserRepository.html":{},"injectables/UsersService.html":{},"license.html":{}}}],["providers",{"_index":7,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoriesModule.html":{},"modules/EntriesModule.html":{},"modules/MediaModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["publish",{"_index":1129,"title":{},"body":{"license.html":{}}}],["purpose",{"_index":1153,"title":{},"body":{"license.html":{}}}],["query",{"_index":298,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/EntriesController.html":{}}}],["query(new",{"_index":322,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/EntriesController.html":{}}}],["random",{"_index":203,"title":{},"body":{"injectables/AuthService.html":{},"dependencies.html":{}}}],["readonly",{"_index":89,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"controllers/EntriesController.html":{},"injectables/EntriesService.html":{},"injectables/JwtStrategy.html":{},"controllers/MediaController.html":{},"injectables/MediaService.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["reference",{"_index":424,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["referenced",{"_index":528,"title":{},"body":{"classes/CategoryRepository.html":{},"classes/MediaRepository.html":{}}}],["reflect",{"_index":1037,"title":{},"body":{"dependencies.html":{}}}],["relations",{"_index":461,"title":{},"body":{"classes/Category.html":{},"classes/Entry.html":{},"classes/Media.html":{},"classes/User.html":{}}}],["replace",{"_index":378,"title":{},"body":{"injectables/CategoriesService.html":{},"injectables/EntriesService.html":{},"injectables/UsersService.html":{}}}],["repository",{"_index":179,"title":{},"body":{"injectables/AuthService.html":{},"classes/CategoryRepository.html":{},"classes/EntryRepository.html":{},"classes/MediaRepository.html":{},"classes/UserRepository.html":{}}}],["req",{"_index":1219,"title":{},"body":{"miscellaneous/variables.html":{}}}],["req.user",{"_index":1220,"title":{},"body":{"miscellaneous/variables.html":{}}}],["res",{"_index":524,"title":{},"body":{"classes/CategoryRepository.html":{},"injectables/EntriesService.html":{},"classes/MediaRepository.html":{}}}],["res.affected",{"_index":529,"title":{},"body":{"classes/CategoryRepository.html":{},"injectables/EntriesService.html":{},"classes/MediaRepository.html":{}}}],["reset",{"_index":18,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoriesModule.html":{},"modules/EntriesModule.html":{},"modules/MediaModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}],["restriction",{"_index":1122,"title":{},"body":{"license.html":{}}}],["result",{"_index":39,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"classes/AuthCredentialsDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"classes/Category.html":{},"classes/CategoryRepository.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateEntryDto.html":{},"classes/CreateMediaDto.html":{},"controllers/EntriesController.html":{},"modules/EntriesModule.html":{},"injectables/EntriesService.html":{},"classes/Entry.html":{},"classes/EntryRepository.html":{},"classes/GetCategoriesFilterDto.html":{},"classes/GetEntriesFilterDto.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/Media.html":{},"controllers/MediaController.html":{},"modules/MediaModule.html":{},"classes/MediaRepository.html":{},"injectables/MediaService.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateEntryDto.html":{},"classes/UpdateMediaDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/VerificationTokenEntity.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["results",{"_index":41,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"classes/AuthCredentialsDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"classes/Category.html":{},"classes/CategoryRepository.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateEntryDto.html":{},"classes/CreateMediaDto.html":{},"controllers/EntriesController.html":{},"modules/EntriesModule.html":{},"injectables/EntriesService.html":{},"classes/Entry.html":{},"classes/EntryRepository.html":{},"classes/GetCategoriesFilterDto.html":{},"classes/GetEntriesFilterDto.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/Media.html":{},"controllers/MediaController.html":{},"modules/MediaModule.html":{},"classes/MediaRepository.html":{},"injectables/MediaService.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateEntryDto.html":{},"classes/UpdateMediaDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/VerificationTokenEntity.html":{},"coverage.html":{},"dependencies.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/functions.html":{},"index.html":{},"license.html":{},"modules.html":{},"overview.html":{},"miscellaneous/variables.html":{}}}],["retrieve",{"_index":430,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["retrieving",{"_index":324,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/EntriesController.html":{},"controllers/MediaController.html":{}}}],["return",{"_index":96,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"classes/CategoryRepository.html":{},"controllers/EntriesController.html":{},"injectables/EntriesService.html":{},"classes/EntryRepository.html":{},"injectables/JwtStrategy.html":{},"controllers/MediaController.html":{},"injectables/MediaService.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"miscellaneous/variables.html":{}}}],["returns",{"_index":64,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"classes/CategoryRepository.html":{},"controllers/EntriesController.html":{},"injectables/EntriesService.html":{},"classes/EntryRepository.html":{},"injectables/JwtStrategy.html":{},"controllers/MediaController.html":{},"classes/MediaRepository.html":{},"injectables/MediaService.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["rights",{"_index":1125,"title":{},"body":{"license.html":{}}}],["rimraf",{"_index":1040,"title":{},"body":{"dependencies.html":{}}}],["run",{"_index":1072,"title":{},"body":{"index.html":{}}}],["rxjs",{"_index":1042,"title":{},"body":{"dependencies.html":{}}}],["salt",{"_index":892,"title":{},"body":{"classes/UserRepository.html":{}}}],["savetokenandsendemailverification",{"_index":176,"title":{},"body":{"injectables/AuthService.html":{}}}],["savetokenandsendemailverification(authcredentialsdto",{"_index":184,"title":{},"body":{"injectables/AuthService.html":{}}}],["search",{"_index":512,"title":{},"body":{"classes/CategoryRepository.html":{},"classes/EntryRepository.html":{},"classes/GetCategoriesFilterDto.html":{},"classes/GetEntriesFilterDto.html":{}}}],["secret",{"_index":167,"title":{},"body":{"modules/AuthModule.html":{}}}],["secretorkey",{"_index":724,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["sell",{"_index":1132,"title":{},"body":{"license.html":{}}}],["send",{"_index":267,"title":{},"body":{"injectables/AuthService.html":{}}}],["sending",{"_index":214,"title":{},"body":{"injectables/AuthService.html":{}}}],["sent",{"_index":262,"title":{},"body":{"injectables/AuthService.html":{}}}],["service",{"_index":497,"title":{},"body":{"classes/Category.html":{}}}],["service.parentcategory",{"_index":498,"title":{},"body":{"classes/Category.html":{}}}],["set",{"_index":426,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["shall",{"_index":1141,"title":{},"body":{"license.html":{}}}],["shargea",{"_index":251,"title":{},"body":{"injectables/AuthService.html":{},"index.html":{}}}],["signin",{"_index":50,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["signin(authcredentialsdto",{"_index":54,"title":{},"body":{"controllers/AuthController.html":{}}}],["signin(authcrendentialsdto",{"_index":188,"title":{},"body":{"injectables/AuthService.html":{}}}],["signoptions",{"_index":170,"title":{},"body":{"modules/AuthModule.html":{}}}],["signup",{"_index":51,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/UserRepository.html":{},"injectables/UsersService.html":{}}}],["signup(@body(new",{"_index":92,"title":{},"body":{"controllers/AuthController.html":{}}}],["signup(authcredentialsdto",{"_index":66,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/UserRepository.html":{},"injectables/UsersService.html":{}}}],["software",{"_index":1117,"title":{},"body":{"license.html":{}}}],["source",{"_index":21,"title":{},"body":{"modules/AppModule.html":{},"controllers/AuthController.html":{},"classes/AuthCredentialsDto.html":{},"modules/AuthModule.html":{},"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"modules/CategoriesModule.html":{},"injectables/CategoriesService.html":{},"classes/Category.html":{},"classes/CategoryRepository.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateEntryDto.html":{},"classes/CreateMediaDto.html":{},"controllers/EntriesController.html":{},"modules/EntriesModule.html":{},"injectables/EntriesService.html":{},"classes/Entry.html":{},"classes/EntryRepository.html":{},"classes/GetCategoriesFilterDto.html":{},"classes/GetEntriesFilterDto.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/Media.html":{},"controllers/MediaController.html":{},"modules/MediaModule.html":{},"classes/MediaRepository.html":{},"injectables/MediaService.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateEntryDto.html":{},"classes/UpdateMediaDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"classes/VerificationTokenEntity.html":{},"index.html":{}}}],["spostman",{"_index":1088,"title":{},"body":{"index.html":{}}}],["src/.../auth.module.ts",{"_index":1179,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../category.repository.ts",{"_index":1182,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../currency.enum.ts",{"_index":1051,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../entry.repository.ts",{"_index":1181,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../get",{"_index":1178,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../mailgun.config.ts",{"_index":1176,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../main.ts",{"_index":1059,"title":{},"body":{"miscellaneous/functions.html":{}}}],["src/.../media",{"_index":1052,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/.../media.repository.ts",{"_index":1183,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../typeorm.config.ts",{"_index":1177,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/.../user.repository.ts",{"_index":1180,"title":{},"body":{"miscellaneous/variables.html":{}}}],["src/app.module.ts",{"_index":23,"title":{},"body":{"modules/AppModule.html":{}}}],["src/auth/auth.controller.ts",{"_index":45,"title":{},"body":{"controllers/AuthController.html":{},"coverage.html":{}}}],["src/auth/auth.controller.ts:16",{"_index":68,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:21",{"_index":59,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.controller.ts:34",{"_index":72,"title":{},"body":{"controllers/AuthController.html":{}}}],["src/auth/auth.module.ts",{"_index":148,"title":{},"body":{"modules/AuthModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/auth/auth.service.ts",{"_index":175,"title":{},"body":{"injectables/AuthService.html":{},"coverage.html":{}}}],["src/auth/auth.service.ts:16",{"_index":182,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:26",{"_index":191,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:34",{"_index":189,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:47",{"_index":192,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/auth.service.ts:57",{"_index":187,"title":{},"body":{"injectables/AuthService.html":{}}}],["src/auth/dto/auth",{"_index":120,"title":{},"body":{"classes/AuthCredentialsDto.html":{},"coverage.html":{}}}],["src/auth/interfaces/jwt",{"_index":709,"title":{},"body":{"interfaces/JwtPayload.html":{},"coverage.html":{}}}],["src/auth/jwt.strategy.ts",{"_index":711,"title":{},"body":{"injectables/JwtStrategy.html":{},"coverage.html":{}}}],["src/auth/jwt.strategy.ts:10",{"_index":713,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/jwt.strategy.ts:20",{"_index":715,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["src/auth/verification.token.entity.ts",{"_index":975,"title":{},"body":{"classes/VerificationTokenEntity.html":{},"coverage.html":{}}}],["src/auth/verification.token.entity.ts:10",{"_index":983,"title":{},"body":{"classes/VerificationTokenEntity.html":{}}}],["src/auth/verification.token.entity.ts:13",{"_index":985,"title":{},"body":{"classes/VerificationTokenEntity.html":{}}}],["src/auth/verification.token.entity.ts:16",{"_index":978,"title":{},"body":{"classes/VerificationTokenEntity.html":{}}}],["src/auth/verification.token.entity.ts:19",{"_index":976,"title":{},"body":{"classes/VerificationTokenEntity.html":{}}}],["src/auth/verification.token.entity.ts:22",{"_index":977,"title":{},"body":{"classes/VerificationTokenEntity.html":{}}}],["src/auth/verification.token.entity.ts:25",{"_index":986,"title":{},"body":{"classes/VerificationTokenEntity.html":{}}}],["src/categories/categories.controller.ts",{"_index":269,"title":{},"body":{"controllers/CategoriesController.html":{},"coverage.html":{}}}],["src/categories/categories.controller.ts:41",{"_index":285,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["src/categories/categories.controller.ts:50",{"_index":289,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["src/categories/categories.controller.ts:59",{"_index":279,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["src/categories/categories.controller.ts:69",{"_index":293,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["src/categories/categories.controller.ts:78",{"_index":282,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["src/categories/categories.module.ts",{"_index":341,"title":{},"body":{"modules/CategoriesModule.html":{}}}],["src/categories/categories.service.ts",{"_index":346,"title":{},"body":{"injectables/CategoriesService.html":{},"coverage.html":{}}}],["src/categories/categories.service.ts:105",{"_index":356,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["src/categories/categories.service.ts:109",{"_index":354,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["src/categories/categories.service.ts:14",{"_index":351,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["src/categories/categories.service.ts:23",{"_index":359,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["src/categories/categories.service.ts:27",{"_index":360,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["src/categories/categories.service.ts:36",{"_index":357,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["src/categories/categories.service.ts:53",{"_index":361,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["src/categories/categories.service.ts:93",{"_index":358,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["src/categories/category.entity.ts",{"_index":432,"title":{},"body":{"classes/Category.html":{},"coverage.html":{}}}],["src/categories/category.entity.ts:24",{"_index":457,"title":{},"body":{"classes/Category.html":{}}}],["src/categories/category.entity.ts:27",{"_index":471,"title":{},"body":{"classes/Category.html":{}}}],["src/categories/category.entity.ts:30",{"_index":452,"title":{},"body":{"classes/Category.html":{}}}],["src/categories/category.entity.ts:33",{"_index":463,"title":{},"body":{"classes/Category.html":{}}}],["src/categories/category.entity.ts:36",{"_index":468,"title":{},"body":{"classes/Category.html":{}}}],["src/categories/category.entity.ts:40",{"_index":477,"title":{},"body":{"classes/Category.html":{}}}],["src/categories/category.entity.ts:43",{"_index":448,"title":{},"body":{"classes/Category.html":{}}}],["src/categories/category.entity.ts:46",{"_index":465,"title":{},"body":{"classes/Category.html":{}}}],["src/categories/category.entity.ts:49",{"_index":480,"title":{},"body":{"classes/Category.html":{}}}],["src/categories/category.entity.ts:58",{"_index":460,"title":{},"body":{"classes/Category.html":{}}}],["src/categories/category.entity.ts:62",{"_index":475,"title":{},"body":{"classes/Category.html":{}}}],["src/categories/category.entity.ts:66",{"_index":455,"title":{},"body":{"classes/Category.html":{}}}],["src/categories/category.entity.ts:70",{"_index":474,"title":{},"body":{"classes/Category.html":{}}}],["src/categories/category.entity.ts:74",{"_index":467,"title":{},"body":{"classes/Category.html":{}}}],["src/categories/category.entity.ts:77",{"_index":446,"title":{},"body":{"classes/Category.html":{}}}],["src/categories/category.repository.ts",{"_index":499,"title":{},"body":{"classes/CategoryRepository.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/categories/category.repository.ts:14",{"_index":501,"title":{},"body":{"classes/CategoryRepository.html":{}}}],["src/categories/category.repository.ts:16",{"_index":504,"title":{},"body":{"classes/CategoryRepository.html":{}}}],["src/categories/category.repository.ts:36",{"_index":502,"title":{},"body":{"classes/CategoryRepository.html":{}}}],["src/categories/category.repository.ts:49",{"_index":506,"title":{},"body":{"classes/CategoryRepository.html":{}}}],["src/categories/category.repository.ts:61",{"_index":503,"title":{},"body":{"classes/CategoryRepository.html":{}}}],["src/categories/dto/create",{"_index":530,"title":{},"body":{"classes/CreateCategoryDto.html":{},"coverage.html":{}}}],["src/categories/dto/get",{"_index":702,"title":{},"body":{"classes/GetCategoriesFilterDto.html":{},"coverage.html":{}}}],["src/categories/dto/update",{"_index":812,"title":{},"body":{"classes/UpdateCategoryDto.html":{},"coverage.html":{}}}],["src/config/mailgun.config.ts",{"_index":1002,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/config/typeorm.config.ts",{"_index":1004,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/entries/dto/create",{"_index":550,"title":{},"body":{"classes/CreateEntryDto.html":{},"coverage.html":{}}}],["src/entries/dto/get",{"_index":706,"title":{},"body":{"classes/GetEntriesFilterDto.html":{},"coverage.html":{}}}],["src/entries/dto/update",{"_index":819,"title":{},"body":{"classes/UpdateEntryDto.html":{},"coverage.html":{}}}],["src/entries/entries.controller.ts",{"_index":591,"title":{},"body":{"controllers/EntriesController.html":{},"coverage.html":{}}}],["src/entries/entries.controller.ts:41",{"_index":603,"title":{},"body":{"controllers/EntriesController.html":{}}}],["src/entries/entries.controller.ts:50",{"_index":605,"title":{},"body":{"controllers/EntriesController.html":{}}}],["src/entries/entries.controller.ts:59",{"_index":598,"title":{},"body":{"controllers/EntriesController.html":{}}}],["src/entries/entries.controller.ts:69",{"_index":608,"title":{},"body":{"controllers/EntriesController.html":{}}}],["src/entries/entries.controller.ts:78",{"_index":600,"title":{},"body":{"controllers/EntriesController.html":{}}}],["src/entries/entries.module.ts",{"_index":625,"title":{},"body":{"modules/EntriesModule.html":{}}}],["src/entries/entries.service.ts",{"_index":630,"title":{},"body":{"injectables/EntriesService.html":{},"coverage.html":{}}}],["src/entries/entries.service.ts:15",{"_index":632,"title":{},"body":{"injectables/EntriesService.html":{}}}],["src/entries/entries.service.ts:25",{"_index":635,"title":{},"body":{"injectables/EntriesService.html":{}}}],["src/entries/entries.service.ts:29",{"_index":636,"title":{},"body":{"injectables/EntriesService.html":{}}}],["src/entries/entries.service.ts:38",{"_index":633,"title":{},"body":{"injectables/EntriesService.html":{}}}],["src/entries/entries.service.ts:55",{"_index":637,"title":{},"body":{"injectables/EntriesService.html":{}}}],["src/entries/entries.service.ts:94",{"_index":634,"title":{},"body":{"injectables/EntriesService.html":{}}}],["src/entries/entry.entity.ts",{"_index":663,"title":{},"body":{"classes/Entry.html":{},"coverage.html":{}}}],["src/entries/entry.entity.ts:23",{"_index":671,"title":{},"body":{"classes/Entry.html":{}}}],["src/entries/entry.entity.ts:26",{"_index":675,"title":{},"body":{"classes/Entry.html":{}}}],["src/entries/entry.entity.ts:29",{"_index":670,"title":{},"body":{"classes/Entry.html":{}}}],["src/entries/entry.entity.ts:33",{"_index":665,"title":{},"body":{"classes/Entry.html":{}}}],["src/entries/entry.entity.ts:36",{"_index":667,"title":{},"body":{"classes/Entry.html":{}}}],["src/entries/entry.entity.ts:39",{"_index":669,"title":{},"body":{"classes/Entry.html":{}}}],["src/entries/entry.entity.ts:42",{"_index":673,"title":{},"body":{"classes/Entry.html":{}}}],["src/entries/entry.entity.ts:46",{"_index":677,"title":{},"body":{"classes/Entry.html":{}}}],["src/entries/entry.entity.ts:49",{"_index":668,"title":{},"body":{"classes/Entry.html":{}}}],["src/entries/entry.entity.ts:52",{"_index":674,"title":{},"body":{"classes/Entry.html":{}}}],["src/entries/entry.entity.ts:55",{"_index":678,"title":{},"body":{"classes/Entry.html":{}}}],["src/entries/entry.entity.ts:64",{"_index":672,"title":{},"body":{"classes/Entry.html":{}}}],["src/entries/entry.entity.ts:68",{"_index":666,"title":{},"body":{"classes/Entry.html":{}}}],["src/entries/entry.entity.ts:72",{"_index":676,"title":{},"body":{"classes/Entry.html":{}}}],["src/entries/entry.repository.ts",{"_index":684,"title":{},"body":{"classes/EntryRepository.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/entries/entry.repository.ts:14",{"_index":686,"title":{},"body":{"classes/EntryRepository.html":{}}}],["src/entries/entry.repository.ts:16",{"_index":688,"title":{},"body":{"classes/EntryRepository.html":{}}}],["src/entries/entry.repository.ts:36",{"_index":687,"title":{},"body":{"classes/EntryRepository.html":{}}}],["src/entries/entry.repository.ts:51",{"_index":690,"title":{},"body":{"classes/EntryRepository.html":{}}}],["src/main.ts",{"_index":1008,"title":{},"body":{"coverage.html":{},"miscellaneous/functions.html":{}}}],["src/media/dto/create",{"_index":571,"title":{},"body":{"classes/CreateMediaDto.html":{},"coverage.html":{}}}],["src/media/dto/update",{"_index":827,"title":{},"body":{"classes/UpdateMediaDto.html":{},"coverage.html":{}}}],["src/media/media",{"_index":1057,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/media/media.controller.ts",{"_index":751,"title":{},"body":{"controllers/MediaController.html":{},"coverage.html":{}}}],["src/media/media.controller.ts:39",{"_index":762,"title":{},"body":{"controllers/MediaController.html":{}}}],["src/media/media.controller.ts:45",{"_index":764,"title":{},"body":{"controllers/MediaController.html":{}}}],["src/media/media.controller.ts:54",{"_index":758,"title":{},"body":{"controllers/MediaController.html":{}}}],["src/media/media.controller.ts:64",{"_index":767,"title":{},"body":{"controllers/MediaController.html":{}}}],["src/media/media.controller.ts:73",{"_index":760,"title":{},"body":{"controllers/MediaController.html":{}}}],["src/media/media.entity.ts",{"_index":727,"title":{},"body":{"classes/Media.html":{},"coverage.html":{}}}],["src/media/media.entity.ts:13",{"_index":733,"title":{},"body":{"classes/Media.html":{}}}],["src/media/media.entity.ts:16",{"_index":736,"title":{},"body":{"classes/Media.html":{}}}],["src/media/media.entity.ts:19",{"_index":731,"title":{},"body":{"classes/Media.html":{}}}],["src/media/media.entity.ts:22",{"_index":740,"title":{},"body":{"classes/Media.html":{}}}],["src/media/media.entity.ts:29",{"_index":738,"title":{},"body":{"classes/Media.html":{}}}],["src/media/media.entity.ts:33",{"_index":743,"title":{},"body":{"classes/Media.html":{}}}],["src/media/media.entity.ts:36",{"_index":730,"title":{},"body":{"classes/Media.html":{}}}],["src/media/media.entity.ts:39",{"_index":734,"title":{},"body":{"classes/Media.html":{}}}],["src/media/media.entity.ts:42",{"_index":744,"title":{},"body":{"classes/Media.html":{}}}],["src/media/media.entity.ts:50",{"_index":741,"title":{},"body":{"classes/Media.html":{}}}],["src/media/media.entity.ts:54",{"_index":742,"title":{},"body":{"classes/Media.html":{}}}],["src/media/media.entity.ts:58",{"_index":732,"title":{},"body":{"classes/Media.html":{}}}],["src/media/media.entity.ts:62",{"_index":729,"title":{},"body":{"classes/Media.html":{}}}],["src/media/media.module.ts",{"_index":784,"title":{},"body":{"modules/MediaModule.html":{}}}],["src/media/media.repository.ts",{"_index":789,"title":{},"body":{"classes/MediaRepository.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/media/media.repository.ts:12",{"_index":790,"title":{},"body":{"classes/MediaRepository.html":{}}}],["src/media/media.service.ts",{"_index":793,"title":{},"body":{"injectables/MediaService.html":{},"coverage.html":{}}}],["src/media/media.service.ts:11",{"_index":795,"title":{},"body":{"injectables/MediaService.html":{}}}],["src/media/media.service.ts:18",{"_index":798,"title":{},"body":{"injectables/MediaService.html":{}}}],["src/media/media.service.ts:22",{"_index":799,"title":{},"body":{"injectables/MediaService.html":{}}}],["src/media/media.service.ts:31",{"_index":796,"title":{},"body":{"injectables/MediaService.html":{}}}],["src/media/media.service.ts:36",{"_index":800,"title":{},"body":{"injectables/MediaService.html":{}}}],["src/media/media.service.ts:45",{"_index":797,"title":{},"body":{"injectables/MediaService.html":{}}}],["src/user/currency.enum.ts",{"_index":1054,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["src/user/get",{"_index":1012,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/user/update",{"_index":835,"title":{},"body":{"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["src/user/user.entity.ts",{"_index":841,"title":{},"body":{"classes/User.html":{},"coverage.html":{}}}],["src/user/user.entity.ts:27",{"_index":857,"title":{},"body":{"classes/User.html":{}}}],["src/user/user.entity.ts:30",{"_index":855,"title":{},"body":{"classes/User.html":{}}}],["src/user/user.entity.ts:34",{"_index":865,"title":{},"body":{"classes/User.html":{}}}],["src/user/user.entity.ts:41",{"_index":851,"title":{},"body":{"classes/User.html":{}}}],["src/user/user.entity.ts:45",{"_index":870,"title":{},"body":{"classes/User.html":{}}}],["src/user/user.entity.ts:48",{"_index":853,"title":{},"body":{"classes/User.html":{}}}],["src/user/user.entity.ts:51",{"_index":867,"title":{},"body":{"classes/User.html":{}}}],["src/user/user.entity.ts:54",{"_index":859,"title":{},"body":{"classes/User.html":{}}}],["src/user/user.entity.ts:57",{"_index":860,"title":{},"body":{"classes/User.html":{}}}],["src/user/user.entity.ts:60",{"_index":849,"title":{},"body":{"classes/User.html":{}}}],["src/user/user.entity.ts:63",{"_index":862,"title":{},"body":{"classes/User.html":{}}}],["src/user/user.entity.ts:66",{"_index":871,"title":{},"body":{"classes/User.html":{}}}],["src/user/user.entity.ts:75",{"_index":852,"title":{},"body":{"classes/User.html":{}}}],["src/user/user.entity.ts:80",{"_index":866,"title":{},"body":{"classes/User.html":{}}}],["src/user/user.entity.ts:84",{"_index":861,"title":{},"body":{"classes/User.html":{}}}],["src/user/user.entity.ts:88",{"_index":856,"title":{},"body":{"classes/User.html":{}}}],["src/user/user.entity.ts:92",{"_index":848,"title":{},"body":{"classes/User.html":{}}}],["src/user/user.entity.ts:94",{"_index":873,"title":{},"body":{"classes/User.html":{}}}],["src/user/user.repository.ts",{"_index":887,"title":{},"body":{"classes/UserRepository.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["src/user/user.repository.ts:15",{"_index":893,"title":{},"body":{"classes/UserRepository.html":{}}}],["src/user/user.repository.ts:19",{"_index":894,"title":{},"body":{"classes/UserRepository.html":{}}}],["src/user/user.repository.ts:37",{"_index":898,"title":{},"body":{"classes/UserRepository.html":{}}}],["src/user/user.repository.ts:47",{"_index":896,"title":{},"body":{"classes/UserRepository.html":{}}}],["src/user/users.controller.ts",{"_index":918,"title":{},"body":{"controllers/UsersController.html":{},"coverage.html":{}}}],["src/user/users.controller.ts:31",{"_index":927,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/user/users.controller.ts:37",{"_index":929,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/user/users.controller.ts:45",{"_index":924,"title":{},"body":{"controllers/UsersController.html":{}}}],["src/user/users.module.ts",{"_index":942,"title":{},"body":{"modules/UsersModule.html":{}}}],["src/user/users.service.ts",{"_index":946,"title":{},"body":{"injectables/UsersService.html":{},"coverage.html":{}}}],["src/user/users.service.ts:14",{"_index":950,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/user/users.service.ts:24",{"_index":954,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/user/users.service.ts:28",{"_index":955,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/user/users.service.ts:32",{"_index":958,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/user/users.service.ts:36",{"_index":956,"title":{},"body":{"injectables/UsersService.html":{}}}],["src/user/users.service.ts:73",{"_index":952,"title":{},"body":{"injectables/UsersService.html":{}}}],["start",{"_index":1073,"title":{},"body":{"index.html":{}}}],["start:dev",{"_index":1076,"title":{},"body":{"index.html":{}}}],["start:prodtest",{"_index":1078,"title":{},"body":{"index.html":{}}}],["started",{"_index":1061,"title":{"index.html":{},"license.html":{}},"body":{}}],["statements",{"_index":990,"title":{},"body":{"coverage.html":{}}}],["static",{"_index":888,"title":{},"body":{"classes/UserRepository.html":{}}}],["stay",{"_index":1097,"title":{},"body":{"index.html":{}}}],["still",{"_index":527,"title":{},"body":{"classes/CategoryRepository.html":{},"classes/MediaRepository.html":{}}}],["strategy",{"_index":718,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["string",{"_index":70,"title":{},"body":{"controllers/AuthController.html":{},"classes/AuthCredentialsDto.html":{},"injectables/AuthService.html":{},"classes/Category.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateEntryDto.html":{},"classes/CreateMediaDto.html":{},"classes/Entry.html":{},"classes/GetCategoriesFilterDto.html":{},"classes/GetEntriesFilterDto.html":{},"interfaces/JwtPayload.html":{},"classes/Media.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateEntryDto.html":{},"classes/UpdateMediaDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"injectables/UsersService.html":{},"classes/VerificationTokenEntity.html":{},"dependencies.html":{},"miscellaneous/variables.html":{}}}],["string})@transform(undefined)@isoptional()@isuuid",{"_index":535,"title":{},"body":{"classes/CreateCategoryDto.html":{},"classes/CreateEntryDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateEntryDto.html":{},"classes/UpdateUserDto.html":{}}}],["subject",{"_index":248,"title":{},"body":{"injectables/AuthService.html":{},"license.html":{}}}],["sublicense",{"_index":1131,"title":{},"body":{"license.html":{}}}],["substantial",{"_index":1143,"title":{},"body":{"license.html":{}}}],["successfully",{"_index":109,"title":{},"body":{"controllers/AuthController.html":{},"injectables/CategoriesService.html":{},"injectables/EntriesService.html":{},"injectables/UsersService.html":{}}}],["super",{"_index":721,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["support",{"_index":1092,"title":{},"body":{"index.html":{},"modules.html":{}}}],["svg",{"_index":1171,"title":{},"body":{"modules.html":{}}}],["swagger",{"_index":1044,"title":{},"body":{"dependencies.html":{}}}],["synchronize",{"_index":1215,"title":{},"body":{"miscellaneous/variables.html":{}}}],["table",{"_index":1017,"title":{},"body":{"coverage.html":{}}}],["tablesort(document.getelementbyid('coverage",{"_index":1016,"title":{},"body":{"coverage.html":{}}}],["template",{"_index":253,"title":{},"body":{"injectables/AuthService.html":{}}}],["test",{"_index":1081,"title":{},"body":{"index.html":{}}}],["test:cov",{"_index":1082,"title":{},"body":{"index.html":{}}}],["tests",{"_index":1080,"title":{},"body":{"index.html":{}}}],["this._checkforcyclic(id",{"_index":403,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["this._getcategorybyid(id",{"_index":366,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["this._getcategorybyid(parentcategoryid",{"_index":428,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["this.authservice.signin(authcredentialsdto",{"_index":102,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.signup(authcredentialsdto",{"_index":97,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.authservice.verifyemail(token",{"_index":107,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.categoriesservice.createcategory(createcategorydto",{"_index":333,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["this.categoriesservice.deletecategory(id",{"_index":336,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["this.categoriesservice.getcategories(filterdto",{"_index":327,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["this.categoriesservice.getcategorybyid(createentrydto.categoryid",{"_index":646,"title":{},"body":{"injectables/EntriesService.html":{}}}],["this.categoriesservice.getcategorybyid(id",{"_index":329,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["this.categoriesservice.getcategorybyid(updateentrydto.categoryid",{"_index":656,"title":{},"body":{"injectables/EntriesService.html":{}}}],["this.categoriesservice.getcategorybyid(updateuserdto.defaultcategoryid",{"_index":965,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.categoriesservice.updatecategory(id",{"_index":335,"title":{},"body":{"controllers/CategoriesController.html":{}}}],["this.categoryrepository.createcategory(createcategorydto",{"_index":389,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["this.categoryrepository.deletecategory(id",{"_index":419,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["this.categoryrepository.findone",{"_index":421,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["this.categoryrepository.getcategories(filterdto",{"_index":365,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["this.categoryrepository.updatecategory(category",{"_index":410,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["this.delete",{"_index":525,"title":{},"body":{"classes/CategoryRepository.html":{},"classes/MediaRepository.html":{}}}],["this.entriesservice.createentry(createentrydto",{"_index":619,"title":{},"body":{"controllers/EntriesController.html":{}}}],["this.entriesservice.deleteentry(id",{"_index":621,"title":{},"body":{"controllers/EntriesController.html":{}}}],["this.entriesservice.getentries(filterdto",{"_index":616,"title":{},"body":{"controllers/EntriesController.html":{}}}],["this.entriesservice.getentrybyid(id",{"_index":617,"title":{},"body":{"controllers/EntriesController.html":{}}}],["this.entriesservice.updateentry(id",{"_index":620,"title":{},"body":{"controllers/EntriesController.html":{}}}],["this.entryrepository.createentry(createentrydto",{"_index":648,"title":{},"body":{"injectables/EntriesService.html":{}}}],["this.entryrepository.delete",{"_index":662,"title":{},"body":{"injectables/EntriesService.html":{}}}],["this.entryrepository.findone",{"_index":641,"title":{},"body":{"injectables/EntriesService.html":{}}}],["this.entryrepository.getentries(filterdto",{"_index":640,"title":{},"body":{"injectables/EntriesService.html":{}}}],["this.entryrepository.updateentry(entry",{"_index":659,"title":{},"body":{"injectables/EntriesService.html":{}}}],["this.find",{"_index":514,"title":{},"body":{"classes/CategoryRepository.html":{},"classes/EntryRepository.html":{}}}],["this.findone",{"_index":912,"title":{},"body":{"classes/UserRepository.html":{}}}],["this.getcategorybyid(createcategorydto.parentcategoryid",{"_index":385,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["this.getcategorybyid(id",{"_index":390,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["this.getcategorybyid(updatecategorydto.parentcategoryid",{"_index":401,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["this.getentrybyid(id",{"_index":649,"title":{},"body":{"injectables/EntriesService.html":{}}}],["this.getmediabyid(id",{"_index":806,"title":{},"body":{"injectables/MediaService.html":{}}}],["this.jwtservice.sign(payload",{"_index":225,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.logger.debug(`genereated",{"_index":226,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.logger.debug(`successfully",{"_index":261,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.logger.error('error",{"_index":265,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.logger.error(`category",{"_index":414,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["this.logger.error(`could",{"_index":429,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["this.logger.error(`entry",{"_index":661,"title":{},"body":{"injectables/EntriesService.html":{}}}],["this.logger.error(`fail",{"_index":113,"title":{},"body":{"controllers/AuthController.html":{}}}],["this.logger.error(`failed",{"_index":515,"title":{},"body":{"classes/CategoryRepository.html":{},"classes/EntryRepository.html":{}}}],["this.logger.error(`user",{"_index":973,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.logger.verbose(`user",{"_index":323,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/EntriesController.html":{},"controllers/MediaController.html":{}}}],["this.logger.warn(`createcategory",{"_index":386,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["this.logger.warn(`createentry",{"_index":647,"title":{},"body":{"injectables/EntriesService.html":{}}}],["this.logger.warn(`updatecategory",{"_index":402,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["this.logger.warn(`updateentry",{"_index":657,"title":{},"body":{"injectables/EntriesService.html":{}}}],["this.logger.warn(`updateuser",{"_index":968,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.mediarepository.deletemedia(id",{"_index":811,"title":{},"body":{"injectables/MediaService.html":{}}}],["this.mediarepository.find",{"_index":802,"title":{},"body":{"injectables/MediaService.html":{}}}],["this.mediarepository.findone",{"_index":803,"title":{},"body":{"injectables/MediaService.html":{}}}],["this.mediaservice.createmedia(createmediadto",{"_index":778,"title":{},"body":{"controllers/MediaController.html":{}}}],["this.mediaservice.deletemedia(id",{"_index":780,"title":{},"body":{"controllers/MediaController.html":{}}}],["this.mediaservice.deletemedia(imageid",{"_index":420,"title":{},"body":{"injectables/CategoriesService.html":{},"injectables/EntriesService.html":{}}}],["this.mediaservice.deletemedia(previousimageid",{"_index":413,"title":{},"body":{"injectables/CategoriesService.html":{},"injectables/EntriesService.html":{},"injectables/UsersService.html":{}}}],["this.mediaservice.getallmedia(user",{"_index":775,"title":{},"body":{"controllers/MediaController.html":{}}}],["this.mediaservice.getmediabyid(createcategorydto.imageid",{"_index":383,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["this.mediaservice.getmediabyid(createentrydto.imageid",{"_index":644,"title":{},"body":{"injectables/EntriesService.html":{}}}],["this.mediaservice.getmediabyid(id",{"_index":776,"title":{},"body":{"controllers/MediaController.html":{}}}],["this.mediaservice.getmediabyid(updatecategorydto.imageid",{"_index":399,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["this.mediaservice.getmediabyid(updateentrydto.imageid",{"_index":654,"title":{},"body":{"injectables/EntriesService.html":{}}}],["this.mediaservice.getmediabyid(updateuserdto.pictureid",{"_index":967,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.mediaservice.updatemedia(id",{"_index":779,"title":{},"body":{"controllers/MediaController.html":{}}}],["this.password",{"_index":885,"title":{},"body":{"classes/User.html":{}}}],["this.savetokenandsendemailverification(authcredentialsdto",{"_index":216,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.userrepository.delete",{"_index":974,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.findone",{"_index":960,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.signup(authcredentialsdto",{"_index":961,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.updateuser(updateuserdto",{"_index":971,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.userrepository.validatepassword(authcrendentialsdto",{"_index":962,"title":{},"body":{"injectables/UsersService.html":{}}}],["this.usersservice.deleteuser(user.id",{"_index":937,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.findone(email",{"_index":726,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["this.usersservice.signup(authcredentialsdto",{"_index":212,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.usersservice.updateuser(updateuserdto",{"_index":935,"title":{},"body":{"controllers/UsersController.html":{}}}],["this.usersservice.validatepassword(authcrendentialsdto",{"_index":218,"title":{},"body":{"injectables/AuthService.html":{}}}],["this.verificationtokenrepository.findone",{"_index":229,"title":{},"body":{"injectables/AuthService.html":{}}}],["those",{"_index":368,"title":{},"body":{"injectables/CategoriesService.html":{},"injectables/EntriesService.html":{},"injectables/UsersService.html":{}}}],["throw",{"_index":220,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CategoriesService.html":{},"classes/CategoryRepository.html":{},"injectables/EntriesService.html":{},"classes/EntryRepository.html":{},"injectables/JwtStrategy.html":{},"classes/MediaRepository.html":{},"injectables/MediaService.html":{},"classes/UserRepository.html":{},"injectables/UsersService.html":{}}}],["title",{"_index":441,"title":{},"body":{"classes/Category.html":{},"classes/CategoryRepository.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateEntryDto.html":{},"classes/CreateMediaDto.html":{},"classes/Entry.html":{},"classes/EntryRepository.html":{},"classes/Media.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateEntryDto.html":{},"classes/UpdateMediaDto.html":{}}}],["todo",{"_index":377,"title":{},"body":{"injectables/CategoriesService.html":{},"injectables/EntriesService.html":{},"injectables/UsersService.html":{}}}],["token",{"_index":73,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/VerificationTokenEntity.html":{}}}],["tort",{"_index":1165,"title":{},"body":{"license.html":{}}}],["touch",{"_index":1098,"title":{},"body":{"index.html":{}}}],["tracker",{"_index":1063,"title":{},"body":{"index.html":{}}}],["transform",{"_index":95,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CategoriesController.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateEntryDto.html":{},"controllers/EntriesController.html":{},"classes/Entry.html":{},"controllers/MediaController.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateEntryDto.html":{},"classes/UpdateMediaDto.html":{},"classes/UpdateUserDto.html":{},"controllers/UsersController.html":{}}}],["transform(amount",{"_index":566,"title":{},"body":{"classes/CreateEntryDto.html":{},"classes/Entry.html":{},"classes/UpdateEntryDto.html":{}}}],["transform(categoryid",{"_index":547,"title":{},"body":{"classes/CreateCategoryDto.html":{},"classes/CreateEntryDto.html":{},"classes/UpdateEntryDto.html":{},"classes/UpdateUserDto.html":{}}}],["transform(date",{"_index":569,"title":{},"body":{"classes/CreateEntryDto.html":{},"classes/UpdateEntryDto.html":{}}}],["transform(description",{"_index":544,"title":{},"body":{"classes/CreateCategoryDto.html":{},"classes/CreateEntryDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateEntryDto.html":{},"classes/UpdateMediaDto.html":{}}}],["transform(imageid",{"_index":546,"title":{},"body":{"classes/CreateCategoryDto.html":{},"classes/CreateEntryDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateEntryDto.html":{}}}],["transform(parentcategoryid",{"_index":818,"title":{},"body":{"classes/UpdateCategoryDto.html":{}}}],["transform(undefined)@column('decimal",{"_index":664,"title":{},"body":{"classes/Entry.html":{}}}],["transformer",{"_index":491,"title":{},"body":{"classes/Category.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateEntryDto.html":{},"classes/Entry.html":{},"classes/Media.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateEntryDto.html":{},"classes/UpdateMediaDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"dependencies.html":{}}}],["true",{"_index":94,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"classes/Category.html":{},"controllers/EntriesController.html":{},"classes/Entry.html":{},"classes/Media.html":{},"controllers/MediaController.html":{},"classes/User.html":{},"controllers/UsersController.html":{},"classes/VerificationTokenEntity.html":{}}}],["true})@joincolumn({name",{"_index":982,"title":{},"body":{"classes/VerificationTokenEntity.html":{}}}],["try",{"_index":105,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/CategoriesService.html":{},"classes/CategoryRepository.html":{},"injectables/EntriesService.html":{},"classes/EntryRepository.html":{},"classes/MediaRepository.html":{},"classes/UserRepository.html":{},"injectables/UsersService.html":{}}}],["trying",{"_index":266,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CategoriesService.html":{}}}],["tsconfig.json",{"_index":1087,"title":{},"body":{"index.html":{}}}],["type",{"_index":62,"title":{},"body":{"controllers/AuthController.html":{},"classes/AuthCredentialsDto.html":{},"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"classes/Category.html":{},"classes/CategoryRepository.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateEntryDto.html":{},"classes/CreateMediaDto.html":{},"controllers/EntriesController.html":{},"injectables/EntriesService.html":{},"classes/Entry.html":{},"classes/EntryRepository.html":{},"classes/GetCategoriesFilterDto.html":{},"classes/GetEntriesFilterDto.html":{},"interfaces/JwtPayload.html":{},"injectables/JwtStrategy.html":{},"classes/Media.html":{},"controllers/MediaController.html":{},"classes/MediaRepository.html":{},"injectables/MediaService.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateEntryDto.html":{},"classes/UpdateMediaDto.html":{},"classes/UpdateUserDto.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/VerificationTokenEntity.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["type.enum",{"_index":585,"title":{},"body":{"classes/CreateMediaDto.html":{},"classes/Media.html":{},"classes/UpdateMediaDto.html":{}}}],["type.enum.ts",{"_index":1053,"title":{},"body":{"miscellaneous/enumerations.html":{}}}],["typeorm",{"_index":204,"title":{},"body":{"injectables/AuthService.html":{},"classes/Category.html":{},"classes/CategoryRepository.html":{},"classes/Entry.html":{},"classes/EntryRepository.html":{},"classes/Media.html":{},"classes/MediaRepository.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"classes/VerificationTokenEntity.html":{},"dependencies.html":{}}}],["typeormconfig",{"_index":29,"title":{},"body":{"modules/AppModule.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["typeormmodule",{"_index":27,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoriesModule.html":{},"modules/EntriesModule.html":{},"modules/MediaModule.html":{},"modules/UsersModule.html":{}}}],["typeormmodule.forfeature([categoryrepository",{"_index":345,"title":{},"body":{"modules/CategoriesModule.html":{}}}],["typeormmodule.forfeature([entryrepository",{"_index":629,"title":{},"body":{"modules/EntriesModule.html":{}}}],["typeormmodule.forfeature([mediarepository",{"_index":788,"title":{},"body":{"modules/MediaModule.html":{}}}],["typeormmodule.forfeature([userrepository",{"_index":945,"title":{},"body":{"modules/UsersModule.html":{}}}],["typeormmodule.forfeature([verificationtokenentity",{"_index":162,"title":{},"body":{"modules/AuthModule.html":{}}}],["typeormmodule.forroot(typeormconfig",{"_index":36,"title":{},"body":{"modules/AppModule.html":{}}}],["typeormmoduleoptions",{"_index":1197,"title":{},"body":{"miscellaneous/variables.html":{}}}],["ui",{"_index":1045,"title":{},"body":{"dependencies.html":{}}}],["unauthorizedexception",{"_index":78,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["unauthorizedexception('email",{"_index":222,"title":{},"body":{"injectables/AuthService.html":{}}}],["unauthorizedexception('invalid",{"_index":100,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["undefined",{"_index":445,"title":{},"body":{"classes/Category.html":{},"classes/Entry.html":{},"classes/Media.html":{},"classes/User.html":{},"classes/VerificationTokenEntity.html":{}}}],["undefined)@joincolumn",{"_index":459,"title":{},"body":{"classes/Category.html":{},"classes/Entry.html":{},"classes/User.html":{}}}],["undefined})@isoptional()@isin(undefined",{"_index":579,"title":{},"body":{"classes/CreateMediaDto.html":{},"classes/UpdateMediaDto.html":{}}}],["unique",{"_index":874,"title":{},"body":{"classes/User.html":{}}}],["unique(['email",{"_index":878,"title":{},"body":{"classes/User.html":{}}}],["unit",{"_index":1079,"title":{},"body":{"index.html":{}}}],["update",{"_index":902,"title":{},"body":{"classes/UserRepository.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["updatecategory",{"_index":275,"title":{},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"classes/CategoryRepository.html":{}}}],["updatecategory(category",{"_index":505,"title":{},"body":{"classes/CategoryRepository.html":{}}}],["updatecategory(id",{"_index":290,"title":{},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{}}}],["updatecategorydto",{"_index":291,"title":{"classes/UpdateCategoryDto.html":{}},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"classes/CategoryRepository.html":{},"classes/UpdateCategoryDto.html":{},"coverage.html":{}}}],["updatecategorydto.hasownproperty('imageid",{"_index":411,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["updatecategorydto.imageid",{"_index":398,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["updatecategorydto.parentcategoryid",{"_index":400,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["updated",{"_index":415,"title":{},"body":{"injectables/CategoriesService.html":{},"injectables/EntriesService.html":{},"injectables/UsersService.html":{}}}],["updatedatecolumn",{"_index":464,"title":{},"body":{"classes/Category.html":{},"classes/Entry.html":{},"classes/Media.html":{},"classes/User.html":{},"classes/VerificationTokenEntity.html":{}}}],["updatedcategory",{"_index":409,"title":{},"body":{"injectables/CategoriesService.html":{},"classes/CategoryRepository.html":{}}}],["updatedcategory.save",{"_index":521,"title":{},"body":{"classes/CategoryRepository.html":{}}}],["updatedentry",{"_index":658,"title":{},"body":{"injectables/EntriesService.html":{},"classes/EntryRepository.html":{}}}],["updatedentry.save",{"_index":701,"title":{},"body":{"classes/EntryRepository.html":{}}}],["updatedmedia",{"_index":808,"title":{},"body":{"injectables/MediaService.html":{}}}],["updatedmedia.save",{"_index":810,"title":{},"body":{"injectables/MediaService.html":{}}}],["updateduser",{"_index":914,"title":{},"body":{"classes/UserRepository.html":{},"injectables/UsersService.html":{}}}],["updateduser.save",{"_index":916,"title":{},"body":{"classes/UserRepository.html":{}}}],["updateentry",{"_index":596,"title":{},"body":{"controllers/EntriesController.html":{},"injectables/EntriesService.html":{},"classes/EntryRepository.html":{}}}],["updateentry(entry",{"_index":689,"title":{},"body":{"classes/EntryRepository.html":{}}}],["updateentry(id",{"_index":606,"title":{},"body":{"controllers/EntriesController.html":{},"injectables/EntriesService.html":{}}}],["updateentrydto",{"_index":607,"title":{"classes/UpdateEntryDto.html":{}},"body":{"controllers/EntriesController.html":{},"injectables/EntriesService.html":{},"classes/EntryRepository.html":{},"classes/UpdateEntryDto.html":{},"coverage.html":{}}}],["updateentrydto.categoryid",{"_index":655,"title":{},"body":{"injectables/EntriesService.html":{}}}],["updateentrydto.hasownproperty('imageid",{"_index":660,"title":{},"body":{"injectables/EntriesService.html":{}}}],["updateentrydto.imageid",{"_index":653,"title":{},"body":{"injectables/EntriesService.html":{}}}],["updatemedia",{"_index":756,"title":{},"body":{"controllers/MediaController.html":{},"injectables/MediaService.html":{}}}],["updatemedia(id",{"_index":765,"title":{},"body":{"controllers/MediaController.html":{},"injectables/MediaService.html":{}}}],["updatemediadto",{"_index":766,"title":{"classes/UpdateMediaDto.html":{}},"body":{"controllers/MediaController.html":{},"injectables/MediaService.html":{},"classes/UpdateMediaDto.html":{},"coverage.html":{}}}],["updateuser",{"_index":890,"title":{},"body":{"classes/UserRepository.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["updateuser(updateuserdto",{"_index":895,"title":{},"body":{"classes/UserRepository.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["updateuserdto",{"_index":834,"title":{"classes/UpdateUserDto.html":{}},"body":{"classes/UpdateUserDto.html":{},"classes/UserRepository.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["updateuserdto.defaultcategoryid",{"_index":964,"title":{},"body":{"injectables/UsersService.html":{}}}],["updateuserdto.hasownproperty('pictureid",{"_index":972,"title":{},"body":{"injectables/UsersService.html":{}}}],["updateuserdto.pictureid",{"_index":966,"title":{},"body":{"injectables/UsersService.html":{}}}],["url",{"_index":573,"title":{},"body":{"classes/CreateMediaDto.html":{},"classes/Media.html":{},"classes/UpdateMediaDto.html":{}}}],["use",{"_index":1126,"title":{},"body":{"license.html":{}}}],["useguards",{"_index":299,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/EntriesController.html":{},"controllers/MediaController.html":{},"controllers/UsersController.html":{}}}],["useguards(authguard",{"_index":319,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/EntriesController.html":{},"controllers/MediaController.html":{},"controllers/UsersController.html":{}}}],["useinterceptors",{"_index":300,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/EntriesController.html":{},"controllers/MediaController.html":{},"controllers/UsersController.html":{}}}],["useinterceptors(classserializerinterceptor",{"_index":320,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/EntriesController.html":{},"controllers/MediaController.html":{},"controllers/UsersController.html":{}}}],["usepipes",{"_index":301,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/EntriesController.html":{},"controllers/MediaController.html":{},"controllers/UsersController.html":{}}}],["usepipes(new",{"_index":330,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/EntriesController.html":{},"controllers/MediaController.html":{},"controllers/UsersController.html":{}}}],["user",{"_index":217,"title":{"classes/User.html":{}},"body":{"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"classes/Category.html":{},"classes/CategoryRepository.html":{},"controllers/EntriesController.html":{},"injectables/EntriesService.html":{},"classes/Entry.html":{},"classes/EntryRepository.html":{},"injectables/JwtStrategy.html":{},"classes/Media.html":{},"controllers/MediaController.html":{},"classes/MediaRepository.html":{},"injectables/MediaService.html":{},"classes/User.html":{},"classes/UserRepository.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{},"classes/VerificationTokenEntity.html":{},"coverage.html":{},"miscellaneous/variables.html":{}}}],["user.categories",{"_index":495,"title":{},"body":{"classes/Category.html":{}}}],["user.decorator",{"_index":314,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/EntriesController.html":{},"controllers/MediaController.html":{},"controllers/UsersController.html":{}}}],["user.decorator.ts",{"_index":1013,"title":{},"body":{"coverage.html":{},"miscellaneous/variables.html":{}}}],["user.defaultcategory",{"_index":493,"title":{},"body":{"classes/Category.html":{}}}],["user.dto",{"_index":903,"title":{},"body":{"classes/UserRepository.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["user.dto.ts",{"_index":836,"title":{},"body":{"classes/UpdateUserDto.html":{},"coverage.html":{}}}],["user.dto.ts:11",{"_index":839,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.dto.ts:17",{"_index":840,"title":{},"body":{"classes/UpdateUserDto.html":{}}}],["user.email",{"_index":219,"title":{},"body":{"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"classes/CategoryRepository.html":{},"controllers/EntriesController.html":{},"classes/EntryRepository.html":{},"controllers/MediaController.html":{}}}],["user.entity",{"_index":899,"title":{},"body":{"classes/UserRepository.html":{},"controllers/UsersController.html":{},"injectables/UsersService.html":{}}}],["user.entries",{"_index":683,"title":{},"body":{"classes/Entry.html":{}}}],["user.id",{"_index":422,"title":{},"body":{"injectables/CategoriesService.html":{},"classes/CategoryRepository.html":{},"injectables/EntriesService.html":{},"classes/EntryRepository.html":{},"classes/MediaRepository.html":{},"injectables/MediaService.html":{},"classes/VerificationTokenEntity.html":{}}}],["user.media",{"_index":746,"title":{},"body":{"classes/Media.html":{}}}],["user.picture",{"_index":747,"title":{},"body":{"classes/Media.html":{}}}],["user.pictureid",{"_index":970,"title":{},"body":{"injectables/UsersService.html":{}}}],["user.repository",{"_index":944,"title":{},"body":{"modules/UsersModule.html":{},"injectables/UsersService.html":{}}}],["user.save",{"_index":909,"title":{},"body":{"classes/UserRepository.html":{}}}],["user.validatepassword(password",{"_index":913,"title":{},"body":{"classes/UserRepository.html":{}}}],["user.verified",{"_index":221,"title":{},"body":{"injectables/AuthService.html":{}}}],["user/get",{"_index":313,"title":{},"body":{"controllers/CategoriesController.html":{},"controllers/EntriesController.html":{},"controllers/MediaController.html":{}}}],["user/user.entity",{"_index":311,"title":{},"body":{"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"classes/Category.html":{},"classes/CategoryRepository.html":{},"controllers/EntriesController.html":{},"injectables/EntriesService.html":{},"classes/Entry.html":{},"classes/EntryRepository.html":{},"injectables/JwtStrategy.html":{},"classes/Media.html":{},"controllers/MediaController.html":{},"classes/MediaRepository.html":{},"injectables/MediaService.html":{},"classes/VerificationTokenEntity.html":{}}}],["user/users.module",{"_index":35,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{}}}],["user/users.service",{"_index":200,"title":{},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{}}}],["userfordefaultcategory",{"_index":442,"title":{},"body":{"classes/Category.html":{}}}],["userforpicture",{"_index":728,"title":{},"body":{"classes/Media.html":{}}}],["userid",{"_index":185,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CategoriesService.html":{},"classes/Category.html":{},"classes/CategoryRepository.html":{},"injectables/EntriesService.html":{},"classes/Entry.html":{},"classes/EntryRepository.html":{},"classes/Media.html":{},"classes/MediaRepository.html":{},"injectables/MediaService.html":{},"classes/VerificationTokenEntity.html":{}}}],["username",{"_index":1204,"title":{},"body":{"miscellaneous/variables.html":{}}}],["userrepository",{"_index":886,"title":{"classes/UserRepository.html":{}},"body":{"classes/UserRepository.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{}}}],["userrepository._hashpassword(password",{"_index":908,"title":{},"body":{"classes/UserRepository.html":{}}}],["users",{"_index":919,"title":{},"body":{"controllers/UsersController.html":{}}}],["users.controller",{"_index":943,"title":{},"body":{"modules/UsersModule.html":{}}}],["users.service",{"_index":930,"title":{},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{}}}],["userscontroller",{"_index":917,"title":{"controllers/UsersController.html":{}},"body":{"controllers/UsersController.html":{},"modules/UsersModule.html":{},"coverage.html":{}}}],["usersmodule",{"_index":16,"title":{"modules/UsersModule.html":{}},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/UsersModule.html":{},"modules.html":{},"overview.html":{}}}],["usersservice",{"_index":180,"title":{"injectables/UsersService.html":{}},"body":{"injectables/AuthService.html":{},"injectables/JwtStrategy.html":{},"controllers/UsersController.html":{},"modules/UsersModule.html":{},"injectables/UsersService.html":{},"coverage.html":{},"overview.html":{}}}],["uuid",{"_index":186,"title":{},"body":{"injectables/AuthService.html":{},"controllers/CategoriesController.html":{},"injectables/CategoriesService.html":{},"classes/Category.html":{},"classes/CategoryRepository.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateEntryDto.html":{},"controllers/EntriesController.html":{},"injectables/EntriesService.html":{},"classes/Entry.html":{},"classes/Media.html":{},"controllers/MediaController.html":{},"classes/MediaRepository.html":{},"injectables/MediaService.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateEntryDto.html":{},"classes/User.html":{},"injectables/UsersService.html":{},"classes/VerificationTokenEntity.html":{},"dependencies.html":{}}}],["validate",{"_index":114,"title":{},"body":{"controllers/AuthController.html":{},"injectables/JwtStrategy.html":{}}}],["validate(payload",{"_index":714,"title":{},"body":{"injectables/JwtStrategy.html":{}}}],["validatepassword",{"_index":847,"title":{},"body":{"classes/User.html":{},"classes/UserRepository.html":{},"injectables/UsersService.html":{}}}],["validatepassword(authcredentialsdto",{"_index":897,"title":{},"body":{"classes/UserRepository.html":{}}}],["validatepassword(authcrendentialsdto",{"_index":957,"title":{},"body":{"injectables/UsersService.html":{}}}],["validatepassword(password",{"_index":872,"title":{},"body":{"classes/User.html":{}}}],["validationpipe",{"_index":79,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CategoriesController.html":{},"controllers/EntriesController.html":{},"controllers/MediaController.html":{},"controllers/UsersController.html":{}}}],["validator",{"_index":138,"title":{},"body":{"classes/AuthCredentialsDto.html":{},"classes/CreateCategoryDto.html":{},"classes/CreateEntryDto.html":{},"classes/CreateMediaDto.html":{},"classes/GetCategoriesFilterDto.html":{},"classes/GetEntriesFilterDto.html":{},"classes/UpdateCategoryDto.html":{},"classes/UpdateEntryDto.html":{},"classes/UpdateMediaDto.html":{},"classes/UpdateUserDto.html":{},"dependencies.html":{}}}],["value",{"_index":194,"title":{},"body":{"injectables/AuthService.html":{},"injectables/CategoriesService.html":{},"classes/CategoryRepository.html":{},"injectables/EntriesService.html":{},"classes/EntryRepository.html":{},"injectables/UsersService.html":{},"miscellaneous/enumerations.html":{},"miscellaneous/variables.html":{}}}],["variable",{"_index":992,"title":{},"body":{"coverage.html":{}}}],["variables",{"_index":256,"title":{"miscellaneous/variables.html":{}},"body":{"injectables/AuthService.html":{},"miscellaneous/variables.html":{}}}],["verification",{"_index":263,"title":{},"body":{"injectables/AuthService.html":{}}}],["verification.token.entity",{"_index":158,"title":{},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{}}}],["verificationenabled",{"_index":1185,"title":{},"body":{"miscellaneous/variables.html":{}}}],["verificationtoken",{"_index":228,"title":{},"body":{"injectables/AuthService.html":{}}}],["verificationtoken.remove",{"_index":235,"title":{},"body":{"injectables/AuthService.html":{}}}],["verificationtoken.save",{"_index":239,"title":{},"body":{"injectables/AuthService.html":{}}}],["verificationtoken.user",{"_index":230,"title":{},"body":{"injectables/AuthService.html":{}}}],["verificationtoken.user.save",{"_index":234,"title":{},"body":{"injectables/AuthService.html":{}}}],["verificationtoken.user.verified",{"_index":233,"title":{},"body":{"injectables/AuthService.html":{}}}],["verificationtokenentity",{"_index":157,"title":{"classes/VerificationTokenEntity.html":{}},"body":{"modules/AuthModule.html":{},"injectables/AuthService.html":{},"classes/VerificationTokenEntity.html":{},"coverage.html":{}}}],["verificationtokenrepository",{"_index":183,"title":{},"body":{"injectables/AuthService.html":{}}}],["verified",{"_index":110,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{},"classes/User.html":{},"classes/UserRepository.html":{}}}],["verify",{"_index":250,"title":{},"body":{"injectables/AuthService.html":{}}}],["verifyemail",{"_index":53,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["verifyemail(token",{"_index":69,"title":{},"body":{"controllers/AuthController.html":{},"injectables/AuthService.html":{}}}],["verifying",{"_index":118,"title":{},"body":{"controllers/AuthController.html":{}}}],["version",{"_index":443,"title":{},"body":{"classes/Category.html":{},"classes/Entry.html":{},"classes/Media.html":{},"classes/User.html":{},"classes/VerificationTokenEntity.html":{}}}],["versioncolumn",{"_index":479,"title":{},"body":{"classes/Category.html":{},"classes/Entry.html":{},"classes/Media.html":{},"classes/User.html":{},"classes/VerificationTokenEntity.html":{}}}],["video",{"_index":588,"title":{},"body":{"classes/CreateMediaDto.html":{},"classes/UpdateMediaDto.html":{},"miscellaneous/enumerations.html":{}}}],["warranties",{"_index":1149,"title":{},"body":{"license.html":{}}}],["warranty",{"_index":1145,"title":{},"body":{"license.html":{}}}],["watch",{"_index":1074,"title":{},"body":{"index.html":{}}}],["weak",{"_index":130,"title":{},"body":{"classes/AuthCredentialsDto.html":{}}}],["website",{"_index":1102,"title":{},"body":{"index.html":{}}}],["whether",{"_index":1162,"title":{},"body":{"license.html":{}}}],["whitelist",{"_index":93,"title":{},"body":{"controllers/AuthController.html":{},"controllers/CategoriesController.html":{},"controllers/EntriesController.html":{},"controllers/MediaController.html":{},"controllers/UsersController.html":{}}}],["withh",{"_index":416,"title":{},"body":{"injectables/CategoriesService.html":{}}}],["without",{"_index":1121,"title":{},"body":{"license.html":{}}}],["year",{"_index":1107,"title":{},"body":{"license.html":{}}}],["z",{"_index":128,"title":{},"body":{"classes/AuthCredentialsDto.html":{}}}],["z])(?=.*[a",{"_index":127,"title":{},"body":{"classes/AuthCredentialsDto.html":{}}}],["zoom",{"_index":17,"title":{},"body":{"modules/AppModule.html":{},"modules/AuthModule.html":{},"modules/CategoriesModule.html":{},"modules/EntriesModule.html":{},"modules/MediaModule.html":{},"modules/UsersModule.html":{},"overview.html":{}}}]],"pipeline":["stemmer"]},
    "store": {"modules/AppModule.html":{"url":"modules/AppModule.html","title":"module - AppModule","body":"\n                   \n\n\n\n\n    Modules\n    AppModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nCategoriesModule\n\nCategoriesModule\n\nAppModule -->\n\nCategoriesModule->AppModule\n\n\n\n\n\nEntriesModule\n\nEntriesModule\n\nAppModule -->\n\nEntriesModule->AppModule\n\n\n\n\n\nMediaModule\n\nMediaModule\n\nAppModule -->\n\nMediaModule->AppModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/app.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            CategoriesModule\n                        \n                        \n                            EntriesModule\n                        \n                        \n                            MediaModule\n                        \n                        \n                            UsersModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common'\nimport { TypeOrmModule } from '@nestjs/typeorm'\nimport { typeOrmConfig } from './config/typeorm.config'\nimport { AuthModule } from './auth/auth.module'\nimport { EntriesModule } from './entries/entries.module'\nimport { CategoriesModule } from './categories/categories.module'\nimport { MediaModule } from './media/media.module'\nimport { UsersModule } from './user/users.module'\n\n@Module({\n  imports: [\n    TypeOrmModule.forRoot(typeOrmConfig),\n    AuthModule,\n    EntriesModule,\n    CategoriesModule,\n    MediaModule,\n    UsersModule,\n  ],\n})\nexport class AppModule {\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/AuthController.html":{"url":"controllers/AuthController.html","title":"controller - AuthController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  AuthController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                auth\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                signIn\n                            \n                            \n                                signUp\n                            \n                            \n                                    Async\n                                verifyEmail\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            signIn\n                        \n                        \n                    \n                \n            \n            \n                \nsignIn(authCredentialsDto: AuthCredentialsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/signin')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:21\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    authCredentialsDto\n                                    \n                                                AuthCredentialsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            signUp\n                        \n                        \n                    \n                \n            \n            \n                \nsignUp(authCredentialsDto: AuthCredentialsDto)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post('/signup')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    authCredentialsDto\n                                    \n                                                AuthCredentialsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            verifyEmail\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    verifyEmail(token: string)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/email/verify/:token')\n                \n            \n\n            \n                \n                    Defined in src/auth/auth.controller.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    token\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import { Body, Controller, Get, Logger, Param, Post, UnauthorizedException, ValidationPipe } from '@nestjs/common'\nimport { AuthCredentialsDto } from './dto/auth-credentials.dto'\nimport { AuthService } from './auth.service'\nimport { ApiUseTags } from '@nestjs/swagger'\n\n@ApiUseTags('auth')\n@Controller('auth')\nexport class AuthController {\n\n  private readonly logger = new Logger()\n\n  constructor(private readonly authService: AuthService) {\n  }\n\n  @Post('/signup')\n  signUp(@Body(new ValidationPipe({ whitelist: true, transform: true })) authCredentialsDto: AuthCredentialsDto): Promise {\n    return this.authService.signUp(authCredentialsDto)\n  }\n\n  @Post('/signin')\n  signIn(\n    @Body(new ValidationPipe(\n      {\n        whitelist: true,\n        transform: true,\n        exceptionFactory: () => new UnauthorizedException('Invalid credentials'),\n      }),\n    ) authCredentialsDto: AuthCredentialsDto): Promise {\n    return this.authService.signIn(authCredentialsDto)\n  }\n\n  @Get('/email/verify/:token')\n  // not idempotent\n  async verifyEmail(\n    @Param('token', new ValidationPipe({ transform: true })) token: string,\n  ): Promise {\n    try {\n      await this.authService.verifyEmail(token)\n      return 'Your email has been successfully verified.'\n    } catch (e) {\n      this.logger.error(`Fail to validate token: \"${token}\"`, e.stack)\n      return 'An error occured while verifying your email.'\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/AuthCredentialsDto.html":{"url":"classes/AuthCredentialsDto.html","title":"class - AuthCredentialsDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  AuthCredentialsDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/dto/auth-credentials.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                email\n                            \n                            \n                                password\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            email\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelProperty()@IsNotEmpty()@IsString()@MinLength(3)@MaxLength(320)@IsEmail()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auth/dto/auth-credentials.dto.ts:12\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            password\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelProperty()@IsNotEmpty()@IsString()@MinLength(8)@MaxLength(20)@Matches(/((?=.*\\d)|(?=.*\\W+))(?![.\\n])(?=.*[A-Z])(?=.*[a-z]).*$/, {message: 'Password too weak.'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auth/dto/auth-credentials.dto.ts:20\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsEmail, IsNotEmpty, IsString, Matches, MaxLength, MinLength } from 'class-validator'\nimport { ApiModelProperty } from '@nestjs/swagger'\n\nexport class AuthCredentialsDto {\n\n  @ApiModelProperty()\n  @IsNotEmpty()\n  @IsString()\n  @MinLength(3)\n  @MaxLength(320)\n  @IsEmail()\n  email: string\n\n  @ApiModelProperty()\n  @IsNotEmpty()\n  @IsString()\n  @MinLength(8)\n  @MaxLength(20)\n  @Matches(/((?=.*\\d)|(?=.*\\W+))(?![.\\n])(?=.*[A-Z])(?=.*[a-z]).*$/, { message: 'Password too weak.' })\n  password: string\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/AuthModule.html":{"url":"modules/AuthModule.html","title":"module - AuthModule","body":"\n                   \n\n\n\n\n    Modules\n    AuthModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\n\nAuthService\n\nAuthService\n\n\n\nAuthModule\n\nAuthModule\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/auth/auth.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            AuthService\n                        \n                        \n                            JwtStrategy\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            AuthController\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { forwardRef, Module } from '@nestjs/common'\nimport { AuthController } from './auth.controller'\nimport { AuthService } from './auth.service'\nimport { JwtModule } from '@nestjs/jwt'\nimport { PassportModule } from '@nestjs/passport'\nimport { JwtStrategy } from './jwt.strategy'\nimport * as config from 'config'\nimport { UsersModule } from '../user/users.module'\nimport { VerificationTokenEntity } from './verification.token.entity'\nimport { TypeOrmModule } from '@nestjs/typeorm'\n\nconst jwtConfig = config.get('jwt')\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([VerificationTokenEntity]),\n    PassportModule.register({ defaultStrategy: 'jwt' }),\n    JwtModule.register({\n      secret: process.env.JWT_SECRET || jwtConfig.secret,\n      signOptions: { expiresIn: jwtConfig.expiresIn },\n    }),\n    forwardRef(() => UsersModule),\n  ],\n  controllers: [AuthController],\n  providers: [\n    AuthService,\n    JwtStrategy,\n  ],\n  exports: [\n    PassportModule,\n  ],\n})\n\nexport class AuthModule {\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/AuthService.html":{"url":"injectables/AuthService.html","title":"injectable - AuthService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  AuthService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/auth.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Async\n                                saveTokenAndSendEmailVerification\n                            \n                            \n                                    Async\n                                signIn\n                            \n                            \n                                    Async\n                                signUp\n                            \n                            \n                                    Async\n                                verifyEmail\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(verificationTokenRepository: Repository, usersService: UsersService, jwtService: JwtService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/auth.service.ts:16\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        verificationTokenRepository\n                                                  \n                                                        \n                                                                        Repository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        jwtService\n                                                  \n                                                        \n                                                                    JwtService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            Async\n                            saveTokenAndSendEmailVerification\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    saveTokenAndSendEmailVerification(authCredentialsDto: AuthCredentialsDto, userId: uuid)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:57\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    authCredentialsDto\n                                    \n                                                AuthCredentialsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    userId\n                                    \n                                            uuid\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            signIn\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    signIn(authCrendentialsDto: AuthCredentialsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:34\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    authCrendentialsDto\n                                    \n                                                AuthCredentialsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            signUp\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    signUp(authCredentialsDto: AuthCredentialsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:26\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    authCredentialsDto\n                                    \n                                                AuthCredentialsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            verifyEmail\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    verifyEmail(token: string)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/auth.service.ts:47\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    token\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            logger\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new Logger('AuthService')\n                        \n                    \n                        \n                            \n                                    Defined in src/auth/auth.service.ts:16\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import { Injectable, Logger, NotFoundException, UnauthorizedException } from '@nestjs/common'\nimport { AuthCredentialsDto } from './dto/auth-credentials.dto'\nimport { JwtService } from '@nestjs/jwt'\nimport { JwtPayload } from './interfaces/jwt-payload.interface'\nimport { UsersService } from '../user/users.service'\nimport * as cryptoRandomString from 'crypto-random-string'\nimport { VerificationTokenEntity } from './verification.token.entity'\nimport { Repository } from 'typeorm'\nimport { InjectRepository } from '@nestjs/typeorm'\nimport * as uuid from 'uuid'\nimport * as Mailgun from 'mailgun-js'\nimport { emailConfig } from '../config/mailgun.config'\n\n@Injectable()\nexport class AuthService {\n  private logger = new Logger('AuthService')\n\n  constructor(\n    @InjectRepository(VerificationTokenEntity)\n    private readonly verificationTokenRepository: Repository,\n    private readonly usersService: UsersService,\n    private readonly jwtService: JwtService,\n  ) {\n  }\n\n  async signUp(authCredentialsDto: AuthCredentialsDto): Promise {\n    const { id } = await this.usersService.signUp(authCredentialsDto)\n    // what to do if an error occur when sending email ?\n    if (emailConfig.verificationEnabled) {\n      await this.saveTokenAndSendEmailVerification(authCredentialsDto, id)\n    }\n  }\n\n  async signIn(authCrendentialsDto: AuthCredentialsDto): Promise {\n    const user = await this.usersService.validatePassword(authCrendentialsDto)\n    if (!user || !user.email) {\n      throw new UnauthorizedException('Invalid credentials')\n    } else if (!user.verified) {\n      throw new UnauthorizedException('Email not verified')\n    }\n    const payload: JwtPayload = { email: user.email }\n    const accessToken = await this.jwtService.sign(payload)\n    this.logger.debug(`Genereated JWT token with payload ${JSON.stringify(payload)}`)\n    return { accessToken }\n  }\n\n  async verifyEmail(token: string): Promise {\n    const verificationToken = await this.verificationTokenRepository.findOne({ token })\n    if (!verificationToken || !verificationToken.user) {\n      throw new NotFoundException(`Token \"${token}\" not found.`)\n    }\n    verificationToken.user.verified = true\n    await verificationToken.user.save()\n    await verificationToken.remove()\n  }\n\n  private async saveTokenAndSendEmailVerification(authCredentialsDto: AuthCredentialsDto, userId: uuid): Promise {\n    const token = cryptoRandomString({ length: 32 })\n    const { email } = authCredentialsDto\n    const verificationToken = Object.assign(this.verificationTokenRepository.create(), { email, token, userId })\n    await verificationToken.save()\n\n    const mailgun = new Mailgun({\n      apiKey: emailConfig.apiKey,\n      domain: emailConfig.domain,\n      host: 'api.eu.mailgun.net',\n    })\n    const data = {\n      'from': emailConfig.from,\n      'to': email,\n      'subject': 'Please verify your Shargea account',\n      'template': 'email_confirm',\n      'h:X-Mailgun-Variables': JSON.stringify({ hostname: emailConfig.hostname, token }),\n    }\n\n    try {\n      await mailgun.messages().send(data)\n      this.logger.debug(`Successfully sent verification email to ${email}`)\n    } catch (err) {\n      this.logger.error('Error when trying to send email: ', err)\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/CategoriesController.html":{"url":"controllers/CategoriesController.html","title":"controller - CategoriesController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  CategoriesController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/categories/categories.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                categories\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createCategory\n                            \n                            \n                                deleteCategory\n                            \n                            \n                                getCategories\n                            \n                            \n                                getCategoryById\n                            \n                            \n                                updateCategory\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            createCategory\n                        \n                        \n                    \n                \n            \n            \n                \ncreateCategory(createCategoryDto: CreateCategoryDto, user: User)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@UsePipes(new ValidationPipe())\n                \n            \n\n            \n                \n                    Defined in src/categories/categories.controller.ts:59\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createCategoryDto\n                                    \n                                                CreateCategoryDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            deleteCategory\n                        \n                        \n                    \n                \n            \n            \n                \ndeleteCategory(id: uuid, user: User)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/:id')\n                \n            \n\n            \n                \n                    Defined in src/categories/categories.controller.ts:78\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                            uuid\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getCategories\n                        \n                        \n                    \n                \n            \n            \n                \ngetCategories(filterDto: GetCategoriesFilterDto, user: User)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/categories/categories.controller.ts:41\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    filterDto\n                                    \n                                                GetCategoriesFilterDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getCategoryById\n                        \n                        \n                    \n                \n            \n            \n                \ngetCategoryById(id: uuid, user: User)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:id')\n                \n            \n\n            \n                \n                    Defined in src/categories/categories.controller.ts:50\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                            uuid\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            updateCategory\n                        \n                        \n                    \n                \n            \n            \n                \nupdateCategory(id: uuid, updateCategoryDto: UpdateCategoryDto, user: User)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('/:id')@UsePipes(new ValidationPipe())\n                \n            \n\n            \n                \n                    Defined in src/categories/categories.controller.ts:69\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                            uuid\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateCategoryDto\n                                    \n                                                UpdateCategoryDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  ClassSerializerInterceptor,\n  Controller,\n  Delete,\n  Get,\n  Logger,\n  Param,\n  ParseUUIDPipe,\n  Patch,\n  Post,\n  Query,\n  UseGuards,\n  UseInterceptors,\n  UsePipes,\n  ValidationPipe,\n} from '@nestjs/common'\nimport { CategoriesService } from './categories.service'\nimport { CreateCategoryDto } from './dto/create-category.dto'\nimport { GetCategoriesFilterDto } from './dto/get-categories-filter.dto'\nimport { Category } from './category.entity'\nimport { AuthGuard } from '@nestjs/passport'\nimport { User } from '../user/user.entity'\nimport { GetUser } from '../user/get-user.decorator'\nimport uuid from 'uuid'\nimport { UpdateCategoryDto } from './dto/update-category.dto'\nimport { ApiBearerAuth, ApiUseTags } from '@nestjs/swagger'\n\n@ApiBearerAuth()\n@ApiUseTags('categories')\n@Controller('categories')\n@UseGuards(AuthGuard())\n@UseInterceptors(ClassSerializerInterceptor)\nexport class CategoriesController {\n  private logger = new Logger('CategoriesController')\n\n  constructor(private readonly categoriesService: CategoriesService) {\n  }\n\n  @Get()\n  getCategories(\n    @Query(new ValidationPipe({ whitelist: true, transform: true })) filterDto: GetCategoriesFilterDto,\n    @GetUser() user: User,\n  ): Promise {\n    this.logger.verbose(`User \"${user.email}\" retrieving all categories. Filters: ${JSON.stringify(filterDto)}`)\n    return this.categoriesService.getCategories(filterDto, user)\n  }\n\n  @Get('/:id')\n  getCategoryById(\n    @Param('id', new ParseUUIDPipe()) id: uuid,\n    @GetUser() user: User,\n  ): Promise {\n    return this.categoriesService.getCategoryById(id, user)\n  }\n\n  @Post()\n  @UsePipes(new ValidationPipe({ whitelist: true, transform: true }))\n  createCategory(\n    @Body() createCategoryDto: CreateCategoryDto,\n    @GetUser() user: User,\n  ): Promise {\n    this.logger.verbose(`User \"${user.email}\" creating a new category. Data: ${JSON.stringify(createCategoryDto)}`)\n    return this.categoriesService.createCategory(createCategoryDto, user)\n  }\n\n  @Patch('/:id')\n  @UsePipes(new ValidationPipe({ whitelist: true, transform: true }))\n  updateCategory(\n    @Param('id', new ParseUUIDPipe()) id: uuid,\n    @Body() updateCategoryDto: UpdateCategoryDto,\n    @GetUser() user: User,\n  ): Promise {\n    return this.categoriesService.updateCategory(id, updateCategoryDto, user)\n  }\n\n  @Delete('/:id')\n  deleteCategory(\n    @Param('id', new ParseUUIDPipe()) id: uuid,\n    @GetUser() user: User,\n  ): Promise {\n    return this.categoriesService.deleteCategory(id, user)\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/CategoriesModule.html":{"url":"modules/CategoriesModule.html","title":"module - CategoriesModule","body":"\n                   \n\n\n\n\n    Modules\n    CategoriesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_CategoriesModule\n\n\n\ncluster_CategoriesModule_imports\n\n\n\ncluster_CategoriesModule_exports\n\n\n\ncluster_CategoriesModule_providers\n\n\n\n\nMediaModule\n\nMediaModule\n\n\n\nCategoriesModule\n\nCategoriesModule\n\nCategoriesModule -->\n\nMediaModule->CategoriesModule\n\n\n\n\n\nCategoriesService \n\nCategoriesService \n\nCategoriesService  -->\n\nCategoriesModule->CategoriesService \n\n\n\n\n\nCategoriesService\n\nCategoriesService\n\nCategoriesModule -->\n\nCategoriesService->CategoriesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/categories/categories.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            CategoriesService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            CategoriesController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            MediaModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            CategoriesService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { forwardRef, Module } from '@nestjs/common'\nimport { CategoriesController } from './categories.controller'\nimport { CategoriesService } from './categories.service'\nimport { TypeOrmModule } from '@nestjs/typeorm'\nimport { CategoryRepository } from './category.repository'\nimport { AuthModule } from '../auth/auth.module'\nimport { MediaModule } from '../media/media.module'\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([CategoryRepository]),\n    forwardRef(() => AuthModule),\n    MediaModule,\n  ],\n  controllers: [CategoriesController],\n  providers: [CategoriesService],\n  exports: [CategoriesService],\n})\nexport class CategoriesModule {\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/CategoriesService.html":{"url":"injectables/CategoriesService.html","title":"injectable - CategoriesService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  CategoriesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/categories/categories.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Async\n                                _checkForCyclic\n                            \n                            \n                                    Private\n                                _getCategoryById\n                            \n                            \n                                    Async\n                                createCategory\n                            \n                            \n                                    Async\n                                deleteCategory\n                            \n                            \n                                getCategories\n                            \n                            \n                                    Async\n                                getCategoryById\n                            \n                            \n                                    Async\n                                updateCategory\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(categoryRepository: CategoryRepository, mediaService: MediaService)\n                    \n                \n                        \n                            \n                                Defined in src/categories/categories.service.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        categoryRepository\n                                                  \n                                                        \n                                                                        CategoryRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        mediaService\n                                                  \n                                                        \n                                                                        MediaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            Async\n                            _checkForCyclic\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    _checkForCyclic(id: uuid, parentCategoryId: uuid, user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/categories/categories.service.ts:109\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                            uuid\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    parentCategoryId\n                                    \n                                            uuid\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            _getCategoryById\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    _getCategoryById(id: uuid, user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/categories/categories.service.ts:105\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                            uuid\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            createCategory\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createCategory(createCategoryDto: CreateCategoryDto, user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/categories/categories.service.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createCategoryDto\n                                    \n                                                CreateCategoryDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            deleteCategory\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteCategory(id: uuid, user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/categories/categories.service.ts:93\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                            uuid\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getCategories\n                        \n                        \n                    \n                \n            \n            \n                \ngetCategories(filterDto: GetCategoriesFilterDto, user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/categories/categories.service.ts:23\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    filterDto\n                                    \n                                                GetCategoriesFilterDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getCategoryById\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getCategoryById(id: uuid, user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/categories/categories.service.ts:27\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                            uuid\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            updateCategory\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateCategory(id: uuid, updateCategoryDto: UpdateCategoryDto, user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/categories/categories.service.ts:53\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                            uuid\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateCategoryDto\n                                    \n                                                UpdateCategoryDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Readonly\n                            logger\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new Logger()\n                        \n                    \n                        \n                            \n                                    Defined in src/categories/categories.service.ts:14\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import { BadRequestException, Injectable, Logger, NotFoundException } from '@nestjs/common'\nimport { CategoryRepository } from './category.repository'\nimport { InjectRepository } from '@nestjs/typeorm'\nimport { Category } from './category.entity'\nimport { CreateCategoryDto } from './dto/create-category.dto'\nimport { GetCategoriesFilterDto } from './dto/get-categories-filter.dto'\nimport { User } from '../user/user.entity'\nimport uuid from 'uuid'\nimport { UpdateCategoryDto } from './dto/update-category.dto'\nimport { MediaService } from '../media/media.service'\n\n@Injectable()\nexport class CategoriesService {\n  private readonly logger = new Logger()\n\n  constructor(\n    @InjectRepository(CategoryRepository)\n    private readonly categoryRepository: CategoryRepository,\n    private readonly mediaService: MediaService,\n  ) {\n  }\n\n  getCategories(filterDto: GetCategoriesFilterDto, user: User): Promise {\n    return this.categoryRepository.getCategories(filterDto, user)\n  }\n\n  async getCategoryById(id: uuid, user: User): Promise {\n    const result = await this._getCategoryById(id, user)\n    if (!result) {\n      throw new NotFoundException(`Category with ID \"${id}\" not found.`)\n    } else {\n      return result\n    }\n  }\n\n  async createCategory(createCategoryDto: CreateCategoryDto, user: User): Promise {\n    try {\n      // those calls are done to ensure that the parentCategory and/or media provided belongs to the user\n      // TODO: replace this to do only one db call\n      if (createCategoryDto.imageId) {\n        await this.mediaService.getMediaById(createCategoryDto.imageId, user)\n      }\n      if (createCategoryDto.parentCategoryId) {\n        await this.getCategoryById(createCategoryDto.parentCategoryId, user)\n      }\n    } catch (e) {\n      this.logger.warn(`createCategory: mediaId or parentCategoryId from other user`, e)\n      throw new BadRequestException('Invalid mediaId or parentCategoryId provided.')\n    }\n    return this.categoryRepository.createCategory(createCategoryDto, user)\n  }\n\n  async updateCategory(id: uuid, updateCategoryDto: UpdateCategoryDto, user: User): Promise {\n    const category = await this.getCategoryById(id, user)\n\n    // because categoryRepository.updateCategory modifies the object ...\n    const previousImageId = category.imageId\n\n    if (Object.entries(updateCategoryDto).length === 0) {\n      return category\n    }\n    try {\n      // those calls are done to ensure that the parentCategory and/or media provided belongs to the user\n      // TODO: replace this to do only one db call\n      if (updateCategoryDto.imageId) {\n        await this.mediaService.getMediaById(updateCategoryDto.imageId, user)\n      }\n      if (updateCategoryDto.parentCategoryId) {\n        await this.getCategoryById(updateCategoryDto.parentCategoryId, user)\n      }\n    } catch (e) {\n      this.logger.warn(`updateCategory: mediaId or parentCategoryId from other user`, e)\n      throw new BadRequestException('Invalid mediaId or parentCategoryId provided.')\n    }\n    await this._checkForCyclic(id, updateCategoryDto.parentCategoryId, user)\n    // TODO: we need to check if the updateCategoryDto fields are owned by the current user\n    const updatedCategory = await this.categoryRepository.updateCategory(category, updateCategoryDto)\n\n    if (\n      previousImageId\n      && updateCategoryDto.hasOwnProperty('imageId')\n      && (updateCategoryDto.imageId === null || updateCategoryDto.imageId !== previousImageId)\n    ) {\n      try {\n        await this.mediaService.deleteMedia(previousImageId, user)\n      } catch (e) {\n        this.logger.error(`Category successfully updated but media withh ID ${previousImageId} could not be deleted.`)\n      }\n    }\n    return updatedCategory\n  }\n\n  async deleteCategory(id: uuid, user: User): Promise {\n    const { imageId } = await this.getCategoryById(id, user)\n    await this.categoryRepository.deleteCategory(id, user)\n    if (imageId) {\n      try {\n        await this.mediaService.deleteMedia(imageId, user)\n      } catch (e) {\n        this.logger.error(`Category successfully deleted but media with ID \"${imageId}\" could not be deleted.`)\n      }\n    }\n  }\n\n  private _getCategoryById(id: uuid, user: User): Promise {\n    return this.categoryRepository.findOne({ where: { id, userId: user.id } })\n  }\n\n  private async _checkForCyclic(id: uuid, parentCategoryId: uuid, user: User): Promise {\n    if (!parentCategoryId) {\n      return\n    }\n    if (parentCategoryId === id) {\n      throw new BadRequestException('Circular reference caught when trying to set parentCategory.')\n    }\n    const parent = await this._getCategoryById(parentCategoryId, user)\n    if (!parent) {\n      this.logger.error(`Could not retrieve parent with ID \"${parentCategoryId}\".`)\n      return\n    } else {\n      return await this._checkForCyclic(id, parent.parentCategoryId, user)\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Category.html":{"url":"classes/Category.html","title":"class - Category","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Category\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/categories/category.entity.ts\n        \n\n\n            \n                Extends\n            \n            \n                    BaseEntity\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                childrenCategories\n                            \n                            \n                                creationDate\n                            \n                            \n                                description\n                            \n                            \n                                entries\n                            \n                            \n                                id\n                            \n                            \n                                image\n                            \n                            \n                                imageId\n                            \n                            \n                                modificationDate\n                            \n                            \n                                parentCategory\n                            \n                            \n                                parentCategoryId\n                            \n                            \n                                title\n                            \n                            \n                                user\n                            \n                            \n                                userForDefaultCategory\n                            \n                            \n                                userId\n                            \n                            \n                                version\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            childrenCategories\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Category[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @OneToMany(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/categories/category.entity.ts:77\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            creationDate\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @CreateDateColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/categories/category.entity.ts:43\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            description\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({length: 250, nullable: true, default: undefined})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/categories/category.entity.ts:30\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            entries\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Entry[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Exclude()@OneToMany(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/categories/category.entity.ts:66\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     uuid\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn('uuid')\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/categories/category.entity.ts:24\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            image\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Media\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Exclude()@OneToOne(undefined, undefined)@JoinColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/categories/category.entity.ts:58\n                            \n                        \n\n                \n                    \n                        Relations\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            imageId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     uuid\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({nullable: true, default: undefined})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/categories/category.entity.ts:33\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            modificationDate\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @UpdateDateColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/categories/category.entity.ts:46\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            parentCategory\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Category\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Exclude()@ManyToOne(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/categories/category.entity.ts:74\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            parentCategoryId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     uuid\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({nullable: true, default: undefined})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/categories/category.entity.ts:36\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            title\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({length: 20, nullable: false})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/categories/category.entity.ts:27\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            user\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         User\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Exclude()@ManyToOne(undefined, undefined, {onDelete: 'CASCADE'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/categories/category.entity.ts:70\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            userForDefaultCategory\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         User\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Exclude()@OneToOne(undefined, undefined, {onDelete: 'CASCADE'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/categories/category.entity.ts:62\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            userId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     uuid\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Exclude()@Column({nullable: false})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/categories/category.entity.ts:40\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            version\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @VersionColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/categories/category.entity.ts:49\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  BaseEntity,\n  Column,\n  CreateDateColumn,\n  Entity,\n  JoinColumn,\n  ManyToOne,\n  OneToMany,\n  OneToOne,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n  VersionColumn,\n} from 'typeorm'\nimport { User } from '../user/user.entity'\nimport { Entry } from '../entries/entry.entity'\nimport { Media } from '../media/media.entity'\nimport uuid from 'uuid'\nimport { Exclude } from 'class-transformer'\n\n@Entity()\nexport class Category extends BaseEntity {\n\n  @PrimaryGeneratedColumn('uuid')\n  id: uuid\n\n  @Column({ length: 20, nullable: false })\n  title: string\n\n  @Column({ length: 250, nullable: true, default: null })\n  description: string\n\n  @Column({ nullable: true, default: null })\n  imageId: uuid\n\n  @Column({ nullable: true, default: null })\n  parentCategoryId: uuid\n\n  @Exclude()\n  @Column({ nullable: false })\n  userId: uuid\n\n  @CreateDateColumn()\n  creationDate: string\n\n  @UpdateDateColumn()\n  modificationDate: string\n\n  @VersionColumn()\n  version: number\n\n  /**\n   * Relations\n   */\n\n  @Exclude()\n  @OneToOne(() => Media, media => media.user)\n  @JoinColumn()\n  image: Media\n\n  @Exclude()\n  @OneToOne(() => User, user => user.defaultCategory, { onDelete: 'CASCADE' })\n  userForDefaultCategory: User\n\n  @Exclude()\n  @OneToMany(() => Entry, entry => entry.category)\n  entries: Entry[]\n\n  @Exclude()\n  @ManyToOne(() => User, user => user.categories, { onDelete: 'CASCADE' })\n  user: User\n\n  @Exclude()\n  @ManyToOne(() => Category, category => category.childrenCategories)\n  parentCategory: Category\n\n  @OneToMany(() => Category, service => service.parentCategory)\n  childrenCategories: Category[]\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CategoryRepository.html":{"url":"classes/CategoryRepository.html","title":"class - CategoryRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CategoryRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/categories/category.repository.ts\n        \n\n\n            \n                Extends\n            \n            \n                    Repository\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createCategory\n                            \n                            \n                                    Async\n                                deleteCategory\n                            \n                            \n                                    Async\n                                getCategories\n                            \n                            \n                                    Async\n                                updateCategory\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            logger\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new Logger('CategoryRepository')\n                        \n                    \n                        \n                            \n                                    Defined in src/categories/category.repository.ts:14\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            createCategory\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createCategory(createCategoryDto: CreateCategoryDto, user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/categories/category.repository.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createCategoryDto\n                                    \n                                                CreateCategoryDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            deleteCategory\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteCategory(id: uuid, user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/categories/category.repository.ts:61\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                            uuid\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getCategories\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getCategories(filterDto: GetCategoriesFilterDto, user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/categories/category.repository.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    filterDto\n                                    \n                                                GetCategoriesFilterDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            updateCategory\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateCategory(category: Category, updateCategoryDto: UpdateCategoryDto)\n                \n            \n\n\n            \n                \n                    Defined in src/categories/category.repository.ts:49\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    category\n                                    \n                                                Category\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateCategoryDto\n                                    \n                                                UpdateCategoryDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { EntityRepository, Like, Repository } from 'typeorm'\nimport { Category } from './category.entity'\nimport { CreateCategoryDto } from './dto/create-category.dto'\nimport { GetCategoriesFilterDto } from './dto/get-categories-filter.dto'\nimport { User } from '../user/user.entity'\nimport { BadRequestException, InternalServerErrorException, Logger, NotFoundException } from '@nestjs/common'\nimport { UpdateCategoryDto } from './dto/update-category.dto'\nimport uuid from 'uuid'\n\nconst PG_FOREIGN_KEY_CONSTRAINT_VIOLATION = '23503'\n\n@EntityRepository(Category)\nexport class CategoryRepository extends Repository {\n  private logger = new Logger('CategoryRepository')\n\n  async getCategories(filterDto: GetCategoriesFilterDto, user: User): Promise {\n    const { search } = filterDto\n    const where = search ? [\n      {\n        title: Like(`%${search}%`),\n        userId: user.id,\n      },\n      {\n        description: Like(`%${search}%`),\n        userId: user.id,\n      },\n    ] : { userId: user.id }\n    try {\n      return await this.find({ where })\n    } catch (e) {\n      this.logger.error(`Failed to get categories for User \"${user.email}\". Filters: ${JSON.stringify(filterDto)}`, e.stack)\n      throw new InternalServerErrorException()\n    }\n  }\n\n  async createCategory(createCategoryDto: CreateCategoryDto, user: User): Promise {\n    const category = Object.assign(new Category(), createCategoryDto, { user })\n    try {\n      return await category.save()\n    } catch (e) {\n      this.logger.error(`Failed to create category for User \"${user.email}\". Data: ${JSON.stringify(createCategoryDto)}`, e.stack)\n      if (e.code === PG_FOREIGN_KEY_CONSTRAINT_VIOLATION) {\n        throw new BadRequestException('Invalid mediaId or parentCategoryId provided.')\n      }\n      throw new InternalServerErrorException()\n    }\n  }\n\n  async updateCategory(category: Category, updateCategoryDto: UpdateCategoryDto): Promise {\n    const updatedCategory = Object.assign(category, updateCategoryDto)\n    try {\n      return await updatedCategory.save()\n    } catch (e) {\n      if (e.code === PG_FOREIGN_KEY_CONSTRAINT_VIOLATION) {\n        throw new BadRequestException(`Invalid mediaId or parentCategoryId provided for category with ID \"${category.id}\".`)\n      }\n      throw new InternalServerErrorException()\n    }\n  }\n\n  async deleteCategory(id: uuid, user: User): Promise {\n    let res\n    try {\n      res = await this.delete({ id, userId: user.id })\n    } catch (e) {\n      if (e.code === PG_FOREIGN_KEY_CONSTRAINT_VIOLATION) {\n        throw new BadRequestException(`Category with ID \"${id}\" is still referenced.`)\n      }\n      throw new InternalServerErrorException()\n    }\n    if (res.affected === 0) {\n      throw new NotFoundException(`Category with ID \"${id}\" not found.`)\n    }\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateCategoryDto.html":{"url":"classes/CreateCategoryDto.html","title":"class - CreateCategoryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateCategoryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/categories/dto/create-category.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                description\n                            \n                            \n                                    Optional\n                                imageId\n                            \n                            \n                                    Optional\n                                parentCategoryId\n                            \n                            \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            description\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelPropertyOptional()@Transform(undefined)@IsOptional()@IsString()@MaxLength(250)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/categories/dto/create-category.dto.ts:19\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            imageId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     uuid\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelPropertyOptional({type: String})@Transform(undefined)@IsOptional()@IsUUID()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/categories/dto/create-category.dto.ts:25\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            parentCategoryId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     uuid\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelPropertyOptional({type: String})@Transform(undefined)@IsOptional()@IsUUID()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/categories/dto/create-category.dto.ts:31\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            title\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelProperty()@IsNotEmpty()@IsString()@MaxLength(25)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/categories/dto/create-category.dto.ts:12\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsOptional, IsString, IsUUID, MaxLength } from 'class-validator'\nimport uuid from 'uuid'\nimport { Transform } from 'class-transformer'\nimport { ApiModelProperty, ApiModelPropertyOptional } from '@nestjs/swagger'\n\nexport class CreateCategoryDto {\n\n  @ApiModelProperty()\n  @IsNotEmpty()\n  @IsString()\n  @MaxLength(25)\n  title: string\n\n  @ApiModelPropertyOptional()\n  @Transform(description => description || null)\n  @IsOptional()\n  @IsString()\n  @MaxLength(250)\n  description?: string\n\n  @ApiModelPropertyOptional({ type: String })\n  @Transform(imageId => imageId || null)\n  @IsOptional()\n  @IsUUID()\n  imageId?: uuid\n\n  @ApiModelPropertyOptional({ type: String })\n  @Transform(categoryId => categoryId || null)\n  @IsOptional()\n  @IsUUID()\n  parentCategoryId?: uuid\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateEntryDto.html":{"url":"classes/CreateEntryDto.html","title":"class - CreateEntryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateEntryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/entries/dto/create-entry.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                amount\n                            \n                            \n                                    Optional\n                                categoryId\n                            \n                            \n                                    Optional\n                                date\n                            \n                            \n                                    Optional\n                                description\n                            \n                            \n                                    Optional\n                                imageId\n                            \n                            \n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            amount\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelProperty()@Transform(undefined)@IsNotEmpty()@IsNumber()@NotEquals(0)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entries/dto/create-entry.dto.ts:27\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            categoryId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     uuid\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelPropertyOptional({type: String})@Transform(undefined)@IsOptional()@IsUUID()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entries/dto/create-entry.dto.ts:46\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            date\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelPropertyOptional()@Transform(undefined)@IsOptional()@IsDateString()@MaxLength(250)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entries/dto/create-entry.dto.ts:34\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            description\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelPropertyOptional()@Transform(undefined)@IsOptional()@IsNotEmpty()@IsString()@MaxLength(250)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entries/dto/create-entry.dto.ts:20\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            imageId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     uuid\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelPropertyOptional({type: String})@Transform(undefined)@IsOptional()@IsUUID()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entries/dto/create-entry.dto.ts:40\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            title\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelProperty()@IsNotEmpty()@IsString()@MaxLength(25)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entries/dto/create-entry.dto.ts:12\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsDateString, IsNotEmpty, IsNumber, IsOptional, IsString, IsUUID, MaxLength, NotEquals } from 'class-validator'\nimport uuid from 'uuid'\nimport { Transform } from 'class-transformer'\nimport { ApiModelProperty, ApiModelPropertyOptional } from '@nestjs/swagger'\n\nexport class CreateEntryDto {\n\n  @ApiModelProperty()\n  @IsNotEmpty()\n  @IsString()\n  @MaxLength(25)\n  title: string\n\n  @ApiModelPropertyOptional()\n  @Transform(description => description || null)\n  @IsOptional()\n  @IsNotEmpty()\n  @IsString()\n  @MaxLength(250)\n  description?: string\n\n  @ApiModelProperty()\n  @Transform(amount => parseFloat(amount))\n  @IsNotEmpty()\n  @IsNumber()\n  @NotEquals(0)\n  amount: number\n\n  @ApiModelPropertyOptional()\n  @Transform(date => date || null)\n  @IsOptional()\n  @IsDateString()\n  @MaxLength(250)\n  date?: string\n\n  @ApiModelPropertyOptional({ type: String })\n  @Transform(imageId => imageId || null)\n  @IsOptional()\n  @IsUUID()\n  imageId?: uuid\n\n  @ApiModelPropertyOptional({ type: String })\n  @Transform(categoryId => categoryId || null)\n  @IsOptional()\n  @IsUUID()\n  categoryId?: uuid\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/CreateMediaDto.html":{"url":"classes/CreateMediaDto.html","title":"class - CreateMediaDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  CreateMediaDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/media/dto/create-media.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                description\n                            \n                            \n                                title\n                            \n                            \n                                    Optional\n                                type\n                            \n                            \n                                url\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            description\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelPropertyOptional()@IsOptional()@IsNotEmpty()@IsString()@MaxLength(250)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/media/dto/create-media.dto.ts:25\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            title\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelProperty()@IsNotEmpty()@IsString()@MaxLength(25)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/media/dto/create-media.dto.ts:11\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            type\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         MediaType\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelPropertyOptional({enum: undefined})@IsOptional()@IsIn(undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/media/dto/create-media.dto.ts:30\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            url\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelProperty()@IsNotEmpty()@IsString()@IsUrl()@MaxLength(2048)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/media/dto/create-media.dto.ts:18\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsIn, IsNotEmpty, IsOptional, IsString, IsUrl, MaxLength } from 'class-validator'\nimport { MediaType } from '../media-type.enum'\nimport { ApiModelProperty, ApiModelPropertyOptional } from '@nestjs/swagger'\n\nexport class CreateMediaDto {\n\n  @ApiModelProperty()\n  @IsNotEmpty()\n  @IsString()\n  @MaxLength(25)\n  title: string\n\n  @ApiModelProperty()\n  @IsNotEmpty()\n  @IsString()\n  @IsUrl()\n  @MaxLength(2048)\n  url: string\n\n  @ApiModelPropertyOptional()\n  @IsOptional()\n  @IsNotEmpty()\n  @IsString()\n  @MaxLength(250)\n  description?: string\n\n  @ApiModelPropertyOptional({ enum: ['IMAGE', 'VIDEO'] })\n  @IsOptional()\n  @IsIn(Object.values(MediaType))\n  type?: MediaType\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/EntriesController.html":{"url":"controllers/EntriesController.html","title":"controller - EntriesController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  EntriesController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/entries/entries.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                entries\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createEntry\n                            \n                            \n                                deleteEntry\n                            \n                            \n                                getEntries\n                            \n                            \n                                getEntryById\n                            \n                            \n                                updateEntry\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            createEntry\n                        \n                        \n                    \n                \n            \n            \n                \ncreateEntry(createEntryDto: CreateEntryDto, user: User)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@UsePipes(new ValidationPipe())\n                \n            \n\n            \n                \n                    Defined in src/entries/entries.controller.ts:59\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createEntryDto\n                                    \n                                                CreateEntryDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            deleteEntry\n                        \n                        \n                    \n                \n            \n            \n                \ndeleteEntry(id: uuid, user: User)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/:id')\n                \n            \n\n            \n                \n                    Defined in src/entries/entries.controller.ts:78\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                            uuid\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getEntries\n                        \n                        \n                    \n                \n            \n            \n                \ngetEntries(filterDto: GetEntriesFilterDto, user: User)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/entries/entries.controller.ts:41\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    filterDto\n                                    \n                                                GetEntriesFilterDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getEntryById\n                        \n                        \n                    \n                \n            \n            \n                \ngetEntryById(id: uuid, user: User)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:id')\n                \n            \n\n            \n                \n                    Defined in src/entries/entries.controller.ts:50\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                            uuid\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            updateEntry\n                        \n                        \n                    \n                \n            \n            \n                \nupdateEntry(id: uuid, updateEntryDto: UpdateEntryDto, user: User)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('/:id')@UsePipes(new ValidationPipe())\n                \n            \n\n            \n                \n                    Defined in src/entries/entries.controller.ts:69\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                            uuid\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateEntryDto\n                                    \n                                                UpdateEntryDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  ClassSerializerInterceptor,\n  Controller,\n  Delete,\n  Get,\n  Logger,\n  Param,\n  ParseUUIDPipe,\n  Patch,\n  Post,\n  Query,\n  UseGuards,\n  UseInterceptors,\n  UsePipes,\n  ValidationPipe,\n} from '@nestjs/common'\nimport { EntriesService } from './entries.service'\nimport { CreateEntryDto } from './dto/create-entry.dto'\nimport { GetEntriesFilterDto } from './dto/get-entries-filter.dto'\nimport { Entry } from './entry.entity'\nimport { AuthGuard } from '@nestjs/passport'\nimport { User } from '../user/user.entity'\nimport { GetUser } from '../user/get-user.decorator'\nimport uuid from 'uuid'\nimport { UpdateEntryDto } from './dto/update-entry.dto'\nimport { ApiBearerAuth, ApiUseTags } from '@nestjs/swagger'\n\n@ApiBearerAuth()\n@ApiUseTags('entries')\n@Controller('entries')\n@UseGuards(AuthGuard())\n@UseInterceptors(ClassSerializerInterceptor)\nexport class EntriesController {\n  private logger = new Logger('EntriesController')\n\n  constructor(private readonly entriesService: EntriesService) {\n  }\n\n  @Get()\n  getEntries(\n    @Query(new ValidationPipe({ whitelist: true, transform: true })) filterDto: GetEntriesFilterDto,\n    @GetUser() user: User,\n  ): Promise {\n    this.logger.verbose(`User \"${user.email}\" retrieving all entries. Filters: ${JSON.stringify(filterDto)}`)\n    return this.entriesService.getEntries(filterDto, user)\n  }\n\n  @Get('/:id')\n  getEntryById(\n    @Param('id', new ParseUUIDPipe()) id: uuid,\n    @GetUser() user: User,\n  ): Promise {\n    return this.entriesService.getEntryById(id, user)\n  }\n\n  @Post()\n  @UsePipes(new ValidationPipe({ whitelist: true, transform: true }))\n  createEntry(\n    @Body() createEntryDto: CreateEntryDto,\n    @GetUser() user: User,\n  ): Promise {\n    this.logger.verbose(`User \"${user.email}\" creating a new entry. Data: ${JSON.stringify(createEntryDto)}`)\n    return this.entriesService.createEntry(createEntryDto, user)\n  }\n\n  @Patch('/:id')\n  @UsePipes(new ValidationPipe({ whitelist: true, transform: true }))\n  updateEntry(\n    @Param('id', new ParseUUIDPipe()) id: uuid,\n    @Body() updateEntryDto: UpdateEntryDto,\n    @GetUser() user: User,\n  ): Promise {\n    return this.entriesService.updateEntry(id, updateEntryDto, user)\n  }\n\n  @Delete('/:id')\n  deleteEntry(\n    @Param('id', new ParseUUIDPipe()) id: uuid,\n    @GetUser() user: User,\n  ): Promise {\n    return this.entriesService.deleteEntry(id, user)\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/EntriesModule.html":{"url":"modules/EntriesModule.html","title":"module - EntriesModule","body":"\n                   \n\n\n\n\n    Modules\n    EntriesModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_EntriesModule\n\n\n\ncluster_EntriesModule_imports\n\n\n\ncluster_EntriesModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nEntriesModule\n\nEntriesModule\n\nEntriesModule -->\n\nAuthModule->EntriesModule\n\n\n\n\n\nCategoriesModule\n\nCategoriesModule\n\nEntriesModule -->\n\nCategoriesModule->EntriesModule\n\n\n\n\n\nMediaModule\n\nMediaModule\n\nEntriesModule -->\n\nMediaModule->EntriesModule\n\n\n\n\n\nEntriesService\n\nEntriesService\n\nEntriesModule -->\n\nEntriesService->EntriesModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/entries/entries.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            EntriesService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            EntriesController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            AuthModule\n                        \n                        \n                            CategoriesModule\n                        \n                        \n                            MediaModule\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { Module } from '@nestjs/common'\nimport { EntriesController } from './entries.controller'\nimport { EntriesService } from './entries.service'\nimport { TypeOrmModule } from '@nestjs/typeorm'\nimport { EntryRepository } from './entry.repository'\nimport { AuthModule } from '../auth/auth.module'\nimport { MediaModule } from '../media/media.module'\nimport { CategoriesModule } from '../categories/categories.module'\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([EntryRepository]),\n    AuthModule,\n    MediaModule,\n    CategoriesModule,\n  ],\n  controllers: [EntriesController],\n  providers: [EntriesService],\n})\nexport class EntriesModule {\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/EntriesService.html":{"url":"injectables/EntriesService.html","title":"injectable - EntriesService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  EntriesService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/entries/entries.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createEntry\n                            \n                            \n                                    Async\n                                deleteEntry\n                            \n                            \n                                getEntries\n                            \n                            \n                                    Async\n                                getEntryById\n                            \n                            \n                                    Async\n                                updateEntry\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(entryRepository: EntryRepository, mediaService: MediaService, categoriesService: CategoriesService)\n                    \n                \n                        \n                            \n                                Defined in src/entries/entries.service.ts:15\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        entryRepository\n                                                  \n                                                        \n                                                                        EntryRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        mediaService\n                                                  \n                                                        \n                                                                        MediaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        categoriesService\n                                                  \n                                                        \n                                                                        CategoriesService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            createEntry\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createEntry(createEntryDto: CreateEntryDto, user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/entries/entries.service.ts:38\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createEntryDto\n                                    \n                                                CreateEntryDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            deleteEntry\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteEntry(id: uuid, user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/entries/entries.service.ts:94\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                            uuid\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getEntries\n                        \n                        \n                    \n                \n            \n            \n                \ngetEntries(filterDto: GetEntriesFilterDto, user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/entries/entries.service.ts:25\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    filterDto\n                                    \n                                                GetEntriesFilterDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getEntryById\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getEntryById(id: uuid, user)\n                \n            \n\n\n            \n                \n                    Defined in src/entries/entries.service.ts:29\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                            uuid\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            updateEntry\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateEntry(id: uuid, updateEntryDto: UpdateEntryDto, user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/entries/entries.service.ts:55\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                            uuid\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateEntryDto\n                                    \n                                                UpdateEntryDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Readonly\n                            logger\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new Logger()\n                        \n                    \n                        \n                            \n                                    Defined in src/entries/entries.service.ts:15\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import { BadRequestException, Injectable, Logger, NotFoundException } from '@nestjs/common'\nimport { EntryRepository } from './entry.repository'\nimport { InjectRepository } from '@nestjs/typeorm'\nimport { Entry } from './entry.entity'\nimport { CreateEntryDto } from './dto/create-entry.dto'\nimport { GetEntriesFilterDto } from './dto/get-entries-filter.dto'\nimport { User } from '../user/user.entity'\nimport uuid from 'uuid'\nimport { UpdateEntryDto } from './dto/update-entry.dto'\nimport { MediaService } from '../media/media.service'\nimport { CategoriesService } from '../categories/categories.service'\n\n@Injectable()\nexport class EntriesService {\n  private readonly logger = new Logger()\n\n  constructor(\n    @InjectRepository(EntryRepository)\n    private readonly entryRepository: EntryRepository,\n    private readonly mediaService: MediaService,\n    private readonly categoriesService: CategoriesService,\n  ) {\n  }\n\n  getEntries(filterDto: GetEntriesFilterDto, user: User): Promise {\n    return this.entryRepository.getEntries(filterDto, user)\n  }\n\n  async getEntryById(id: uuid, user): Promise {\n    const result = await this.entryRepository.findOne({ where: { id, userId: user.id } })\n    if (!result) {\n      throw new NotFoundException(`Entry with ID \"${id}\" not found.`)\n    } else {\n      return result\n    }\n  }\n\n  async createEntry(createEntryDto: CreateEntryDto, user: User): Promise {\n    try {\n      // those calls are done to ensure that the category and/or media provided belongs to the user\n      // TODO: replace this to do only one db call\n      if (createEntryDto.imageId) {\n        await this.mediaService.getMediaById(createEntryDto.imageId, user)\n      }\n      if (createEntryDto.categoryId) {\n        await this.categoriesService.getCategoryById(createEntryDto.categoryId, user)\n      }\n    } catch (e) {\n      this.logger.warn(`createEntry: mediaId or categoryId from other user`, e)\n      throw new BadRequestException('Invalid mediaId or categoryId provided.')\n    }\n    return this.entryRepository.createEntry(createEntryDto, user)\n  }\n\n  async updateEntry(id: uuid, updateEntryDto: UpdateEntryDto, user: User): Promise {\n    const entry = await this.getEntryById(id, user)\n\n    // because entryRepository.updateEntry modifies the object ...\n    const previousImageId = entry.imageId\n\n    if (Object.entries(updateEntryDto).length === 0) {\n      return entry\n    }\n    try {\n      // those calls are done to ensure that the category and/or media provided belongs to the user\n      // TODO: replace this to do only one db call\n      if (updateEntryDto.imageId) {\n        await this.mediaService.getMediaById(updateEntryDto.imageId, user)\n      }\n      if (updateEntryDto.categoryId) {\n        await this.categoriesService.getCategoryById(updateEntryDto.categoryId, user)\n      }\n    } catch (e) {\n      this.logger.warn(`updateEntry: mediaId or categoryId from other user`, e)\n      throw new BadRequestException('Invalid mediaId or categoryId provided.')\n    }\n\n    const updatedEntry = await this.entryRepository.updateEntry(entry, updateEntryDto)\n\n    if (\n      previousImageId\n      && updateEntryDto.hasOwnProperty('imageId')\n      && (updateEntryDto.imageId === null || updateEntryDto.imageId !== previousImageId)\n    ) {\n      try {\n        await this.mediaService.deleteMedia(previousImageId, user)\n      } catch (e) {\n        this.logger.error(`Entry successfully updated but media with id ${previousImageId} could not be deleted.`)\n      }\n    }\n    return updatedEntry\n  }\n\n  async deleteEntry(id: uuid, user: User): Promise {\n    const { imageId } = await this.getEntryById(id, user)\n    const res = await this.entryRepository.delete({ id, userId: user.id })\n\n    if (res.affected === 0) {\n      throw new NotFoundException(`Entry with ID \"${id}\" not found.`)\n    }\n    if (imageId) {\n      try {\n        await this.mediaService.deleteMedia(imageId, user)\n      } catch (e) {\n        this.logger.error(`Entry successfully deleted but media with id ${imageId} could not be deleted.`)\n      }\n    }\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Entry.html":{"url":"classes/Entry.html","title":"class - Entry","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Entry\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/entries/entry.entity.ts\n        \n\n\n            \n                Extends\n            \n            \n                    BaseEntity\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                amount\n                            \n                            \n                                category\n                            \n                            \n                                categoryId\n                            \n                            \n                                creationDate\n                            \n                            \n                                date\n                            \n                            \n                                description\n                            \n                            \n                                id\n                            \n                            \n                                image\n                            \n                            \n                                imageId\n                            \n                            \n                                modificationDate\n                            \n                            \n                                title\n                            \n                            \n                                user\n                            \n                            \n                                userId\n                            \n                            \n                                version\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            amount\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Transform(undefined)@Column('decimal', {nullable: false})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entries/entry.entity.ts:33\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            category\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Category\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Exclude()@ManyToOne(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entries/entry.entity.ts:68\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            categoryId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     uuid\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({nullable: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entries/entry.entity.ts:36\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            creationDate\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @CreateDateColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entries/entry.entity.ts:49\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            date\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({nullable: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entries/entry.entity.ts:39\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            description\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({length: 250, nullable: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entries/entry.entity.ts:29\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     uuid\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn('uuid')\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entries/entry.entity.ts:23\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            image\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Media\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Exclude()@OneToOne(undefined, undefined)@JoinColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entries/entry.entity.ts:64\n                            \n                        \n\n                \n                    \n                        Relations\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            imageId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     uuid\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({nullable: true})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entries/entry.entity.ts:42\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            modificationDate\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @UpdateDateColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entries/entry.entity.ts:52\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            title\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({length: 20, nullable: false})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entries/entry.entity.ts:26\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            user\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         User\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Exclude()@ManyToOne(undefined, undefined, {onDelete: 'CASCADE'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entries/entry.entity.ts:72\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            userId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     uuid\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Exclude()@Column({nullable: false})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entries/entry.entity.ts:46\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            version\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @VersionColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entries/entry.entity.ts:55\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import {\n  BaseEntity,\n  Column,\n  CreateDateColumn,\n  Entity,\n  JoinColumn,\n  ManyToOne,\n  OneToOne,\n  PrimaryGeneratedColumn,\n  UpdateDateColumn,\n  VersionColumn,\n} from 'typeorm'\nimport { User } from '../user/user.entity'\nimport { Category } from '../categories/category.entity'\nimport { Media } from '../media/media.entity'\nimport uuid from 'uuid'\nimport { Exclude, Transform } from 'class-transformer'\n\n@Entity()\nexport class Entry extends BaseEntity {\n\n  @PrimaryGeneratedColumn('uuid')\n  id: uuid\n\n  @Column({ length: 20, nullable: false })\n  title: string\n\n  @Column({ length: 250, nullable: true })\n  description: string\n\n  @Transform(amount => parseFloat(amount))\n  @Column('decimal', { nullable: false })\n  amount: number\n\n  @Column({ nullable: true })\n  categoryId: uuid\n\n  @Column({ nullable: true })\n  date: string\n\n  @Column({ nullable: true })\n  imageId: uuid\n\n  @Exclude()\n  @Column({ nullable: false })\n  userId: uuid\n\n  @CreateDateColumn()\n  creationDate: string\n\n  @UpdateDateColumn()\n  modificationDate: string\n\n  @VersionColumn()\n  version: number\n\n  /**\n   * Relations\n   */\n\n  @Exclude()\n  @OneToOne(() => Media, media => media.entry)\n  @JoinColumn()\n  image: Media\n\n  @Exclude()\n  @ManyToOne(() => Category, category => category.entries)\n  category: Category\n\n  @Exclude()\n  @ManyToOne(() => User, user => user.entries, { onDelete: 'CASCADE' })\n  user: User\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/EntryRepository.html":{"url":"classes/EntryRepository.html","title":"class - EntryRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  EntryRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/entries/entry.repository.ts\n        \n\n\n            \n                Extends\n            \n            \n                    Repository\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                createEntry\n                            \n                            \n                                    Async\n                                getEntries\n                            \n                            \n                                    Async\n                                updateEntry\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                            logger\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new Logger('EntryRepository')\n                        \n                    \n                        \n                            \n                                    Defined in src/entries/entry.repository.ts:14\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            createEntry\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    createEntry(createEntryDto: CreateEntryDto, user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/entries/entry.repository.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createEntryDto\n                                    \n                                                CreateEntryDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getEntries\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getEntries(filterDto: GetEntriesFilterDto, user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/entries/entry.repository.ts:16\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    filterDto\n                                    \n                                                GetEntriesFilterDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            updateEntry\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateEntry(entry: Entry, updateEntryDto: UpdateEntryDto)\n                \n            \n\n\n            \n                \n                    Defined in src/entries/entry.repository.ts:51\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    entry\n                                    \n                                                Entry\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateEntryDto\n                                    \n                                                UpdateEntryDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     {}\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { EntityRepository, Like, Repository } from 'typeorm'\nimport { Entry } from './entry.entity'\nimport { CreateEntryDto } from './dto/create-entry.dto'\nimport { GetEntriesFilterDto } from './dto/get-entries-filter.dto'\nimport { User } from '../user/user.entity'\nimport { BadRequestException, InternalServerErrorException, Logger } from '@nestjs/common'\nimport { UpdateEntryDto } from './dto/update-entry.dto'\n\nconst PG_UNIQUE_CONSTRAINT_VIOLATION = '23505'\nconst PG_FOREIGN_KEY_CONSTRAINT_VIOLATION = '23503'\n\n@EntityRepository(Entry)\nexport class EntryRepository extends Repository {\n  private logger = new Logger('EntryRepository')\n\n  async getEntries(filterDto: GetEntriesFilterDto, user: User): Promise {\n    const { search } = filterDto\n    try {\n      const where = search ? [\n        {\n          title: Like(`%${search}%`),\n          userId: user.id,\n        },\n        {\n          description: Like(`%${search}%`),\n          userId: user.id,\n        },\n      ] : { userId: user.id }\n      return await this.find({ where })\n    } catch (e) {\n      this.logger.error(`Failed to get entries for User \"${user.email}\". Filters: ${JSON.stringify(filterDto)}`, e.stack)\n      throw new InternalServerErrorException()\n    }\n  }\n\n  async createEntry(createEntryDto: CreateEntryDto, user: User): Promise {\n    const entry = Object.assign(new Entry(), createEntryDto, { user })\n    try {\n      return await entry.save()\n    } catch (e) {\n      this.logger.error(`Failed to create entry for User \"${user.email}\". Data: ${JSON.stringify(createEntryDto)}`, e.stack)\n      if (e.code === PG_FOREIGN_KEY_CONSTRAINT_VIOLATION) {\n        throw new BadRequestException('Invalid mediaId or categoryId provided.')\n      } else if (e.code === PG_UNIQUE_CONSTRAINT_VIOLATION) {\n        throw new BadRequestException(`Media with ID \"${entry.id}\" is already linked with another entity.`)\n      }\n      throw new InternalServerErrorException()\n    }\n  }\n\n  async updateEntry(entry: Entry, updateEntryDto: UpdateEntryDto) {\n    const updatedEntry = Object.assign(entry, updateEntryDto)\n    try {\n      return await updatedEntry.save()\n    } catch (e) {\n      if (e.code === PG_FOREIGN_KEY_CONSTRAINT_VIOLATION) {\n        throw new BadRequestException(`Invalid mediaId or categoryId provided for category with ID \"${entry.id}\".`)\n      } else if (e.code === PG_UNIQUE_CONSTRAINT_VIOLATION) {\n        throw new BadRequestException(`Media with ID \"${entry.id}\" is already linked with another entity.`)\n      }\n      throw new InternalServerErrorException()\n    }\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetCategoriesFilterDto.html":{"url":"classes/GetCategoriesFilterDto.html","title":"class - GetCategoriesFilterDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetCategoriesFilterDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/categories/dto/get-categories-filter.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                search\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            search\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelPropertyOptional()@IsOptional()@IsNotEmpty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/categories/dto/get-categories-filter.dto.ts:9\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsOptional } from 'class-validator'\nimport { ApiModelPropertyOptional } from '@nestjs/swagger'\n\nexport class GetCategoriesFilterDto {\n\n  @ApiModelPropertyOptional()\n  @IsOptional()\n  @IsNotEmpty()\n  search?: string\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/GetEntriesFilterDto.html":{"url":"classes/GetEntriesFilterDto.html","title":"class - GetEntriesFilterDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  GetEntriesFilterDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/entries/dto/get-entries-filter.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                search\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            search\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelPropertyOptional()@IsOptional()@IsNotEmpty()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entries/dto/get-entries-filter.dto.ts:9\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsOptional } from 'class-validator'\nimport { ApiModelPropertyOptional } from '@nestjs/swagger'\n\nexport class GetEntriesFilterDto {\n\n  @ApiModelPropertyOptional()\n  @IsOptional()\n  @IsNotEmpty()\n  search?: string\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"interfaces/JwtPayload.html":{"url":"interfaces/JwtPayload.html","title":"interface - JwtPayload","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n  Interfaces\n  JwtPayload\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/interfaces/jwt-payload.interface.ts\n        \n\n\n\n        \n            Index\n            \n                \n                    \n                        \n                            Properties\n                        \n                    \n                    \n                        \n                            \n                                \n                                        email\n                                \n                            \n                        \n                    \n                \n            \n        \n\n\n\n            \n                Properties\n                    \n                        \n                                \n                                    \n                                        \n                                        email\n                                    \n                                \n                                \n                                    \n                                        email:         string\n\n                                    \n                                \n\n\n                                    \n                                        \n                                            Type :         string\n\n                                        \n                                    \n\n\n\n\n\n                        \n                    \n            \n    \n\n\n    \n        export interface JwtPayload {\n  email: string\n}\n\n    \n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/JwtStrategy.html":{"url":"injectables/JwtStrategy.html","title":"injectable - JwtStrategy","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  JwtStrategy\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/jwt.strategy.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                validate\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(usersService: UsersService)\n                    \n                \n                        \n                            \n                                Defined in src/auth/jwt.strategy.ts:10\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        usersService\n                                                  \n                                                        \n                                                                        UsersService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            validate\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validate(payload: JwtPayload)\n                \n            \n\n\n            \n                \n                    Defined in src/auth/jwt.strategy.ts:20\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    payload\n                                    \n                                                JwtPayload\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { PassportStrategy } from '@nestjs/passport'\nimport { ExtractJwt, Strategy } from 'passport-jwt'\nimport { Injectable, UnauthorizedException } from '@nestjs/common'\nimport { JwtPayload } from './interfaces/jwt-payload.interface'\nimport { User } from '../user/user.entity'\nimport * as config from 'config'\nimport { UsersService } from '../user/users.service'\n\n@Injectable()\nexport class JwtStrategy extends PassportStrategy(Strategy) {\n  constructor(\n    private readonly usersService: UsersService,\n  ) {\n    super({\n      jwtFromRequest: ExtractJwt.fromAuthHeaderAsBearerToken(),\n      secretOrKey: process.env.JWT_SECRET || config.get('jwt.secret'),\n    })\n  }\n\n  async validate(payload: JwtPayload): Promise {\n    const { email } = payload\n    const user = await this.usersService.findOne(email)\n    if (!user) {\n      throw new UnauthorizedException()\n    }\n    return user\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/Media.html":{"url":"classes/Media.html","title":"class - Media","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  Media\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/media/media.entity.ts\n        \n\n\n            \n                Extends\n            \n            \n                    BaseEntity\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                category\n                            \n                            \n                                creationDate\n                            \n                            \n                                description\n                            \n                            \n                                entry\n                            \n                            \n                                id\n                            \n                            \n                                modificationDate\n                            \n                            \n                                title\n                            \n                            \n                                type\n                            \n                            \n                                url\n                            \n                            \n                                user\n                            \n                            \n                                userForPicture\n                            \n                            \n                                userId\n                            \n                            \n                                version\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            category\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Category\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Exclude()@OneToOne(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/media/media.entity.ts:62\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            creationDate\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @CreateDateColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/media/media.entity.ts:36\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            description\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({length: 250, nullable: true, default: undefined})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/media/media.entity.ts:19\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            entry\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Entry\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Exclude()@OneToOne(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/media/media.entity.ts:58\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     uuid\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn('uuid')\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/media/media.entity.ts:13\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            modificationDate\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @UpdateDateColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/media/media.entity.ts:39\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            title\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({length: 25, nullable: false})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/media/media.entity.ts:16\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            type\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         MediaType\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'enum', enum: MediaType, default: undefined})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/media/media.entity.ts:29\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            url\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({length: 2048, nullable: false})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/media/media.entity.ts:22\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            user\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         User\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Exclude()@ManyToOne(undefined, undefined, {onDelete: 'CASCADE'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/media/media.entity.ts:50\n                            \n                        \n\n                \n                    \n                        Relations\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            userForPicture\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         User\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Exclude()@OneToOne(undefined, undefined, {onDelete: 'CASCADE'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/media/media.entity.ts:54\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            userId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     uuid\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Exclude()@Column({nullable: false})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/media/media.entity.ts:33\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            version\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @VersionColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/media/media.entity.ts:42\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { BaseEntity, Column, CreateDateColumn, Entity, ManyToOne, OneToOne, PrimaryGeneratedColumn, UpdateDateColumn, VersionColumn } from 'typeorm'\nimport { User } from '../user/user.entity'\nimport { Entry } from '../entries/entry.entity'\nimport { Category } from '../categories/category.entity'\nimport { MediaType } from './media-type.enum'\nimport uuid from 'uuid'\nimport { Exclude } from 'class-transformer'\n\n@Entity()\nexport class Media extends BaseEntity {\n\n  @PrimaryGeneratedColumn('uuid')\n  id: uuid\n\n  @Column({ length: 25, nullable: false })\n  title: string\n\n  @Column({ length: 250, nullable: true, default: null })\n  description: string\n\n  @Column({ length: 2048, nullable: false })\n  url: string\n\n  @Column({\n    type: 'enum',\n    enum: MediaType,\n    default: MediaType.IMAGE,\n  })\n  type: MediaType\n\n  @Exclude()\n  @Column({ nullable: false })\n  userId: uuid\n\n  @CreateDateColumn()\n  creationDate: string\n\n  @UpdateDateColumn()\n  modificationDate: string\n\n  @VersionColumn()\n  version: number\n\n  /**\n   * Relations\n   */\n\n  @Exclude()\n  @ManyToOne(() => User, user => user.media, { onDelete: 'CASCADE' })\n  user: User\n\n  @Exclude()\n  @OneToOne(() => User, user => user.picture, { onDelete: 'CASCADE' })\n  userForPicture: User\n\n  @Exclude()\n  @OneToOne(() => Entry, entry => entry.image)\n  entry: Entry\n\n  @Exclude()\n  @OneToOne(() => Category, category => category.image)\n  category: Category\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/MediaController.html":{"url":"controllers/MediaController.html","title":"controller - MediaController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  MediaController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/media/media.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                media\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createMedia\n                            \n                            \n                                deleteMedia\n                            \n                            \n                                getAllMedia\n                            \n                            \n                                getMediaById\n                            \n                            \n                                updateMedia\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            createMedia\n                        \n                        \n                    \n                \n            \n            \n                \ncreateMedia(createMediaDto: CreateMediaDto, user: User)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Post()@UsePipes(new ValidationPipe())\n                \n            \n\n            \n                \n                    Defined in src/media/media.controller.ts:54\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createMediaDto\n                                    \n                                                CreateMediaDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            deleteMedia\n                        \n                        \n                    \n                \n            \n            \n                \ndeleteMedia(id: uuid, user: User)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/:id')\n                \n            \n\n            \n                \n                    Defined in src/media/media.controller.ts:73\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                            uuid\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getAllMedia\n                        \n                        \n                    \n                \n            \n            \n                \ngetAllMedia(user: User)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get()\n                \n            \n\n            \n                \n                    Defined in src/media/media.controller.ts:39\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getMediaById\n                        \n                        \n                    \n                \n            \n            \n                \ngetMediaById(id: uuid, user: User)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/:id')\n                \n            \n\n            \n                \n                    Defined in src/media/media.controller.ts:45\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                            uuid\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            updateMedia\n                        \n                        \n                    \n                \n            \n            \n                \nupdateMedia(id: uuid, updateMediaDto: UpdateMediaDto, user: User)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('/:id')@UsePipes(new ValidationPipe())\n                \n            \n\n            \n                \n                    Defined in src/media/media.controller.ts:64\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                            uuid\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateMediaDto\n                                    \n                                                UpdateMediaDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  ClassSerializerInterceptor,\n  Controller,\n  Delete,\n  Get,\n  Logger,\n  Param,\n  ParseUUIDPipe,\n  Patch,\n  Post,\n  UseGuards,\n  UseInterceptors,\n  UsePipes,\n  ValidationPipe,\n} from '@nestjs/common'\nimport { MediaService } from './media.service'\nimport { CreateMediaDto } from './dto/create-media.dto'\nimport { Media } from './media.entity'\nimport { AuthGuard } from '@nestjs/passport'\nimport { User } from '../user/user.entity'\nimport { GetUser } from '../user/get-user.decorator'\nimport uuid from 'uuid'\nimport { UpdateMediaDto } from './dto/update-media.dto'\nimport { ApiBearerAuth, ApiUseTags } from '@nestjs/swagger'\n\n@ApiBearerAuth()\n@ApiUseTags('media')\n@Controller('media')\n@UseGuards(AuthGuard())\n@UseInterceptors(ClassSerializerInterceptor)\nexport class MediaController {\n  private logger = new Logger('MediaController')\n\n  constructor(private readonly mediaService: MediaService) {\n  }\n\n  @Get()\n  getAllMedia(@GetUser() user: User): Promise {\n    this.logger.verbose(`User \"${user.email}\" retrieving all media.`)\n    return this.mediaService.getAllMedia(user)\n  }\n\n  @Get('/:id')\n  getMediaById(\n    @Param('id', new ParseUUIDPipe()) id: uuid,\n    @GetUser() user: User,\n  ): Promise {\n    return this.mediaService.getMediaById(id, user)\n  }\n\n  @Post()\n  @UsePipes(new ValidationPipe({ whitelist: true, transform: true }))\n  createMedia(\n    @Body() createMediaDto: CreateMediaDto,\n    @GetUser() user: User,\n  ): Promise {\n    this.logger.verbose(`User \"${user.email}\" creating a new media. Data: ${JSON.stringify(createMediaDto)}`)\n    return this.mediaService.createMedia(createMediaDto, user)\n  }\n\n  @Patch('/:id')\n  @UsePipes(new ValidationPipe({ whitelist: true, transform: true }))\n  updateMedia(\n    @Param('id', new ParseUUIDPipe()) id: uuid,\n    @Body() updateMediaDto: UpdateMediaDto,\n    @GetUser() user: User,\n  ): Promise {\n    return this.mediaService.updateMedia(id, updateMediaDto, user)\n  }\n\n  @Delete('/:id')\n  deleteMedia(\n    @Param('id', new ParseUUIDPipe()) id: uuid,\n    @GetUser() user: User,\n  ): Promise {\n    return this.mediaService.deleteMedia(id, user)\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/MediaModule.html":{"url":"modules/MediaModule.html","title":"module - MediaModule","body":"\n                   \n\n\n\n\n    Modules\n    MediaModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_MediaModule\n\n\n\ncluster_MediaModule_exports\n\n\n\ncluster_MediaModule_providers\n\n\n\n\nMediaService \n\nMediaService \n\n\n\nMediaModule\n\nMediaModule\n\nMediaService  -->\n\nMediaModule->MediaService \n\n\n\n\n\nMediaService\n\nMediaService\n\nMediaModule -->\n\nMediaService->MediaModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/media/media.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            MediaService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            MediaController\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            MediaService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { forwardRef, Module } from '@nestjs/common'\nimport { MediaController } from './media.controller'\nimport { MediaService } from './media.service'\nimport { TypeOrmModule } from '@nestjs/typeorm'\nimport { AuthModule } from '../auth/auth.module'\nimport { MediaRepository } from './media.repository'\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([MediaRepository]),\n    forwardRef(() => AuthModule),\n  ],\n  controllers: [MediaController],\n  providers: [MediaService],\n  exports: [MediaService],\n})\nexport class MediaModule {\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/MediaRepository.html":{"url":"classes/MediaRepository.html","title":"class - MediaRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  MediaRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/media/media.repository.ts\n        \n\n\n            \n                Extends\n            \n            \n                    Repository\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                deleteMedia\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            deleteMedia\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteMedia(id: uuid, user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/media/media.repository.ts:12\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                            uuid\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { EntityRepository, Repository } from 'typeorm'\nimport { BadRequestException, InternalServerErrorException, NotFoundException } from '@nestjs/common'\nimport { Media } from './media.entity'\nimport { User } from '../user/user.entity'\nimport uuid from 'uuid'\n\nconst PG_FOREIGN_KEY_CONSTRAINT_VIOLATION = '23503'\n\n@EntityRepository(Media)\nexport class MediaRepository extends Repository {\n\n  async deleteMedia(id: uuid, user: User): Promise {\n    let res\n    try {\n      res = await this.delete({ id, userId: user.id })\n    } catch (e) {\n      if (e.code === PG_FOREIGN_KEY_CONSTRAINT_VIOLATION) {\n        throw new BadRequestException(`Media with ID \"${id}\" is still referenced.`)\n      }\n      throw new InternalServerErrorException()\n    }\n    if (res.affected === 0) {\n      throw new NotFoundException(`Media with ID \"${id}\" not found.`)\n    }\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/MediaService.html":{"url":"injectables/MediaService.html","title":"injectable - MediaService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  MediaService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/media/media.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                createMedia\n                            \n                            \n                                deleteMedia\n                            \n                            \n                                getAllMedia\n                            \n                            \n                                    Async\n                                getMediaById\n                            \n                            \n                                    Async\n                                updateMedia\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(mediaRepository: MediaRepository)\n                    \n                \n                        \n                            \n                                Defined in src/media/media.service.ts:11\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        mediaRepository\n                                                  \n                                                        \n                                                                        MediaRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            createMedia\n                        \n                        \n                    \n                \n            \n            \n                \ncreateMedia(createMediaDto: CreateMediaDto, user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/media/media.service.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    createMediaDto\n                                    \n                                                CreateMediaDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            deleteMedia\n                        \n                        \n                    \n                \n            \n            \n                \ndeleteMedia(id: uuid, user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/media/media.service.ts:45\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                            uuid\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getAllMedia\n                        \n                        \n                    \n                \n            \n            \n                \ngetAllMedia(user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/media/media.service.ts:18\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            getMediaById\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    getMediaById(id: uuid, user)\n                \n            \n\n\n            \n                \n                    Defined in src/media/media.service.ts:22\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                            uuid\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            updateMedia\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateMedia(id: uuid, updateMediaDto: UpdateMediaDto, user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/media/media.service.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                            uuid\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    updateMediaDto\n                                    \n                                                UpdateMediaDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n    \n\n\n    \n        import { Injectable, NotFoundException } from '@nestjs/common'\nimport { InjectRepository } from '@nestjs/typeorm'\nimport { Media } from './media.entity'\nimport { CreateMediaDto } from './dto/create-media.dto'\nimport { User } from '../user/user.entity'\nimport uuid from 'uuid'\nimport { MediaRepository } from './media.repository'\nimport { UpdateMediaDto } from './dto/update-media.dto'\n\n@Injectable()\nexport class MediaService {\n\n  constructor(\n    @InjectRepository(MediaRepository)\n    private readonly mediaRepository: MediaRepository) {\n  }\n\n  getAllMedia(user: User): Promise {\n    return this.mediaRepository.find({ where: { userId: user.id } })\n  }\n\n  async getMediaById(id: uuid, user): Promise {\n    const result = await this.mediaRepository.findOne({ where: { id, userId: user.id } })\n    if (!result) {\n      throw new NotFoundException(`Media with ID \"${id}\" not found.`)\n    } else {\n      return result\n    }\n  }\n\n  createMedia(createMediaDto: CreateMediaDto, user: User): Promise {\n    const newMedia = Object.assign(new Media(), createMediaDto, { user })\n    return newMedia.save()\n  }\n\n  async updateMedia(id: uuid, updateMediaDto: UpdateMediaDto, user: User): Promise {\n    const media = await this.getMediaById(id, user)\n    if (Object.entries(updateMediaDto).length === 0) {\n      return media\n    }\n    const updatedMedia = Object.assign(media, updateMediaDto)\n    return await updatedMedia.save()\n  }\n\n  deleteMedia(id: uuid, user: User): Promise {\n    return this.mediaRepository.deleteMedia(id, user)\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateCategoryDto.html":{"url":"classes/UpdateCategoryDto.html","title":"class - UpdateCategoryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateCategoryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/categories/dto/update-category.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                description\n                            \n                            \n                                    Optional\n                                imageId\n                            \n                            \n                                    Optional\n                                parentCategoryId\n                            \n                            \n                                    Optional\n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            description\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelPropertyOptional()@Transform(undefined)@IsOptional()@IsString()@MaxLength(250)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/categories/dto/update-category.dto.ts:20\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            imageId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     uuid\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelPropertyOptional({type: String})@Transform(undefined)@IsOptional()@IsUUID()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/categories/dto/update-category.dto.ts:26\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            parentCategoryId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     uuid\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelPropertyOptional({type: String})@Transform(undefined)@IsOptional()@IsUUID()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/categories/dto/update-category.dto.ts:32\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            title\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelPropertyOptional()@IsOptional()@IsNotEmpty()@IsString()@MaxLength(25)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/categories/dto/update-category.dto.ts:13\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsNotEmpty, IsOptional, IsString, IsUUID, MaxLength } from 'class-validator'\nimport uuid from 'uuid'\nimport { Transform } from 'class-transformer'\nimport { ApiModelPropertyOptional } from '@nestjs/swagger'\n\nexport class UpdateCategoryDto {\n\n  @ApiModelPropertyOptional()\n  @IsOptional()\n  @IsNotEmpty()\n  @IsString()\n  @MaxLength(25)\n  title?: string\n\n  @ApiModelPropertyOptional()\n  @Transform(description => description || null)\n  @IsOptional()\n  @IsString()\n  @MaxLength(250)\n  description?: string\n\n  @ApiModelPropertyOptional({ type: String })\n  @Transform(imageId => imageId || null)\n  @IsOptional()\n  @IsUUID()\n  imageId?: uuid\n\n  @ApiModelPropertyOptional({ type: String })\n  @Transform(parentCategoryId => parentCategoryId || null)\n  @IsOptional()\n  @IsUUID()\n  parentCategoryId?: uuid\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateEntryDto.html":{"url":"classes/UpdateEntryDto.html","title":"class - UpdateEntryDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateEntryDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/entries/dto/update-entry.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                amount\n                            \n                            \n                                    Optional\n                                categoryId\n                            \n                            \n                                    Optional\n                                date\n                            \n                            \n                                    Optional\n                                description\n                            \n                            \n                                    Optional\n                                imageId\n                            \n                            \n                                    Optional\n                                title\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            amount\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelPropertyOptional()@Transform(undefined)@IsOptional()@IsNotEmpty()@IsNumber()@NotEquals(0)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entries/dto/update-entry.dto.ts:29\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            categoryId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     uuid\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelPropertyOptional({type: String})@Transform(undefined)@IsOptional()@IsUUID()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entries/dto/update-entry.dto.ts:48\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            date\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelPropertyOptional()@Transform(undefined)@IsOptional()@IsDateString()@MaxLength(250)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entries/dto/update-entry.dto.ts:36\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            description\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelPropertyOptional()@Transform(undefined)@IsOptional()@IsNotEmpty()@IsString()@MaxLength(250)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entries/dto/update-entry.dto.ts:21\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            imageId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     uuid\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelPropertyOptional({type: String})@Transform(undefined)@IsOptional()@IsUUID()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entries/dto/update-entry.dto.ts:42\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            title\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelPropertyOptional()@IsOptional()@IsNotEmpty()@IsString()@MaxLength(25)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/entries/dto/update-entry.dto.ts:13\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsDateString, IsNotEmpty, IsNumber, IsOptional, IsString, IsUUID, MaxLength, NotEquals } from 'class-validator'\nimport uuid from 'uuid'\nimport { Transform } from 'class-transformer'\nimport { ApiModelPropertyOptional } from '@nestjs/swagger'\n\nexport class UpdateEntryDto {\n\n  @ApiModelPropertyOptional()\n  @IsOptional()\n  @IsNotEmpty()\n  @IsString()\n  @MaxLength(25)\n  title?: string\n\n  @ApiModelPropertyOptional()\n  @Transform(description => description || null)\n  @IsOptional()\n  @IsNotEmpty()\n  @IsString()\n  @MaxLength(250)\n  description?: string\n\n  @ApiModelPropertyOptional()\n  @Transform(amount => parseFloat(amount))\n  @IsOptional()\n  @IsNotEmpty()\n  @IsNumber()\n  @NotEquals(0)\n  amount?: number\n\n  @ApiModelPropertyOptional()\n  @Transform(date => date || null)\n  @IsOptional()\n  @IsDateString()\n  @MaxLength(250)\n  date?: string\n\n  @ApiModelPropertyOptional({ type: String })\n  @Transform(imageId => imageId || null)\n  @IsOptional()\n  @IsUUID()\n  imageId?: uuid\n\n  @ApiModelPropertyOptional({ type: String })\n  @Transform(categoryId => categoryId || null)\n  @IsOptional()\n  @IsUUID()\n  categoryId?: uuid\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateMediaDto.html":{"url":"classes/UpdateMediaDto.html","title":"class - UpdateMediaDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateMediaDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/media/dto/update-media.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                description\n                            \n                            \n                                    Optional\n                                title\n                            \n                            \n                                    Optional\n                                type\n                            \n                            \n                                    Optional\n                                url\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            description\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelPropertyOptional()@IsOptional()@IsNotEmpty()@IsString()@MaxLength(250)@Transform(undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/media/dto/update-media.dto.ts:29\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            title\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelPropertyOptional()@IsOptional()@IsNotEmpty()@IsString()@MaxLength(25)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/media/dto/update-media.dto.ts:13\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            type\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         MediaType\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelPropertyOptional({enum: undefined})@IsOptional()@IsIn(undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/media/dto/update-media.dto.ts:34\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            url\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelPropertyOptional()@IsOptional()@IsNotEmpty()@IsString()@IsUrl()@MaxLength(2048)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/media/dto/update-media.dto.ts:21\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsIn, IsNotEmpty, IsOptional, IsString, IsUrl, MaxLength } from 'class-validator'\nimport { MediaType } from '../media-type.enum'\nimport { Transform } from 'class-transformer'\nimport { ApiModelPropertyOptional } from '@nestjs/swagger'\n\nexport class UpdateMediaDto {\n\n  @ApiModelPropertyOptional()\n  @IsOptional()\n  @IsNotEmpty()\n  @IsString()\n  @MaxLength(25)\n  title?: string\n\n  @ApiModelPropertyOptional()\n  @IsOptional()\n  @IsNotEmpty()\n  @IsString()\n  @IsUrl()\n  @MaxLength(2048)\n  url?: string\n\n  @ApiModelPropertyOptional()\n  @IsOptional()\n  @IsNotEmpty()\n  @IsString()\n  @MaxLength(250)\n  @Transform(description => description || null)\n  description?: string\n\n  @ApiModelPropertyOptional({ enum: ['IMAGE', 'VIDEO'] })\n  @IsOptional()\n  @IsIn(Object.values(MediaType))\n  type?: MediaType\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UpdateUserDto.html":{"url":"classes/UpdateUserDto.html","title":"class - UpdateUserDto","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UpdateUserDto\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/update-user.dto.ts\n        \n\n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Optional\n                                defaultCategoryId\n                            \n                            \n                                    Optional\n                                pictureId\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            defaultCategoryId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelPropertyOptional({type: String})@Transform(undefined)@IsOptional()@IsUUID()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/update-user.dto.ts:11\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Optional\n                            pictureId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @ApiModelPropertyOptional({type: String})@Transform(undefined)@IsOptional()@IsUUID()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/update-user.dto.ts:17\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { IsOptional, IsUUID } from 'class-validator'\nimport { Transform } from 'class-transformer'\nimport { ApiModelPropertyOptional } from '@nestjs/swagger'\n\nexport class UpdateUserDto {\n\n  @ApiModelPropertyOptional({ type: String })\n  @Transform(categoryId => categoryId || null)\n  @IsOptional()\n  @IsUUID()\n  defaultCategoryId?: string\n\n  @ApiModelPropertyOptional({ type: String })\n  @Transform(categoryId => categoryId || null)\n  @IsOptional()\n  @IsUUID()\n  pictureId?: string\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/User.html":{"url":"classes/User.html","title":"class - User","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  User\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.entity.ts\n        \n\n\n            \n                Extends\n            \n            \n                    BaseEntity\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                categories\n                            \n                            \n                                creationDate\n                            \n                            \n                                currency\n                            \n                            \n                                defaultCategory\n                            \n                            \n                                defaultCategoryId\n                            \n                            \n                                email\n                            \n                            \n                                entries\n                            \n                            \n                                id\n                            \n                            \n                                lastLoginDate\n                            \n                            \n                                lastLoginIp\n                            \n                            \n                                media\n                            \n                            \n                                modificationDate\n                            \n                            \n                                password\n                            \n                            \n                                picture\n                            \n                            \n                                pictureId\n                            \n                            \n                                verified\n                            \n                            \n                                version\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                validatePassword\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            categories\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Category[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Exclude()@OneToMany(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/user.entity.ts:92\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            creationDate\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @CreateDateColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/user.entity.ts:60\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            currency\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         CurrencyEnum\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({type: 'enum', enum: CurrencyEnum, default: undefined})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/user.entity.ts:41\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            defaultCategory\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Category\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Exclude()@OneToOne(undefined, undefined)@JoinColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/user.entity.ts:75\n                            \n                        \n\n                \n                    \n                        Relations\n\n                    \n                \n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            defaultCategoryId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     uuid\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({nullable: true, default: undefined})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/user.entity.ts:48\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            email\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({length: 255, nullable: false})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/user.entity.ts:30\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            entries\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Entry[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Exclude()@OneToMany(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/user.entity.ts:88\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            id\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     uuid\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryGeneratedColumn('uuid')\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/user.entity.ts:27\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            lastLoginDate\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({length: 50, nullable: true, default: undefined})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/user.entity.ts:54\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            lastLoginIp\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({length: 255, nullable: true, default: undefined})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/user.entity.ts:57\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            media\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Media[]\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Exclude()@OneToMany(undefined, undefined)\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/user.entity.ts:84\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            modificationDate\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @UpdateDateColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/user.entity.ts:63\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            password\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Exclude()@Column({length: 60, nullable: false})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/user.entity.ts:34\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            picture\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         Media\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Exclude()@OneToOne(undefined, undefined)@JoinColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/user.entity.ts:80\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            pictureId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     uuid\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({nullable: true, default: undefined})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/user.entity.ts:51\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            verified\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         boolean\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Exclude()@Column({default: false})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/user.entity.ts:45\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            version\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @VersionColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/user/user.entity.ts:66\n                            \n                        \n\n\n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            validatePassword\n                        \n                        \n                    \n                \n            \n            \n                \nvalidatePassword(password: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.entity.ts:94\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import {\n  BaseEntity,\n  Column,\n  CreateDateColumn,\n  Entity,\n  JoinColumn,\n  OneToMany,\n  OneToOne,\n  PrimaryGeneratedColumn,\n  Unique,\n  UpdateDateColumn,\n  VersionColumn,\n} from 'typeorm'\nimport * as bcrypt from 'bcryptjs'\nimport { Entry } from '../entries/entry.entity'\nimport { Category } from '../categories/category.entity'\nimport { Media } from '../media/media.entity'\nimport { CurrencyEnum } from './currency.enum'\nimport uuid from 'uuid'\nimport { Exclude } from 'class-transformer'\n\n@Entity()\n@Unique(['email'])\nexport class User extends BaseEntity {\n\n  @PrimaryGeneratedColumn('uuid')\n  id: uuid\n\n  @Column({ length: 255, nullable: false })\n  email: string\n\n  @Exclude()\n  @Column({ length: 60, nullable: false })\n  password: string\n\n  @Column({\n    type: 'enum',\n    enum: CurrencyEnum,\n    default: CurrencyEnum.EURO,\n  })\n  currency: CurrencyEnum\n\n  @Exclude()\n  @Column({ default: false })\n  verified: boolean\n\n  @Column({ nullable: true, default: null })\n  defaultCategoryId: uuid\n\n  @Column({ nullable: true, default: null })\n  pictureId: uuid\n\n  @Column({ length: 50, nullable: true, default: null })\n  lastLoginDate: string\n\n  @Column({ length: 255, nullable: true, default: null })\n  lastLoginIp: string\n\n  @CreateDateColumn()\n  creationDate: string\n\n  @UpdateDateColumn()\n  modificationDate: string\n\n  @VersionColumn()\n  version: number\n\n  /**\n   * Relations\n   */\n\n  @Exclude()\n  @OneToOne(() => Category, category => category.userForDefaultCategory)\n  @JoinColumn()\n  defaultCategory: Category\n\n  @Exclude()\n  @OneToOne(() => Media, media => media.userForPicture)\n  @JoinColumn()\n  picture: Media\n\n  @Exclude()\n  @OneToMany(() => Media, media => media.user)\n  media: Media[]\n\n  @Exclude()\n  @OneToMany(() => Entry, entry => entry.user)\n  entries: Entry[]\n\n  @Exclude()\n  @OneToMany(() => Category, category => category.user)\n  categories: Category[]\n\n  validatePassword(password: string): Promise {\n    return bcrypt.compare(password, this.password)\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/UserRepository.html":{"url":"classes/UserRepository.html","title":"class - UserRepository","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  UserRepository\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/user.repository.ts\n        \n\n\n            \n                Extends\n            \n            \n                    Repository\n            \n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Static\n                                _hashPassword\n                            \n                            \n                                    Async\n                                signUp\n                            \n                            \n                                    Async\n                                updateUser\n                            \n                            \n                                    Async\n                                validatePassword\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Private\n                            Static\n                            _hashPassword\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    _hashPassword(password: string, salt: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.repository.ts:15\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    password\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    salt\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            signUp\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    signUp(authCredentialsDto: AuthCredentialsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.repository.ts:19\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    authCredentialsDto\n                                    \n                                                AuthCredentialsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            updateUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateUser(updateUserDto: UpdateUserDto, user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.repository.ts:47\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    updateUserDto\n                                    \n                                                UpdateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            validatePassword\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    validatePassword(authCredentialsDto: AuthCredentialsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/user/user.repository.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    authCredentialsDto\n                                    \n                                                AuthCredentialsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n\n\n\n\n\n    \n\n\n    \n        import { EntityRepository, Repository } from 'typeorm'\nimport { User } from './user.entity'\nimport { AuthCredentialsDto } from '../auth/dto/auth-credentials.dto'\nimport { BadRequestException, ConflictException, InternalServerErrorException } from '@nestjs/common'\nimport * as bcrypt from 'bcryptjs'\nimport { UpdateUserDto } from './update-user.dto'\nimport { emailConfig } from '../config/mailgun.config'\n\nconst PG_UNIQUE_CONSTRAINT_VIOLATION = '23505'\nconst PG_FOREIGN_KEY_CONSTRAINT_VIOLATION = '23503'\n\n@EntityRepository(User)\nexport class UserRepository extends Repository {\n\n  private static _hashPassword(password: string, salt: string): Promise {\n    return bcrypt.hash(password, salt)\n  }\n\n  async signUp(authCredentialsDto: AuthCredentialsDto): Promise {\n    const { email, password } = authCredentialsDto\n    const salt = await bcrypt.genSalt()\n    const user = Object.assign(this.create(), {\n      email,\n      verified: !emailConfig.verificationEnabled,\n      password: await UserRepository._hashPassword(password, salt),\n    })\n    try {\n      return await user.save()\n    } catch (e) {\n      if (e.code === PG_UNIQUE_CONSTRAINT_VIOLATION) {\n        throw new ConflictException('Email already exists')\n      }\n      throw new InternalServerErrorException()\n    }\n  }\n\n  async validatePassword(authCredentialsDto: AuthCredentialsDto): Promise {\n    const { email, password } = authCredentialsDto\n    const user = await this.findOne({ where: { email } })\n    if (user && await user.validatePassword(password)) {\n      return user\n    } else {\n      return null\n    }\n  }\n\n  async updateUser(updateUserDto: UpdateUserDto, user: User): Promise {\n    const updatedUser = Object.assign(user, updateUserDto)\n    try {\n      return await updatedUser.save()\n    } catch (e) {\n      if (e.code === PG_FOREIGN_KEY_CONSTRAINT_VIOLATION) {\n        throw new BadRequestException(`Invalid pictureId or defaultCategoryId provided.`)\n      }\n      throw new InternalServerErrorException()\n    }\n  }\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"controllers/UsersController.html":{"url":"controllers/UsersController.html","title":"controller - UsersController","body":"\n                   \n\n\n\n\n\n\n  Controllers\n  UsersController\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/users.controller.ts\n        \n\n            \n                Prefix\n            \n            \n                users\n            \n\n\n\n\n\n            \n    Index\n    \n        \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                deleteCurrent\n                            \n                            \n                                getCurrent\n                            \n                            \n                                    Async\n                                updateUser\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            deleteCurrent\n                        \n                        \n                    \n                \n            \n            \n                \ndeleteCurrent(user: User)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Delete('/current')\n                \n            \n\n            \n                \n                    Defined in src/user/users.controller.ts:45\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            getCurrent\n                        \n                        \n                    \n                \n            \n            \n                \ngetCurrent(user: User)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Get('/current')\n                \n            \n\n            \n                \n                    Defined in src/user/users.controller.ts:31\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         User\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            updateUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateUser(updateUserDto: UpdateUserDto, user: User)\n                \n            \n\n            \n                \n                    Decorators : \n                    \n                    @Patch('/current')@UsePipes(new ValidationPipe())\n                \n            \n\n            \n                \n                    Defined in src/user/users.controller.ts:37\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    updateUserDto\n                                    \n                                                UpdateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n\n\n    \n        import {\n  Body,\n  ClassSerializerInterceptor,\n  Controller,\n  Delete,\n  Get,\n  Patch,\n  UseGuards,\n  UseInterceptors,\n  UsePipes,\n  ValidationPipe,\n} from '@nestjs/common'\nimport { GetUser } from './get-user.decorator'\nimport { User } from './user.entity'\nimport { AuthGuard } from '@nestjs/passport'\nimport { UsersService } from './users.service'\nimport { UpdateUserDto } from './update-user.dto'\nimport { ApiBearerAuth, ApiUseTags } from '@nestjs/swagger'\n\n@ApiBearerAuth()\n@ApiUseTags('users')\n@Controller('users')\n@UseGuards(AuthGuard())\n@UseInterceptors(ClassSerializerInterceptor)\nexport class UsersController {\n\n  constructor(private readonly usersService: UsersService) {\n  }\n\n  @Get('/current')\n  getCurrent(@GetUser() user: User): User {\n    return user\n  }\n\n  @Patch('/current')\n  @UsePipes(new ValidationPipe({ whitelist: true, transform: true }))\n  async updateUser(\n    @Body() updateUserDto: UpdateUserDto,\n    @GetUser() user: User,\n  ): Promise {\n    return this.usersService.updateUser(updateUserDto, user)\n  }\n\n  @Delete('/current')\n  deleteCurrent(@GetUser() user: User): Promise {\n    return this.usersService.deleteUser(user.id)\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules/UsersModule.html":{"url":"modules/UsersModule.html","title":"module - UsersModule","body":"\n                   \n\n\n\n\n    Modules\n    UsersModule\n\n\n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_imports\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nMediaModule\n\nMediaModule\n\n\n\nUsersModule\n\nUsersModule\n\nUsersModule -->\n\nMediaModule->UsersModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n\n\n\n\n    \n        Info\n    \n    \n        Source\n    \n\n\n\n    \n\n        \n            File\n        \n        \n            src/user/users.module.ts\n        \n\n\n\n\n        \n            \n                \n                    Providers\n                    \n                        \n                            UsersService\n                        \n                    \n                \n                \n                    Controllers\n                    \n                        \n                            UsersController\n                        \n                    \n                \n                \n                    Imports\n                    \n                        \n                            MediaModule\n                        \n                    \n                \n                \n                    Exports\n                    \n                        \n                            UsersService\n                        \n                    \n                \n            \n        \n\n\n    \n\n\n    \n        import { forwardRef, Module } from '@nestjs/common'\nimport { TypeOrmModule } from '@nestjs/typeorm'\nimport { UsersController } from './users.controller'\nimport { UserRepository } from './user.repository'\nimport { UsersService } from './users.service'\nimport { AuthModule } from '../auth/auth.module'\nimport { MediaModule } from '../media/media.module'\nimport { CategoriesModule } from '../categories/categories.module'\n\n@Module({\n  imports: [\n    TypeOrmModule.forFeature([UserRepository]),\n    forwardRef(() => AuthModule),\n    MediaModule,\n    forwardRef(() => CategoriesModule),\n  ],\n  providers: [\n    UsersService,\n  ],\n  controllers: [UsersController],\n  exports: [UsersService],\n})\n\nexport class UsersModule {\n}\n\n    \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"injectables/UsersService.html":{"url":"injectables/UsersService.html","title":"injectable - UsersService","body":"\n                   \n\n\n\n\n\n\n\n\n  Injectables\n  UsersService\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/user/users.service.ts\n        \n\n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                    Private\n                                    Readonly\n                                logger\n                            \n                        \n                    \n                \n\n                \n                    \n                        Methods\n                    \n                \n                \n                    \n                        \n                            \n                                    Async\n                                deleteUser\n                            \n                            \n                                findOne\n                            \n                            \n                                signUp\n                            \n                            \n                                    Async\n                                updateUser\n                            \n                            \n                                validatePassword\n                            \n                        \n                    \n                \n\n\n\n\n\n        \n    \n\n\n            \n    Constructor\n        \n            \n                \n                    \nconstructor(userRepository: UserRepository, mediaService: MediaService, categoriesService: CategoriesService)\n                    \n                \n                        \n                            \n                                Defined in src/user/users.service.ts:14\n                            \n                        \n\n                \n                    \n                            \n                                    Parameters :\n                                    \n                                        \n                                            \n                                                Name\n                                                    Type\n                                                Optional\n                                            \n                                        \n                                        \n                                                \n                                                        userRepository\n                                                  \n                                                        \n                                                                        UserRepository\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        mediaService\n                                                  \n                                                        \n                                                                        MediaService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                                \n                                                        categoriesService\n                                                  \n                                                        \n                                                                        CategoriesService\n                                                        \n                                                  \n                                                    \n                                                            No\n                                                    \n                                                    \n                                                \n                                        \n                                    \n                            \n                    \n                \n            \n        \n\n\n            \n    \n    \n        Methods\n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            deleteUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    deleteUser(id: uuid)\n                \n            \n\n\n            \n                \n                    Defined in src/user/users.service.ts:73\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    id\n                                    \n                                            uuid\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :     Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            findOne\n                        \n                        \n                    \n                \n            \n            \n                \nfindOne(email: string)\n                \n            \n\n\n            \n                \n                    Defined in src/user/users.service.ts:24\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    email\n                                    \n                                                string\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            signUp\n                        \n                        \n                    \n                \n            \n            \n                \nsignUp(authCredentialsDto: AuthCredentialsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/user/users.service.ts:28\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    authCredentialsDto\n                                    \n                                                AuthCredentialsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            Async\n                            updateUser\n                        \n                        \n                    \n                \n            \n            \n                \n                    \n                    updateUser(updateUserDto: UpdateUserDto, user: User)\n                \n            \n\n\n            \n                \n                    Defined in src/user/users.service.ts:36\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    updateUserDto\n                                    \n                                                UpdateUserDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                                \n                                    user\n                                    \n                                                User\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n    \n        \n            \n                \n                    \n                    \n                        \n                            validatePassword\n                        \n                        \n                    \n                \n            \n            \n                \nvalidatePassword(authCrendentialsDto: AuthCredentialsDto)\n                \n            \n\n\n            \n                \n                    Defined in src/user/users.service.ts:32\n                \n            \n\n\n            \n                \n\n                    \n                        Parameters :\n                        \n                            \n                                \n                                    Name\n                                    Type\n                                    Optional\n                                \n                            \n                            \n                                \n                                    authCrendentialsDto\n                                    \n                                                AuthCredentialsDto\n                                    \n\n                                    \n                                        No\n                                    \n\n\n                                \n                            \n                        \n                    \n                    \n                    \n                    \n                        Returns :         Promise\n\n                    \n                    \n                        \n                    \n                \n            \n        \n    \n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                                Private\n                                Readonly\n                            logger\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : new Logger()\n                        \n                    \n                        \n                            \n                                    Defined in src/user/users.service.ts:14\n                            \n                        \n\n\n            \n        \n\n\n    \n\n\n    \n        import { BadRequestException, Injectable, Logger } from '@nestjs/common'\nimport { InjectRepository } from '@nestjs/typeorm'\nimport { AuthCredentialsDto } from '../auth/dto/auth-credentials.dto'\nimport { UserRepository } from './user.repository'\nimport { User } from './user.entity'\nimport uuid from 'uuid'\nimport { UpdateUserDto } from './update-user.dto'\nimport { MediaService } from '../media/media.service'\nimport { CategoriesService } from '../categories/categories.service'\n\n@Injectable()\nexport class UsersService {\n\n  private readonly logger = new Logger()\n\n  constructor(\n    @InjectRepository(UserRepository)\n    private readonly userRepository: UserRepository,\n    private readonly mediaService: MediaService,\n    private readonly categoriesService: CategoriesService,\n  ) {\n  }\n\n  findOne(email: string): Promise {\n    return this.userRepository.findOne({ email })\n  }\n\n  signUp(authCredentialsDto: AuthCredentialsDto): Promise {\n    return this.userRepository.signUp(authCredentialsDto)\n  }\n\n  validatePassword(authCrendentialsDto: AuthCredentialsDto): Promise {\n    return this.userRepository.validatePassword(authCrendentialsDto)\n  }\n\n  async updateUser(updateUserDto: UpdateUserDto, user: User): Promise {\n    if (Object.entries(updateUserDto).length === 0) {\n      return user\n    }\n    try {\n      // those calls are done to ensure that the category and/or media provided belongs to the user\n      // TODO: replace this to do only one db call\n      if (updateUserDto.defaultCategoryId) {\n        await this.categoriesService.getCategoryById(updateUserDto.defaultCategoryId, user)\n      }\n      if (updateUserDto.pictureId) {\n        await this.mediaService.getMediaById(updateUserDto.pictureId, user)\n      }\n    } catch (e) {\n      this.logger.warn(`updateUser: pictureId or defaultCategoryId from other user`, e)\n      throw new BadRequestException(`Invalid pictureId or defaultCategoryId provided.`)\n    }\n\n    // becauseuserRepository.updateUser modifies the object ...\n    const previousImageId = user.pictureId\n\n    const updatedUser = await this.userRepository.updateUser(updateUserDto, user)\n\n    if (\n      previousImageId\n      && updateUserDto.hasOwnProperty('pictureId')\n      && (updateUserDto.pictureId === null || updateUserDto.pictureId !== previousImageId)\n    ) {\n      try {\n        await this.mediaService.deleteMedia(previousImageId, user)\n      } catch (e) {\n        this.logger.error(`User successfully updated but media with id ${previousImageId} could not be deleted.`)\n      }\n    }\n    return updatedUser\n  }\n\n  async deleteUser(id: uuid): Promise {\n    await this.userRepository.delete({ id })\n  }\n}\n\n    \n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"classes/VerificationTokenEntity.html":{"url":"classes/VerificationTokenEntity.html","title":"class - VerificationTokenEntity","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n  Classes\n  VerificationTokenEntity\n\n\n\n        \n            Info\n        \n        \n            Source\n        \n\n\n\n    \n        \n            File\n        \n        \n            src/auth/verification.token.entity.ts\n        \n\n\n            \n                Extends\n            \n            \n                    BaseEntity\n            \n\n\n\n            \n    Index\n    \n        \n                \n                    \n                        Properties\n                    \n                \n                \n                    \n                        \n                            \n                                creationDate\n                            \n                            \n                                modificationDate\n                            \n                            \n                                token\n                            \n                            \n                                user\n                            \n                            \n                                userId\n                            \n                            \n                                version\n                            \n                        \n                    \n                \n\n\n\n\n\n\n        \n    \n\n\n\n            \n    \n        \n            Properties\n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            creationDate\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @CreateDateColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auth/verification.token.entity.ts:19\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            modificationDate\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @UpdateDateColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auth/verification.token.entity.ts:22\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            token\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @Column({length: 32, nullable: false})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auth/verification.token.entity.ts:16\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            user\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         User\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @OneToOne(undefined, undefined, {eager: true, onDelete: 'CASCADE', primary: true})@JoinColumn({name: 'userId'})\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auth/verification.token.entity.ts:10\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            userId\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     uuid\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @PrimaryColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auth/verification.token.entity.ts:13\n                            \n                        \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            version\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         number\n\n                        \n                    \n                    \n                        \n                            Decorators : \n                            \n                            \n                                @VersionColumn()\n                            \n                        \n                    \n                        \n                            \n                                    Defined in src/auth/verification.token.entity.ts:25\n                            \n                        \n\n\n            \n        \n\n\n\n\n\n\n\n\n    \n\n\n    \n        import { BaseEntity, Column, CreateDateColumn, Entity, JoinColumn, OneToOne, PrimaryColumn, UpdateDateColumn, VersionColumn } from 'typeorm'\nimport { User } from '../user/user.entity'\nimport * as uuid from 'uuid'\n\n@Entity()\nexport class VerificationTokenEntity extends BaseEntity {\n\n  @OneToOne(() => User, user => user.id, { eager: true, onDelete: 'CASCADE', primary: true })\n  @JoinColumn({ name: 'userId' })\n  user: User\n\n  @PrimaryColumn()\n  userId: uuid\n\n  @Column({ length: 32, nullable: false })\n  token: string\n\n  @CreateDateColumn()\n  creationDate: string\n\n  @UpdateDateColumn()\n  modificationDate: string\n\n  @VersionColumn()\n  version: number\n}\n\n    \n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"coverage.html":{"url":"coverage.html","title":"coverage - coverage","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n    Documentation coverage\n\n\n\n    \n\n\n\n    \n        \n            File\n            Type\n            Identifier\n            Statements\n        \n    \n    \n        \n            \n                \n                src/auth/auth.controller.ts\n            \n            controller\n            AuthController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/auth/auth.module.ts\n            \n            variable\n            jwtConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/auth/auth.service.ts\n            \n            injectable\n            AuthService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/auth/dto/auth-credentials.dto.ts\n            \n            class\n            AuthCredentialsDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/interfaces/jwt-payload.interface.ts\n            \n            interface\n            JwtPayload\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/auth/jwt.strategy.ts\n            \n            injectable\n            JwtStrategy\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/auth/verification.token.entity.ts\n            \n            class\n            VerificationTokenEntity\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/categories/categories.controller.ts\n            \n            controller\n            CategoriesController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/categories/categories.service.ts\n            \n            injectable\n            CategoriesService\n            \n                0 %\n                (0/10)\n            \n        \n        \n            \n                \n                src/categories/category.entity.ts\n            \n            class\n            Category\n            \n                6 %\n                (1/16)\n            \n        \n        \n            \n                \n                src/categories/category.repository.ts\n            \n            class\n            CategoryRepository\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/categories/category.repository.ts\n            \n            variable\n            PG_FOREIGN_KEY_CONSTRAINT_VIOLATION\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/categories/dto/create-category.dto.ts\n            \n            class\n            CreateCategoryDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/categories/dto/get-categories-filter.dto.ts\n            \n            class\n            GetCategoriesFilterDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/categories/dto/update-category.dto.ts\n            \n            class\n            UpdateCategoryDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/config/mailgun.config.ts\n            \n            variable\n            conf\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/mailgun.config.ts\n            \n            variable\n            emailConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/typeorm.config.ts\n            \n            variable\n            dbConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/config/typeorm.config.ts\n            \n            variable\n            typeOrmConfig\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/entries/dto/create-entry.dto.ts\n            \n            class\n            CreateEntryDto\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/entries/dto/get-entries-filter.dto.ts\n            \n            class\n            GetEntriesFilterDto\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/entries/dto/update-entry.dto.ts\n            \n            class\n            UpdateEntryDto\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/entries/entries.controller.ts\n            \n            controller\n            EntriesController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/entries/entries.service.ts\n            \n            injectable\n            EntriesService\n            \n                0 %\n                (0/8)\n            \n        \n        \n            \n                \n                src/entries/entry.entity.ts\n            \n            class\n            Entry\n            \n                6 %\n                (1/15)\n            \n        \n        \n            \n                \n                src/entries/entry.repository.ts\n            \n            class\n            EntryRepository\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/entries/entry.repository.ts\n            \n            variable\n            PG_FOREIGN_KEY_CONSTRAINT_VIOLATION\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/entries/entry.repository.ts\n            \n            variable\n            PG_UNIQUE_CONSTRAINT_VIOLATION\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/main.ts\n            \n            function\n            bootstrap\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/media/dto/create-media.dto.ts\n            \n            class\n            CreateMediaDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/media/dto/update-media.dto.ts\n            \n            class\n            UpdateMediaDto\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/media/media.controller.ts\n            \n            controller\n            MediaController\n            \n                0 %\n                (0/6)\n            \n        \n        \n            \n                \n                src/media/media.entity.ts\n            \n            class\n            Media\n            \n                7 %\n                (1/14)\n            \n        \n        \n            \n                \n                src/media/media.repository.ts\n            \n            class\n            MediaRepository\n            \n                0 %\n                (0/2)\n            \n        \n        \n            \n                \n                src/media/media.repository.ts\n            \n            variable\n            PG_FOREIGN_KEY_CONSTRAINT_VIOLATION\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/media/media.service.ts\n            \n            injectable\n            MediaService\n            \n                0 %\n                (0/7)\n            \n        \n        \n            \n                \n                src/user/get-user.decorator.ts\n            \n            variable\n            GetUser\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user/update-user.dto.ts\n            \n            class\n            UpdateUserDto\n            \n                0 %\n                (0/3)\n            \n        \n        \n            \n                \n                src/user/user.entity.ts\n            \n            class\n            User\n            \n                5 %\n                (1/19)\n            \n        \n        \n            \n                \n                src/user/user.repository.ts\n            \n            class\n            UserRepository\n            \n                0 %\n                (0/5)\n            \n        \n        \n            \n                \n                src/user/user.repository.ts\n            \n            variable\n            PG_FOREIGN_KEY_CONSTRAINT_VIOLATION\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user/user.repository.ts\n            \n            variable\n            PG_UNIQUE_CONSTRAINT_VIOLATION\n            \n                0 %\n                (0/1)\n            \n        \n        \n            \n                \n                src/user/users.controller.ts\n            \n            controller\n            UsersController\n            \n                0 %\n                (0/4)\n            \n        \n        \n            \n                \n                src/user/users.service.ts\n            \n            injectable\n            UsersService\n            \n                0 %\n                (0/8)\n            \n        \n    \n\n\n\n\n\n    new Tablesort(document.getElementById('coverage-table'));\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"dependencies.html":{"url":"dependencies.html","title":"package-dependencies - dependencies","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n    \n        Dependencies\n    \n    \n        \n            @nestjs/common : ^6.0.0\n        \n            @nestjs/core : ^6.0.0\n        \n            @nestjs/jwt : ^6.1.1\n        \n            @nestjs/passport : ^6.1.0\n        \n            @nestjs/platform-express : ^6.0.0\n        \n            @nestjs/swagger : ^3.1.0\n        \n            @nestjs/typeorm : ^6.1.3\n        \n            bcryptjs : ^2.4.3\n        \n            class-transformer : ^0.2.3\n        \n            class-validator : ^0.10.0\n        \n            config : ^3.2.2\n        \n            crypto-random-string : ^3.0.1\n        \n            mailgun-js : ^0.22.0\n        \n            passport : ^0.4.0\n        \n            passport-jwt : ^4.0.0\n        \n            pg : ^7.12.1\n        \n            reflect-metadata : ^0.1.12\n        \n            rimraf : ^2.6.2\n        \n            rxjs : ^6.3.3\n        \n            swagger-ui-express : ^4.1.2\n        \n            typeorm : ^0.2.18\n        \n            uuid : ^3.3.3\n    \n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/enumerations.html":{"url":"miscellaneous/enumerations.html","title":"miscellaneous-enumerations - enumerations","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Enumerations\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            CurrencyEnum   (src/.../currency.enum.ts)\n                        \n                        \n                            MediaType   (src/.../media-type.enum.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/user/currency.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        CurrencyEnum\n                    \n                \n                        \n                            \n                                 EURO\n                            \n                        \n                        \n                            \n                                Value : EURO\n                            \n                        \n                        \n                            \n                                 DOLLAR\n                            \n                        \n                        \n                            \n                                Value : DOLLAR\n                            \n                        \n            \n        \n\n    src/media/media-type.enum.ts\n    \n        \n            \n                \n                    \n                        \n                        MediaType\n                    \n                \n                        \n                            \n                                 IMAGE\n                            \n                        \n                        \n                            \n                                Value : IMAGE\n                            \n                        \n                        \n                            \n                                 VIDEO\n                            \n                        \n                        \n                            \n                                Value : VIDEO\n                            \n                        \n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/functions.html":{"url":"miscellaneous/functions.html","title":"miscellaneous-functions - functions","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Functions\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            bootstrap   (src/.../main.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/main.ts\n    \n        \n        \n            \n                \n                    \n                    \n                        \n                            bootstrap\n                        \n                        \n                    \n                \n            \n            \n                \nbootstrap()\n                \n            \n\n\n\n\n        \n    \n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"index.html":{"url":"index.html","title":"getting-started - index","body":"\n                   \n\n\n  \n  \n\n\nAn expense tracker made with Nest.\n\n\n\n\nDescription\nnestjs-shargea is an expense tracker made with Nest.\nInstallation\n$ npm installRunning the app\n# development\n$ npm run start\n\n# watch mode\n$ npm run start:dev\n\n# production mode\n$ npm run start:prodTest\n# unit tests\n$ npm run test\n\n# test coverage\n$ npm run test:cov\n\n# generate documentation\n$ npx compodoc -p tsconfig.json -sPostman collections:\nAPI tests\nIntegration tests\nSupport\nnestjs-shargea is an MIT-licensed open source project.\nStay in touch\n\nAuthor - Denis Hamann\nWebsite - https://shargea.com\n\nLicense\nnestjs-shargea is MIT licensed.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"license.html":{"url":"license.html","title":"getting-started - license","body":"\n                   \n\nMIT License\nCopyright (c) [year] [fullname]\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"modules.html":{"url":"modules.html","title":"modules - modules","body":"\n                   \n\n\n\n\n    Modules\n\n\n    \n            \n                \n                    \n                        AppModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        AuthModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        CategoriesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        EntriesModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        MediaModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n            \n                \n                    \n                        UsersModule\n                    \n                    \n                                \n                                    \n                                        Your browser does not support SVG\n                                    \n                                \n                        \n                            Browse\n                        \n                    \n                \n            \n    \n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"overview.html":{"url":"overview.html","title":"overview - overview","body":"\n                   \n\n\n\n    Overview\n\n  \n\n    \n        \n\n\n\n\n\ndependencies\n\nLegend\n\n  Declarations\n\n  Module\n\n  Bootstrap\n\n  Providers\n\n  Exports\n\ncluster_AppModule\n\n\n\ncluster_AppModule_imports\n\n\n\ncluster_AuthModule\n\n\n\ncluster_AuthModule_providers\n\n\n\ncluster_CategoriesModule\n\n\n\ncluster_CategoriesModule_exports\n\n\n\ncluster_CategoriesModule_providers\n\n\n\ncluster_EntriesModule\n\n\n\ncluster_EntriesModule_providers\n\n\n\ncluster_MediaModule\n\n\n\ncluster_MediaModule_exports\n\n\n\ncluster_MediaModule_providers\n\n\n\ncluster_UsersModule\n\n\n\ncluster_UsersModule_exports\n\n\n\ncluster_UsersModule_providers\n\n\n\n\nAuthModule\n\nAuthModule\n\n\n\nEntriesModule\n\nEntriesModule\n\nEntriesModule -->\n\nAuthModule->EntriesModule\n\n\n\n\n\nAppModule\n\nAppModule\n\nAppModule -->\n\nAuthModule->AppModule\n\n\n\n\n\nCategoriesModule\n\nCategoriesModule\n\nEntriesModule -->\n\nCategoriesModule->EntriesModule\n\n\n\nAppModule -->\n\nCategoriesModule->AppModule\n\n\n\n\n\nCategoriesService \n\nCategoriesService \n\nCategoriesService  -->\n\nCategoriesModule->CategoriesService \n\n\n\nAppModule -->\n\nEntriesModule->AppModule\n\n\n\n\n\nMediaModule\n\nMediaModule\n\nCategoriesModule -->\n\nMediaModule->CategoriesModule\n\n\n\nEntriesModule -->\n\nMediaModule->EntriesModule\n\n\n\n\n\nUsersModule\n\nUsersModule\n\nUsersModule -->\n\nMediaModule->UsersModule\n\n\n\nAppModule -->\n\nMediaModule->AppModule\n\n\n\n\n\nMediaService \n\nMediaService \n\nMediaService  -->\n\nMediaModule->MediaService \n\n\n\nAppModule -->\n\nUsersModule->AppModule\n\n\n\n\n\nUsersService \n\nUsersService \n\nUsersService  -->\n\nUsersModule->UsersService \n\n\n\n\n\nAuthService\n\nAuthService\n\nAuthModule -->\n\nAuthService->AuthModule\n\n\n\n\n\nJwtStrategy\n\nJwtStrategy\n\nAuthModule -->\n\nJwtStrategy->AuthModule\n\n\n\n\n\nCategoriesService\n\nCategoriesService\n\nCategoriesModule -->\n\nCategoriesService->CategoriesModule\n\n\n\n\n\nEntriesService\n\nEntriesService\n\nEntriesModule -->\n\nEntriesService->EntriesModule\n\n\n\n\n\nMediaService\n\nMediaService\n\nMediaModule -->\n\nMediaService->MediaModule\n\n\n\n\n\nUsersService\n\nUsersService\n\nUsersModule -->\n\nUsersService->UsersModule\n\n\n\n\n\n\n    \n    \n    \n        Zoom in\n        Reset\n        Zoom out\n    \n\n  \n\n    \n        \n            \n                \n                    \n                    \n                        6 Modules\n                    \n                \n            \n        \n        \n            \n                \n                    \n                    5 Controllers\n                \n            \n        \n        \n            \n                \n                    \n                    6 Injectables\n                \n            \n        \n        \n            \n                \n                    \n                    19 Classes\n                \n            \n        \n        \n            \n                \n                    \n                    1 Interface\n                \n            \n        \n    \n\n\n \n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"},"miscellaneous/variables.html":{"url":"miscellaneous/variables.html","title":"miscellaneous-variables - variables","body":"\n                   \n\n\n\n\n\n\n\n\n\n\n\n\n\n\n                   \n\n\n  Miscellaneous\n  Variables\n\n\n\n    Index\n    \n        \n            \n                \n                    \n                        \n                            conf   (src/.../mailgun.config.ts)\n                        \n                        \n                            dbConfig   (src/.../typeorm.config.ts)\n                        \n                        \n                            emailConfig   (src/.../mailgun.config.ts)\n                        \n                        \n                            GetUser   (src/.../get-user.decorator.ts)\n                        \n                        \n                            jwtConfig   (src/.../auth.module.ts)\n                        \n                        \n                            PG_FOREIGN_KEY_CONSTRAINT_VIOLATION   (src/.../user.repository.ts)\n                        \n                        \n                            PG_FOREIGN_KEY_CONSTRAINT_VIOLATION   (src/.../entry.repository.ts)\n                        \n                        \n                            PG_FOREIGN_KEY_CONSTRAINT_VIOLATION   (src/.../category.repository.ts)\n                        \n                        \n                            PG_FOREIGN_KEY_CONSTRAINT_VIOLATION   (src/.../media.repository.ts)\n                        \n                        \n                            PG_UNIQUE_CONSTRAINT_VIOLATION   (src/.../user.repository.ts)\n                        \n                        \n                            PG_UNIQUE_CONSTRAINT_VIOLATION   (src/.../entry.repository.ts)\n                        \n                        \n                            typeOrmConfig   (src/.../typeorm.config.ts)\n                        \n                    \n                \n            \n        \n    \n\n\n    src/config/mailgun.config.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            conf\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : config.get('email')\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            emailConfig\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         object\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  verificationEnabled: process.env.EMAIL_VERIFICATION_ENABLED || conf.verificationEnabled,\n  apiKey: process.env.EMAIL_API_KEY || conf.apiKey,\n  domain: process.env.EMAIL_DOMAIN || conf.domain,\n  from: process.env.EMAIL_FROM || conf.from,\n  hostname: process.env.EMAIL_HOSTNAME || conf.hostname,\n}\n                        \n                    \n\n\n            \n        \n\n    src/config/typeorm.config.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            dbConfig\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : config.get('db')\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            typeOrmConfig\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :     TypeOrmModuleOptions\n\n                        \n                    \n                    \n                        \n                            Default value : {\n  type: dbConfig.type,\n  host: process.env.RDS_HOSTNAME || dbConfig.host,\n  port: process.env.RDS_PORT || dbConfig.port,\n  username: process.env.RDS_USERNAME || dbConfig.email,\n  password: process.env.RDS_PASSWORD || dbConfig.password,\n  database: process.env.RDS_DB_NAME || dbConfig.database,\n  entities: [__dirname + '/../**/*.entity.{js,ts}'],\n  synchronize: process.env.TYPEORM_SYNC || dbConfig.synchronize,\n}\n                        \n                    \n\n\n            \n        \n\n    src/user/get-user.decorator.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            GetUser\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : createParamDecorator((data, req): User => {\n  return req.user\n})\n                        \n                    \n\n\n            \n        \n\n    src/auth/auth.module.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            jwtConfig\n                            \n                        \n                    \n                \n                    \n                        \n                            Default value : config.get('jwt')\n                        \n                    \n\n\n            \n        \n\n    src/user/user.repository.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            PG_FOREIGN_KEY_CONSTRAINT_VIOLATION\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : '23503'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            PG_UNIQUE_CONSTRAINT_VIOLATION\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : '23505'\n                        \n                    \n\n\n            \n        \n\n    src/entries/entry.repository.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            PG_FOREIGN_KEY_CONSTRAINT_VIOLATION\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : '23503'\n                        \n                    \n\n\n            \n        \n        \n            \n                \n                    \n                        \n                        \n                            \n                            PG_UNIQUE_CONSTRAINT_VIOLATION\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : '23505'\n                        \n                    \n\n\n            \n        \n\n    src/categories/category.repository.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            PG_FOREIGN_KEY_CONSTRAINT_VIOLATION\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : '23503'\n                        \n                    \n\n\n            \n        \n\n    src/media/media.repository.ts\n    \n            \n            \n                \n                    \n                        \n                        \n                            \n                            PG_FOREIGN_KEY_CONSTRAINT_VIOLATION\n                            \n                        \n                    \n                \n                    \n                        \n                            Type :         string\n\n                        \n                    \n                    \n                        \n                            Default value : '23503'\n                        \n                    \n\n\n            \n        \n\n\n\n\n                   \n    \n         result-matching \"\"\n        \n    \n    \n        No results matching \"\"\n    \n\n"}}
}
